//Copyright camila314 2021. Autogenerated using a python script
//please add meeeeee - alk1m123/altalk23
#ifndef __CACKIT_HPP__
#define __CACKIT_HPP__

#include <stdint.h>

uintptr_t getBase();
volatile uintptr_t const base = getBase();

#include <Cacao.hpp>
#include <CackitMacros.hpp>

#ifndef CAC_PROJ_NAME
#define CAC_PROJ_NAME "Default Cacao Project"
#endif

ModContainer* const m = new ModContainer(CAC_PROJ_NAME);

// "A destructor is used to destroy objects of its class type. The address of a destructor shall not be taken."
// - C++ standard 12.4.2
// Therefore, we shall not take the destructor of the class and replace it with an empty function.  ~alk
//
// 0x18 from 0x10 + 0x8, the vtable pointer is offset by 0x10 and the destructor is at the address vtable + 0x8
template <typename V>
inline uintptr_t extract_destructor(V vtable) {
    return (*reinterpret_cast<uintptr_t*>(reinterpret_cast<uintptr_t>(vtable)+0x18));
};

// Even more advanced this time
//
// 0xf is from 0x10 - 1, the vtable pointer is offset by 0x10 and -1 comes from the address of a virtual func being 1 off
template <typename F, typename V>
inline uintptr_t extract_virtual(V vtable, F func) { 
    return (*reinterpret_cast<uintptr_t*>(reinterpret_cast<uintptr_t>(vtable)+*reinterpret_cast<uintptr_t*>(&func)+0xf));
};

// itâ€™s actually kinda sick because you can use the ref cast thingy to convert almost anything to anything else  ~camila
template <typename F>
inline uintptr_t extract(F func) {
    return reinterpret_cast<uintptr_t&>(func);
};

// Just in case if we ever need to add shared implementations
class $CacBase {};


template<class D, void*** V>
class $AchievementNotifier : public AchievementNotifier, public $CacBase {
public:
    $AchievementNotifier();
    ~$AchievementNotifier();
    void sharedState();
    void willSwitchToScene(cocos2d::CCScene*);
};


template<class D, void*** V>
class $AnimatedGameObject : public AnimatedGameObject, public $CacBase {
public:
    $AnimatedGameObject();
    ~$AnimatedGameObject();
    void playAnimation(int);
    void updateChildSpriteColor(cocos2d::_ccColor3B);
};


template<class D, void*** V>
class $AppDelegate : public AppDelegate, public $CacBase {
public:
    $AppDelegate();
    ~$AppDelegate();
    void bgScale();
    bool applicationDidFinishLaunching() override;
    void applicationDidEnterBackground() override;
    void applicationWillEnterForeground() override;
    bool applicationWillBecomeActive() override;
    bool applicationWillResignActive() override;
    void trySaveGame() override;
    void willSwitchToScene(cocos2d::CCScene*) override;
    static AppDelegate* get();
};


template<class D, void*** V>
class $SongInfoObject : public SongInfoObject, public $CacBase {
public:
    $SongInfoObject();
    ~$SongInfoObject();
};


template<class D, void*** V>
class $ArtistCell : public ArtistCell, public $CacBase {
public:
    $ArtistCell();
    ~$ArtistCell();
    void draw();
    bool init();
    void loadFromObject(SongInfoObject*);
    void onNewgrounds(cocos2d::CCObject*);
    void updateBGColor(int);
};


template<class D, void*** V>
class $AudioEffectsLayer : public AudioEffectsLayer, public $CacBase {
public:
    $AudioEffectsLayer();
    ~$AudioEffectsLayer();
    void audioStep(float);
    static AudioEffectsLayer* create(std::string);
    void resetAudioVars();
};


template<class D, void*** V>
class $CCIndexPath : public CCIndexPath, public $CacBase {
public:
    $CCIndexPath();
    ~$CCIndexPath();
};


template<class D, void*** V>
class $TableViewCell : public TableViewCell, public $CacBase {
public:
    $TableViewCell();
    ~$TableViewCell();
};


template<class D, void*** V>
class $TableViewDelegate : public TableViewDelegate, public $CacBase {
public:
    $TableViewDelegate();
    ~$TableViewDelegate();
};


template<class D, void*** V>
class $TableViewDataSource : public TableViewDataSource, public $CacBase {
public:
    $TableViewDataSource();
    ~$TableViewDataSource();
};


template<class D, void*** V>
class $CCScrollLayerExt : public CCScrollLayerExt, public $CacBase {
public:
    $CCScrollLayerExt();
    ~$CCScrollLayerExt();
    void moveToTop();
    void moveToTopWithOffset(float);
};


template<class D, void*** V>
class $CCScrollLayerExtDelegate : public CCScrollLayerExtDelegate, public $CacBase {
public:
    $CCScrollLayerExtDelegate();
    ~$CCScrollLayerExtDelegate();
};


template<class D, void*** V>
class $TableView : public TableView, public $CacBase {
public:
    $TableView();
    ~$TableView();
    static TableView* create(TableViewDelegate*, TableViewDataSource*, cocos2d::CCRect);
    void reloadData();
};


template<class D, void*** V>
class $BoomListView : public BoomListView, public $CacBase {
public:
    $BoomListView();
    ~$BoomListView();
    static BoomListView* create(cocos2d::CCArray*, float, float, int, BoomListType);
    bool init(cocos2d::CCArray*, float, float, int, BoomListType);
    void draw();
    void setupList() override;
    void TableViewWillDisplayCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*) override;
    void cellHeightForRowAtIndexPath(CCIndexPath&, TableView*) override;
    void didSelectRowAtIndexPath(CCIndexPath&, TableView*) override;
    int numberOfRowsInSection(unsigned int, TableView*) override;
    void numberOfSectionsInTableView(TableView*) override;
    void cellForRowAtIndexPath(CCIndexPath&, TableView*) override;
    void TableViewCommitCellEditingStyleForRowAtIndexPath(TableView*, TableViewCellEditingStyle, CCIndexPath&) override;
    void TableViewWillReloadCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*) override;
    TableViewCell* getListCell(char const*) override;
    void loadCell(TableViewCell*, int) override;
};


template<class D, void*** V>
class $BoomScrollLayer : public BoomScrollLayer, public $CacBase {
public:
    $BoomScrollLayer();
    ~$BoomScrollLayer();
};


template<class D, void*** V>
class $ButtonSprite : public ButtonSprite, public $CacBase {
public:
    $ButtonSprite();
    ~$ButtonSprite();
    static ButtonSprite* create(char const*);
    static ButtonSprite* create(char const*, int, int, float, bool);
    void updateBGImage(char const*);
};


template<class D, void*** V>
class $CCAnimatedSprite : public CCAnimatedSprite, public $CacBase {
public:
    $CCAnimatedSprite();
    ~$CCAnimatedSprite();
    void runAnimation(std::string);
    void tweenToAnimation(std::string, float);
};


template<class D, void*** V>
class $CCCircleWave : public CCCircleWave, public $CacBase {
public:
    $CCCircleWave();
    ~$CCCircleWave();
    static CCCircleWave* create(float, float, float, bool);
    static CCCircleWave* create(float, float, float, bool, bool);
    void followObject(cocos2d::CCNode*, bool);
    void updatePosition(float);
};


template<class D, void*** V>
class $CCCircleWaveDelegate : public CCCircleWaveDelegate, public $CacBase {
public:
    $CCCircleWaveDelegate();
    ~$CCCircleWaveDelegate();
};


template<class D, void*** V>
class $CCLightFlash : public CCLightFlash, public $CacBase {
public:
    $CCLightFlash();
    ~$CCLightFlash();
    static CCLightFlash* create();
    void playEffect(cocos2d::CCPoint, cocos2d::_ccColor3B, float, float, float, float, float, float, float, float, float, float, float, float, float, float, int, bool, bool, float);
};


template<class D, void*** V>
class $CCMenuItemSpriteExtra : public CCMenuItemSpriteExtra, public $CacBase {
public:
    $CCMenuItemSpriteExtra();
    ~$CCMenuItemSpriteExtra();
    static CCMenuItemSpriteExtra* create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_CallFuncO);
    void setSizeMult(float);
};


template<class D, void*** V>
class $CCMenuItemToggler : public CCMenuItemToggler, public $CacBase {
public:
    $CCMenuItemToggler();
    ~$CCMenuItemToggler();
    static CCMenuItemToggler* create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_CallFuncO);
    void setSizeMult(float);
};


template<class D, void*** V>
class $CCMoveCNode : public CCMoveCNode, public $CacBase {
public:
    $CCMoveCNode();
    ~$CCMoveCNode();
    static CCMoveCNode* create();
    bool init();
};


template<class D, void*** V>
class $CCNodeContainer : public CCNodeContainer, public $CacBase {
public:
    $CCNodeContainer();
    ~$CCNodeContainer();
    static CCNodeContainer* create();
    bool init();
    void visit();
};


template<class D, void*** V>
class $CCSpritePlus : public CCSpritePlus, public $CacBase {
public:
    $CCSpritePlus();
    ~$CCSpritePlus();
    bool initWithSpriteFrameName(char const*);
};


template<class D, void*** V>
class $CCTextInputNode : public CCTextInputNode, public $CacBase {
public:
    $CCTextInputNode();
    ~$CCTextInputNode();
    static CCTextInputNode* create(float, float, char const*, char const*, int, char const*);
    std::string getString();
    void refreshLabel();
    void setAllowedChars(std::string);
    void setLabelNormalColor(cocos2d::_ccColor3B);
    void setLabelPlaceholderColor(cocos2d::_ccColor3B);
    void setLabelPlaceholderScale(float);
    void setMaxLabelScale(float);
    void setMaxLabelWidth(float);
    void setString(std::string);
    void updateLabel(std::string);
    void forceOffset();
    void registerWithTouchDispatcher() override;
    bool init(float, float, char const*, char const*, int, char const*);
    void visit() override;
    bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) override;
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) override;
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) override;
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) override;
    void textChanged() override;
    void onClickTrackNode(bool) override;
    void keyboardWillShow(cocos2d::CCIMEKeyboardNotificationInfo&) override;
    void keyboardWillHide(cocos2d::CCIMEKeyboardNotificationInfo&) override;
    bool onTextFieldInsertText(cocos2d::CCTextFieldTTF*, char const*, int) override;
    bool onTextFieldAttachWithIME(cocos2d::CCTextFieldTTF*) override;
    bool onTextFieldDetachWithIME(cocos2d::CCTextFieldTTF*) override;
};


template<class D, void*** V>
class $CheckpointObject : public CheckpointObject, public $CacBase {
public:
    $CheckpointObject();
    ~$CheckpointObject();
    static CheckpointObject* create();
    void getObject();
};


template<class D, void*** V>
class $CollisionBlockPopup : public CollisionBlockPopup, public $CacBase {
public:
    $CollisionBlockPopup();
    ~$CollisionBlockPopup();
    static CollisionBlockPopup* create(EffectGameObject*, cocos2d::CCArray*);
    void onNextItemID(cocos2d::CCObject*);
};


template<class D, void*** V>
class $CollisionTriggerAction : public CollisionTriggerAction, public $CacBase {
public:
    $CollisionTriggerAction();
    ~$CollisionTriggerAction();
    static CollisionTriggerAction* createFromString(std::string);
};


template<class D, void*** V>
class $ColorAction : public ColorAction, public $CacBase {
public:
    $ColorAction();
    ~$ColorAction();
    void getSaveString();
    void setupFromDict(cocos2d::CCDictionary*);
    void setupFromString(std::string);
};


template<class D, void*** V>
class $ColorActionSprite : public ColorActionSprite, public $CacBase {
public:
    $ColorActionSprite();
    ~$ColorActionSprite();
};


template<class D, void*** V>
class $ColorChannelSprite : public ColorChannelSprite, public $CacBase {
public:
    $ColorChannelSprite();
    ~$ColorChannelSprite();
    void updateBlending(bool);
    void updateCopyLabel(int, bool);
    void updateOpacity(float);
    void updateValues(ColorAction*);
};


template<class D, void*** V>
class $ColorPickerDelegate : public ColorPickerDelegate, public $CacBase {
public:
    $ColorPickerDelegate();
    ~$ColorPickerDelegate();
};


template<class D, void*** V>
class $ColorSelectLiveOverlay : public ColorSelectLiveOverlay, public $CacBase {
public:
    $ColorSelectLiveOverlay();
    ~$ColorSelectLiveOverlay();
};


template<class D, void*** V>
class $ConfigureValuePopup : public ConfigureValuePopup, public $CacBase {
public:
    $ConfigureValuePopup();
    ~$ConfigureValuePopup();
};


template<class D, void*** V>
class $CountTriggerAction : public CountTriggerAction, public $CacBase {
public:
    $CountTriggerAction();
    ~$CountTriggerAction();
    static CountTriggerAction* createFromString(std::string);
};


template<class D, void*** V>
class $CreateMenuItem : public CreateMenuItem, public $CacBase {
public:
    $CreateMenuItem();
    ~$CreateMenuItem();
};


template<class D, void*** V>
class $CreatorLayer : public CreatorLayer, public $CacBase {
public:
    $CreatorLayer();
    ~$CreatorLayer();
    void onMyLevels(cocos2d::CCObject*);
    void onSavedLevels(cocos2d::CCObject*);
};


template<class D, void*** V>
class $CurrencyRewardLayer : public CurrencyRewardLayer, public $CacBase {
public:
    $CurrencyRewardLayer();
    ~$CurrencyRewardLayer();
};


template<class D, void*** V>
class $CustomListView : public CustomListView, public $CacBase {
public:
    $CustomListView();
    ~$CustomListView();
    static CustomListView* create(cocos2d::CCArray*, float, float, int, BoomListType);
};


template<class D, void*** V>
class $CustomizeObjectLayer : public CustomizeObjectLayer, public $CacBase {
public:
    $CustomizeObjectLayer();
    ~$CustomizeObjectLayer();
    void colorSelectClosed(cocos2d::CCNode*);
    static CustomizeObjectLayer* create(GameObject*, cocos2d::CCArray*);
    bool init(GameObject*, cocos2d::CCArray*);
    void textChanged(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
};


template<class D, void*** V>
class $DelayedSpawnNode : public DelayedSpawnNode, public $CacBase {
public:
    $DelayedSpawnNode();
    ~$DelayedSpawnNode();
    static DelayedSpawnNode* create();
};


template<class D, void*** V>
class $DialogLayer : public DialogLayer, public $CacBase {
public:
    $DialogLayer();
    ~$DialogLayer();
    static DialogLayer* create(DialogObject*, int);
};


template<class D, void*** V>
class $DialogObject : public DialogObject, public $CacBase {
public:
    $DialogObject();
    ~$DialogObject();
    static DialogObject* create(std::string, std::string, int, float, bool, cocos2d::_ccColor3B);
};


template<class D, void*** V>
class $DrawGridLayer : public DrawGridLayer, public $CacBase {
public:
    $DrawGridLayer();
    ~$DrawGridLayer();
    void addPlayer2Point(cocos2d::CCPoint, bool);
    void addPlayerPoint(cocos2d::CCPoint);
    void addToSpeedObjects(GameObject*);
    static DrawGridLayer* create(cocos2d::CCNode*, LevelEditorLayer*);
    bool init(cocos2d::CCNode*, LevelEditorLayer*);
    void timeForXPos(float);
    void update(float);
    void updateTimeMarkers();
    void xPosForTime(float);
};


template<class D, void*** V>
class $EditButtonBar : public EditButtonBar, public $CacBase {
public:
    $EditButtonBar();
    ~$EditButtonBar();
    void loadFromItems(cocos2d::CCArray*, int, int, bool);
};


template<class D, void*** V>
class $EditorOptionsLayer : public EditorOptionsLayer, public $CacBase {
public:
    $EditorOptionsLayer();
    ~$EditorOptionsLayer();
    void onButtonsPerRow(cocos2d::CCObject*);
};


template<class D, void*** V>
class $EditorUI : public EditorUI, public $CacBase {
public:
    $EditorUI();
    ~$EditorUI();
    void constrainGameLayerPosition();
    void create(LevelEditorLayer*);
    void deselectAll();
    void onDeselectAll(CCObject*);
    void disableButton(CreateMenuItem*);
    void editButtonUsable();
    void editObject(cocos2d::CCObject*);
    void enableButton(CreateMenuItem*);
    CCMenuItemSpriteExtra* getCreateBtn(int, int);
    void getGroupCenter(cocos2d::CCArray*, bool);
    cocos2d::CCArray* getSelectedObjects();
    void init(LevelEditorLayer*);
    void keyDown(cocos2d::enumKeyCodes) override;
    void moveObject(GameObject*, cocos2d::CCPoint);
    void onDuplicate(cocos2d::CCObject*);
    void pasteObjects(std::string);
    void playtestStopped();
    void redoLastAction(cocos2d::CCObject*);
    void replaceGroupID(GameObject*, int, int);
    void scaleChanged(float);
    void scaleObjects(cocos2d::CCArray*, float, cocos2d::CCPoint);
    void selectObjects(cocos2d::CCArray*, bool);
    void setupCreateMenu();
    void undoLastAction(cocos2d::CCObject*);
    void updateButtons();
    void updateObjectInfoLabel();
    void updateSlider();
    void updateZoom(float);
};


template<class D, void*** V>
class $EndLevelLayer : public EndLevelLayer, public $CacBase {
public:
    $EndLevelLayer();
    ~$EndLevelLayer();
    static EndLevelLayer* create();
};


template<class D, void*** V>
class $FLAlertLayer : public FLAlertLayer, public $CacBase {
public:
    $FLAlertLayer();
    ~$FLAlertLayer();
    void onEnter() override;
    bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) override;
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) override;
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) override;
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) override;
    void registerWithTouchDispatcher() override;
    void keyBackClicked() override;
    void keyDown(cocos2d::enumKeyCodes) override;
    void show() override;
    bool init(FLAlertLayerProtocol*, char const*, std::string, char const*, char const*, float, bool, float) override;
    static FLAlertLayer* create(FLAlertLayerProtocol*, char const*, std::string, char const*, char const*, float);
    static FLAlertLayer* create(FLAlertLayerProtocol*, char const*, std::string, char const*, char const*, float, bool, float);
};


template<class D, void*** V>
class $FLAlertLayerProtocol : public FLAlertLayerProtocol, public $CacBase {
public:
    $FLAlertLayerProtocol();
    ~$FLAlertLayerProtocol();
};


template<class D, void*** V>
class $FMODAudioEngine : public FMODAudioEngine, public $CacBase {
public:
    $FMODAudioEngine();
    ~$FMODAudioEngine();
};


template<class D, void*** V>
class $FollowRewardPage : public FollowRewardPage, public $CacBase {
public:
    $FollowRewardPage();
    ~$FollowRewardPage();
    static FollowRewardPage* create();
};


template<class D, void*** V>
class $GJAccountManager : public GJAccountManager, public $CacBase {
public:
    $GJAccountManager();
    ~$GJAccountManager();
    static GJAccountManager* sharedState();
};


template<class D, void*** V>
class $GJBaseGameLayer : public GJBaseGameLayer, public $CacBase {
public:
    $GJBaseGameLayer();
    ~$GJBaseGameLayer();
    void objectsCollided(int, int) override;
    void createMoveCommand(cocos2d::CCPoint, int, float, int, float, bool, bool, int) override;
    void updateColor(cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*) override;
    void flipGravity(PlayerObject*, bool, bool) override;
    void calculateColorValues(EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*) override;
    void toggleGroupTriggered(int, bool) override;
    void spawnGroup(int) override;
    void addToSection(GameObject*) override;
    void addToGroup(GameObject*, int, bool) override;
    void removeFromGroup(GameObject*, int) override;
    bool init() override;
    void addObjectCounter(LabelGameObject*, int);
    void addToGroups(GameObject*, bool);
    void atlasValue(int);
    void bumpPlayer(PlayerObject*, GameObject*);
    void calculateOpacityValues(EffectGameObject*, EffectGameObject*, float, GJEffectManager*);
    void checkSpawnObjects();
    void collectItem(int, int);
    void collectedObject(EffectGameObject*);
    void createTextLayers();
    void damagingObjectsInRect(cocos2d::CCRect);
    void enableHighCapacityMode();
    void getCapacityString();
    void getGroundHeightForMode(int);
    void getGroup(int);
    void getMoveDeltaForObjects(int, int);
    void getOptimizedGroup(int);
    void getStaticGroup(int);
    void isGroupDisabledForObject(GameObject*);
    void isGroupDisabledForObjectFull(GameObject*, cocos2d::CCArray*);
    void loadUpToPosition(float);
    void objectIntersectsCircle(GameObject*, GameObject*);
    void objectTriggered(EffectGameObject*);
    void optimizeMoveGroups();
    void parentForZLayer(int, bool, int);
    void playerTouchedRing(PlayerObject*, GameObject*);
    void processColorObject(EffectGameObject*, int, cocos2d::CCDictionary*, float, GJEffectManager*);
    void processFollowActions();
    void processMoveActions();
    void processMoveActionsStep(float);
    void processOpacityObject(EffectGameObject*, cocos2d::CCDictionary*, float, GJEffectManager*);
    void processPlayerFollowActions(float);
    void processRotationActions();
    void pushButton(int, bool);
    void rectIntersectsCircle(cocos2d::CCRect, cocos2d::CCPoint, float);
    void refreshCounterLabels();
    void releaseButton(int, bool);
    void removeFromGroups(GameObject*);
    void removeObjectFromSection(GameObject*);
    void reorderObjectSection(GameObject*);
    void resetGroupCounters(bool);
    void resetMoveOptimizedValue();
    void sectionForPos(float);
    void setupLayers();
    void shouldExitHackedLevel();
    void spawnGroupTriggered(int, float, int);
    void staticObjectsInRect(cocos2d::CCRect);
    void testInstantCountTrigger(int, int, int, bool, int);
    void toggleGroup(int, bool);
    void togglePlayerVisibility(bool);
    void triggerMoveCommand(EffectGameObject*);
    void updateCollisionBlocks();
    void updateCounters(int, int);
    void updateDisabledObjectsLastPos(cocos2d::CCArray*);
    void updateLayerCapacity(std::string);
    void updateLegacyLayerCapacity(int, int, int, int);
    void updateOBB2(cocos2d::CCRect);
    void updateQueuedLabels();
};


template<class D, void*** V>
class $GJColorSetupLayer : public GJColorSetupLayer, public $CacBase {
public:
    $GJColorSetupLayer();
    ~$GJColorSetupLayer();
    void updateSpriteColors();
};


template<class D, void*** V>
class $GJDropDownLayer : public GJDropDownLayer, public $CacBase {
public:
    $GJDropDownLayer();
    ~$GJDropDownLayer();
    void customSetup() override;
    void enterLayer() override;
    void exitLayer(cocos2d::CCObject*) override;
    void showLayer(bool) override;
    void hideLayer(bool) override;
    void layerVisible() override;
    void layerHidden() override;
    void enterAnimFinished() override;
    void disableUI() override;
    void enableUI() override;
    void draw() override;
    bool init(char const*, float) override;
    void registerWithTouchDispatcher() override;
    void keyBackClicked() override;
    static GJDropDownLayer* create(char const*);
};


template<class D, void*** V>
class $GJEffectManager : public GJEffectManager, public $CacBase {
public:
    $GJEffectManager();
    ~$GJEffectManager();
    bool init() override;
    void activeColorForIndex(int);
    void activeOpacityForIndex(int);
    void addAllInheritedColorActions(cocos2d::CCArray*);
    void addGroupPulseEffect(PulseEffectAction*);
    void calculateBaseActiveColors();
    void calculateInheritedColor(int, ColorAction*);
    void calculateLightBGColor(cocos2d::_ccColor3B);
    void colorActionChanged(ColorAction*);
    void colorExists(int);
    void colorForEffect(cocos2d::_ccColor3B, cocos2d::_ccHSVValue);
    cocos2d::_ccColor3B colorForGroupID(int, cocos2d::_ccColor3B const&, bool);
    void colorForIndex(int);
    void colorForPulseEffect(cocos2d::_ccColor3B const&, PulseEffectAction*);
    void countChangedForItem(int);
    void countForItem(int);
    static GJEffectManager* create();
    void createFollowCommand(float, float, float, int, int, bool, int);
    void createMoveCommand(cocos2d::CCPoint, int, float, int, float, bool, bool, int);
    void createPlayerFollowCommand(float, float, int, float, float, int, int);
    void createRotateCommand(int, float, int, int, int, float, bool, int);
    void getAllColorActions();
    void getAllColorSprites();
    const cocos2d::_ccColor3B& getColorAction(int);
    const cocos2d::_ccColor3B& getColorSprite(int);
    void getCurrentStateString();
    void getLoadedMoveOffset();
    void getMixedColor(cocos2d::_ccColor3B, cocos2d::_ccColor3B, float);
    uint8_t getOpacityActionForGroup(int);
    void getSaveString();
    void handleObjectCollision(bool, int, int);
    void hasActiveDualTouch();
    void hasBeenTriggered(int);
    void hasPulseEffectForGroupID(int);
    bool isGroupEnabled(int);
    void keyForGroupIDColor(int, cocos2d::_ccColor3B const&, bool);
    void loadState(std::string);
    void objectsCollided(int, int);
    void opacityForIndex(int);
    float opacityModForGroup(int);
    void playerButton(bool, bool);
    void playerDied();
    void postCollisionCheck();
    void preCollisionCheck();
    void prepareMoveActions(float, bool);
    void processColors();
    void processCopyColorPulseActions();
    void processInheritedColors();
    void processPulseActions();
    void registerCollisionTrigger(int, int, int, bool, bool, int);
    void removeAllPulseActions();
    void removeColorAction(int);
    void reset();
    void resetColorCache();
    void resetEffects();
    void resetMoveActions();
    void resetToggledGroups();
    void resetTriggeredIDs();
    void runCountTrigger(int, int, bool, int, bool, int);
    void runDeathTrigger(int, bool, int);
    OpacityEffectAction* runOpacityActionOnGroup(int, float, float, int);
    void runPulseEffect(int, bool, float, float, float, PulseEffectType, cocos2d::_ccColor3B, cocos2d::_ccHSVValue, int, bool, bool, bool, int);
    void runTouchTriggerCommand(int, bool, TouchTriggerType, bool, int);
    void setColorAction(ColorAction*, int);
    void setFollowing(int, int, bool);
    void setupFromString(std::string);
    void shouldBlend(int);
    void spawnGroup(int, float, int);
    void stopActionsForTrigger(EffectGameObject*);
    void stopMoveActionsForGroup(int);
    void storeTriggeredID(int);
    void toggleGroup(int, bool);
    void traverseInheritanceChain(InheritanceNode*);
    void updateActiveOpacityEffects();
    void updateColorAction(ColorAction*);
    void updateColorEffects(float);
    void updateColors(cocos2d::_ccColor3B, cocos2d::_ccColor3B);
    void updateEffects(float);
    void updateOpacityAction(OpacityEffectAction*);
    void updateOpacityEffects(float);
    void updatePulseEffects(float);
    void updateSpawnTriggers(float);
    void wasFollowing(int, int);
    void wouldCreateLoop(InheritanceNode*, int);
};


template<class D, void*** V>
class $GJFollowCommandLayer : public GJFollowCommandLayer, public $CacBase {
public:
    $GJFollowCommandLayer();
    ~$GJFollowCommandLayer();
    static GJFollowCommandLayer* create(EffectGameObject*, cocos2d::CCArray*);
    void onUpdateGroupID(cocos2d::CCObject*);
    void onUpdateGroupID2(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateTargetGroupID();
    void updateTargetGroupID2();
};


template<class D, void*** V>
class $GJGameLevel : public GJGameLevel, public $CacBase {
public:
    $GJGameLevel();
    ~$GJGameLevel();
    static GJGameLevel* create();
    void getAudioFileName();
    void getCoinKey(int);
    void getLengthKey(int);
    void getNormalPercent();
    void levelWasAltered();
    void savePercentage(int, bool, int, int, bool);
};


template<class D, void*** V>
class $GJGroundLayer : public GJGroundLayer, public $CacBase {
public:
    $GJGroundLayer();
    ~$GJGroundLayer();
    static GJGroundLayer* create(int, int);
    void createLine(int);
    void deactivateGround();
    void getGroundY();
    bool init(int, int);
    void loadGroundSprites(int, bool);
    void updateGround01Color(cocos2d::_ccColor3B);
    void updateGround02Color(cocos2d::_ccColor3B);
    void updateGroundPos(cocos2d::CCPoint);
    void updateGroundWidth();
};


template<class D, void*** V>
class $GJListLayer : public GJListLayer, public $CacBase {
public:
    $GJListLayer();
    ~$GJListLayer();
};


template<class D, void*** V>
class $GJMoveCommandLayer : public GJMoveCommandLayer, public $CacBase {
public:
    $GJMoveCommandLayer();
    ~$GJMoveCommandLayer();
    static GJMoveCommandLayer* create(EffectGameObject*, cocos2d::CCArray*);
    bool init(EffectGameObject*, cocos2d::CCArray*);
    void keyBackClicked();
    void onUpdateGroupID(cocos2d::CCObject*);
    void onUpdateGroupID2(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textInputReturn(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void updateEditorLabel();
    void updateMoveTargetElements();
    void updateTargetGroupID();
    void updateTargetGroupID2();
    void updateTextInputLabel();
    void updateTextInputLabel2();
    void updateValueXLabel();
    void updateValueYLabel();
    void valuePopupClosed(ConfigureValuePopup*, float);
};


template<class D, void*** V>
class $GJPFollowCommandLayer : public GJPFollowCommandLayer, public $CacBase {
public:
    $GJPFollowCommandLayer();
    ~$GJPFollowCommandLayer();
    static GJPFollowCommandLayer* create(EffectGameObject*, cocos2d::CCArray*);
    void textChanged(CCTextInputNode*);
    void updateTargetGroupID();
};


template<class D, void*** V>
class $GJRobotSprite : public GJRobotSprite, public $CacBase {
public:
    $GJRobotSprite();
    ~$GJRobotSprite();
    static GJRobotSprite* create();
    void updateColor02(cocos2d::_ccColor3B);
    void updateFrame(int);
};


template<class D, void*** V>
class $GJRotateCommandLayer : public GJRotateCommandLayer, public $CacBase {
public:
    $GJRotateCommandLayer();
    ~$GJRotateCommandLayer();
    static GJRotateCommandLayer* create(EffectGameObject*, cocos2d::CCArray*);
    void onUpdateGroupID(cocos2d::CCObject*);
    void onUpdateGroupID2(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateTargetGroupID();
    void updateTargetGroupID2();
};


template<class D, void*** V>
class $GJSearchObject : public GJSearchObject, public $CacBase {
public:
    $GJSearchObject();
    ~$GJSearchObject();
    static GJSearchObject* create(SearchType);
    static GJSearchObject* create(SearchType, std::string, std::string, std::string, int, bool, bool, bool, int, bool, bool, bool, bool, bool, bool, bool, bool, int, int);
    void getPageObject(int);
};


template<class D, void*** V>
class $GJSpecialColorSelect : public GJSpecialColorSelect, public $CacBase {
public:
    $GJSpecialColorSelect();
    ~$GJSpecialColorSelect();
    void textForColorIdx(int);
};


template<class D, void*** V>
class $GJSpecialColorSelectDelegate : public GJSpecialColorSelectDelegate, public $CacBase {
public:
    $GJSpecialColorSelectDelegate();
    ~$GJSpecialColorSelectDelegate();
};


template<class D, void*** V>
class $GJSpiderSprite : public GJSpiderSprite, public $CacBase {
public:
    $GJSpiderSprite();
    ~$GJSpiderSprite();
    static GJSpiderSprite* create();
};


template<class D, void*** V>
class $GManager : public GManager, public $CacBase {
public:
    $GManager();
    ~$GManager();
    void save();
    void saveData(DS_Dictionary*, std::string);
    void saveGMTo(std::string);
};


template<class D, void*** V>
class $GameLevelManager : public GameLevelManager, public $CacBase {
public:
    $GameLevelManager();
    ~$GameLevelManager();
    GJGameLevel* createNewLevel();
    static GameLevelManager* sharedState();
    void getPageInfo(char const*);
    cocos2d::CCArray* getStoredOnlineLevels(char const*);
    void getTopArtists(int, int);
    void getTopArtistsKey(int);
    void makeTimeStamp(char const*);
};


template<class D, void*** V>
class $GameManager : public GameManager, public $CacBase {
public:
    $GameManager();
    ~$GameManager();
    void accountStatusChanged();
    const cocos2d::_ccColor3B& colorForIdx(int);
    void didExitPlayscene();
    void doQuickSave();
    void fadeInMusic(char const*);
    void getBGTexture(int);
    void getFontFile(int);
    bool getGameVariable(char const*);
    int getIntGameVariable(char const*);
    void getUGV(char const*);
    void loadDeathEffect(int);
    void loadFont(int);
    void reloadAll(bool, bool, bool);
    void reloadAllStep5();
    void reportPercentageForLevel(int, int, bool);
    void setGameVariable(char const*, bool);
    void setIntGameVariable(char const*, int);
    void setUGV(char const*, bool);
    static GameManager* sharedState();
};


template<class D, void*** V>
class $GameObject : public GameObject, public $CacBase {
public:
    $GameObject();
    ~$GameObject();
    void activateObject();
    void activatedByPlayer(GameObject*);
    void addColorSprite();
    void addColorSpriteToParent(bool);
    void addMainSpriteToParent(bool);
    void addToGroup(int);
    void addToTempOffset(float, float);
    void calculateOrientedBox();
    void calculateSpawnXPos();
    void canChangeCustomColor();
    void colorForMode(int, bool);
    void commonSetup();
    void copyGroups(GameObject*);
    static GameObject* createWithFrame(char const*);
    static GameObject* createWithKey(int);
    void customSetup();
    void deactivateObject(bool);
    void destroyObject();
    void determineSlopeDirection();
    void getActiveColorForMode(int, bool);
    void getBallFrame(int);
    void getBoxOffset();
    const cocos2d::_ccColor3B& getColorIndex();
    void getDidUpdateLastPosition();
    int getGroupID(int);
    void getLastPosition();
    void getMainColorMode();
    cocos2d::CCRect* getObjectRect();
    void getObjectRect(float, float);
    void getObjectRect2(float, float);
    void getObjectRectDirty();
    void getObjectTextureRect();
    void getObjectZOrder();
    void getOrientedRectDirty();
    void getRScaleX();
    void getRScaleY();
    std::string getSaveString();
    void getSecondaryColorMode();
    void getSectionIdx();
    void getStartPos();
    void getType();
    void groupWasDisabled();
    void groupWasEnabled();
    void hasBeenActivated();
    void hasBeenActivatedByPlayer(GameObject*);
    void hasSecondaryColor();
    void ignoreEnter();
    void ignoreFade();
    bool initWithTexture(cocos2d::CCTexture2D*);
    void isBasicTrigger();
    void isColorTrigger();
    void isFlipX();
    void isFlipY();
    void isSpawnableTrigger();
    void isSpecialObject();
    static GameObject* objectFromString(std::string, bool);
    void playShineEffect();
    void powerOffObject();
    void powerOnObject();
    void quickUpdatePosition();
    void removeFromGroup(int);
    void removeGlow();
    void resetGroupDisabled();
    void saveActiveColors();
    void selectObject(cocos2d::_ccColor3B);
    void setChildColor(cocos2d::_ccColor3B const&);
    void setDefaultMainColorMode(int);
    void setDidUpdateLastPosition(bool const&);
    void setGlowColor(cocos2d::_ccColor3B const&);
    void setGlowOpacity(unsigned char);
    void setLastPosition(cocos2d::CCPoint const&);
    void setMainColorMode(int);
    void setObjectColor(cocos2d::_ccColor3B const&);
    void setObjectRectDirty(bool);
    void setOrientedRectDirty(bool);
    void setPosition(cocos2d::CCPoint const&);
    void setRScale(float);
    void setRScaleX(float);
    void setRScaleY(float);
    void setSectionIdx(int const&);
    void setStartPos(cocos2d::CCPoint);
    void setType(GameObjectType);
    void setupCoinArt();
    void setupCustomSprites();
    void slopeFloorTop();
    void slopeWallLeft();
    void spawnXPosition();
    void triggerActivated(float);
    void triggerObject(GJBaseGameLayer*);
    void updateCustomScale(float);
    void updateMainColor();
    void updateOrientedBox();
    void updateSecondaryColor();
    void updateStartPos();
    void updateStartValues();
    void updateState();
    void updateSyncedAnimation(float);
};


template<class D, void*** V>
class $GameObjectCopy : public GameObjectCopy, public $CacBase {
public:
    $GameObjectCopy();
    ~$GameObjectCopy();
    static GameObjectCopy* create(GameObject*);
    void resetObject();
};


template<class D, void*** V>
class $GameSoundManager : public GameSoundManager, public $CacBase {
public:
    $GameSoundManager();
    ~$GameSoundManager();
    void disableMetering();
    void enableMetering();
    void getMeteringValue();
    void playBackgroundMusic(std::string, bool, bool);
    void playEffect(std::string, float, float, float);
    void sharedManager();
    void stopBackgroundMusic();
};


template<class D, void*** V>
class $GameStatsManager : public GameStatsManager, public $CacBase {
public:
    $GameStatsManager();
    ~$GameStatsManager();
    void awardCurrencyForLevel(GJGameLevel*);
    void awardDiamondsForLevel(GJGameLevel*);
    void awardSecretKey();
    void getSecretCoinKey(char const*);
    void getStat(char const*);
    void hasPendingUserCoin(char const*);
    void hasSecretCoin(char const*);
    void hasUserCoin(char const*);
    void incrementStat(char const*);
    void incrementStat(char const*, int);
    void sharedState();
    void storePendingUserCoin(char const*);
    void storeSecretCoin(char const*);
    void storeUserCoin(char const*);
};


template<class D, void*** V>
class $GameToolbox : public GameToolbox, public $CacBase {
public:
    $GameToolbox();
    ~$GameToolbox();
    static void createToggleButton(std::string, cocos2d::SEL_CallFuncO, bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCNode*, cocos2d::CCNode*, float, float, float, cocos2d::CCPoint, char const*, bool, int, cocos2d::CCArray*);
    static void getRelativeOffset(GameObject*, cocos2d::CCPoint);
    static void multipliedColorValue(cocos2d::_ccColor3B, cocos2d::_ccColor3B, float);
    static void stringSetupToDict(std::string, char const*);
    static void stringSetupToMap(std::string, char const*);
    static void transformColor(cocos2d::_ccColor3B const&, cocos2d::_ccHSVValue);
    static void transformColor(cocos2d::_ccColor3B const&, float, float, float);
};


template<class D, void*** V>
class $GravityEffectSprite : public GravityEffectSprite, public $CacBase {
public:
    $GravityEffectSprite();
    ~$GravityEffectSprite();
    static GravityEffectSprite* create();
    bool init();
    void updateSpritesColor(cocos2d::_ccColor3B);
};


template<class D, void*** V>
class $GroupCommandObject : public GroupCommandObject, public $CacBase {
public:
    $GroupCommandObject();
    ~$GroupCommandObject();
    static GroupCommandObject* create();
    static GroupCommandObject* createFromString(std::string);
    void easeToText(int);
    void getEasedAction(cocos2d::CCActionInterval*, int, float);
    void runMoveCommand(cocos2d::CCPoint, float, int, float, bool, bool);
    void runRotateCommand(float, float, int, float, bool);
};


template<class D, void*** V>
class $HardStreak : public HardStreak, public $CacBase {
public:
    $HardStreak();
    ~$HardStreak();
    void addPoint(cocos2d::CCPoint);
    void reset();
    void resumeStroke();
    void stopStroke();
};


template<class D, void*** V>
class $InfoLayer : public InfoLayer, public $CacBase {
public:
    $InfoLayer();
    ~$InfoLayer();
    void loadPage(int, bool);
    void onRefreshComments(cocos2d::CCObject*);
};


template<class D, void*** V>
class $InheritanceNode : public InheritanceNode, public $CacBase {
public:
    $InheritanceNode();
    ~$InheritanceNode();
};


template<class D, void*** V>
class $EffectGameObject : public EffectGameObject, public $CacBase {
public:
    $EffectGameObject();
    ~$EffectGameObject();
    static EffectGameObject* create(char const*);
    void getTargetColorIndex();
    void triggerObject(GJBaseGameLayer*);
};


template<class D, void*** V>
class $EndPortalObject : public EndPortalObject, public $CacBase {
public:
    $EndPortalObject();
    ~$EndPortalObject();
    static EndPortalObject* create();
    void updateColors(cocos2d::_ccColor3B);
};


template<class D, void*** V>
class $LabelGameObject : public LabelGameObject, public $CacBase {
public:
    $LabelGameObject();
    ~$LabelGameObject();
    bool init();
    void setObjectColor(cocos2d::_ccColor3B const&);
};


template<class D, void*** V>
class $LevelBrowserLayer : public LevelBrowserLayer, public $CacBase {
public:
    $LevelBrowserLayer();
    ~$LevelBrowserLayer();
    void loadPage(GJSearchObject*);
    static cocos2d::CCScene* scene(GJSearchObject*);
    void setIDPopupClosed(SetIDPopup*, int);
};


template<class D, void*** V>
class $LevelEditorLayer : public LevelEditorLayer, public $CacBase {
public:
    $LevelEditorLayer();
    ~$LevelEditorLayer();
    void activateTriggerEffect(EffectGameObject*, float, float, float);
    GameObject* addObjectFromString(std::string);
    void addSpecial(GameObject*);
    void addToGroup(GameObject*, int, bool);
    void addToRedoList(UndoObject*);
    void addToUndoList(UndoObject*, bool);
    void animateInDualGround(GameObject*, float, bool);
    void calculateColorValues(EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*) override;
    void checkCollisions(PlayerObject*, float);
    static LevelEditorLayer* create(GJGameLevel*);
    void createBackground();
    void createGroundLayer();
    GameObject* createObject(int, cocos2d::CCPoint, bool);
    void createObjectsFromSetup(std::string);
    void createObjectsFromString(std::string, bool);
    void draw();
    void flipGravity(PlayerObject*, bool, bool);
    void getLastObjectX();
    void getLevelString();
    void getNextColorChannel();
    void getNextFreeBlockID(cocos2d::CCArray*);
    int getNextFreeGroupID(cocos2d::CCArray*);
    void getNextFreeItemID(cocos2d::CCArray*);
    void getObjectRect(GameObject*, bool);
    void getRelativeOffset(GameObject*);
    void handleAction(bool, cocos2d::CCArray*);
    bool init(GJGameLevel*);
    void levelSettingsUpdated();
    void objectAtPosition(cocos2d::CCPoint);
    void objectMoved(GameObject*);
    void objectsInRect(cocos2d::CCRect, bool);
    void onPlaytest();
    void onStopPlaytest();
    void playMusic();
    void recreateGroups();
    void redoLastAction();
    void removeAllObjects();
    void removeAllObjectsOfType(int);
    void removeFromGroup(GameObject*, int);
    void removeObject(GameObject*, bool);
    void removeSpecial(GameObject*);
    void resetMovingObjects();
    void resetObjectVector();
    void resetToggledGroups();
    void resetToggledGroupsAndObjects();
    void resetUnusedColorChannels();
    void rotationForSlopeNearObject(GameObject*);
    void runColorEffect(EffectGameObject*, int, float, float, bool);
    void scene(GJGameLevel*);
    void setupLevelStart(LevelSettingsObject*);
    void sortStickyGroups();
    void stopTriggersInGroup(int, float);
    void timeForXPos(float);
    void toggleDualMode(GameObject*, bool, PlayerObject*, bool);
    void toggleGroupPreview(int, bool);
    void transferDefaultColors(GJEffectManager*, GJEffectManager*);
    void undoLastAction();
    void update(float);
    void updateBGAndGColors();
    void updateBlendValues();
    void updateColor(cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*);
    void updateDualGround(PlayerObject*, int, bool);
    void updateEditorMode();
    void updateGameObjectsNew();
    void updateGround(float);
    void updateGroundWidth();
    void updateOptions();
    void updateToggledGroups();
    void updateVisibility(float);
    void xPosForTime(float);
};


template<class D, void*** V>
class $LevelInfoLayer : public LevelInfoLayer, public $CacBase {
public:
    $LevelInfoLayer();
    ~$LevelInfoLayer();
};


template<class D, void*** V>
class $LevelSettingsLayer : public LevelSettingsLayer, public $CacBase {
public:
    $LevelSettingsLayer();
    ~$LevelSettingsLayer();
    static LevelSettingsLayer* create(LevelSettingsObject*, LevelEditorLayer*);
};


template<class D, void*** V>
class $LevelSettingsObject : public LevelSettingsObject, public $CacBase {
public:
    $LevelSettingsObject();
    ~$LevelSettingsObject();
    static LevelSettingsObject* create();
    bool init();
    void objectFromDict(cocos2d::CCDictionary*);
    static LevelSettingsObject* objectFromString(std::string);
    void setupColorsFromLegacyMode(cocos2d::CCDictionary*);
};


template<class D, void*** V>
class $LevelTools : public LevelTools, public $CacBase {
public:
    $LevelTools();
    ~$LevelTools();
    void getAudioString(int);
    void verifyLevelIntegrity(std::string, int);
    void xPosForTime(float, cocos2d::CCArray*, int);
};


template<class D, void*** V>
class $LoadingLayer : public LoadingLayer, public $CacBase {
public:
    $LoadingLayer();
    ~$LoadingLayer();
    void loadAssets();
};


template<class D, void*** V>
class $LocalLevelManager : public LocalLevelManager, public $CacBase {
public:
    $LocalLevelManager();
    ~$LocalLevelManager();
    static LocalLevelManager* sharedState();
};


template<class D, void*** V>
class $MenuGameLayer : public MenuGameLayer, public $CacBase {
public:
    $MenuGameLayer();
    ~$MenuGameLayer();
    void resetPlayer();
    void update(float);
};


template<class D, void*** V>
class $MenuLayer : public MenuLayer, public $CacBase {
public:
    $MenuLayer();
    ~$MenuLayer();
    void keyBackClicked() override;
    void onMoreGames(cocos2d::CCObject*);
    void onQuit(cocos2d::CCObject*);
};


template<class D, void*** V>
class $MoreVideoOptionsLayer : public MoreVideoOptionsLayer, public $CacBase {
public:
    $MoreVideoOptionsLayer();
    ~$MoreVideoOptionsLayer();
    static MoreVideoOptionsLayer* create();
    bool init();
};


template<class D, void*** V>
class $MusicDownloadManager : public MusicDownloadManager, public $CacBase {
public:
    $MusicDownloadManager();
    ~$MusicDownloadManager();
    void incrementPriorityForSong(int);
    static MusicDownloadManager* sharedState();
};


template<class D, void*** V>
class $OBB2D : public OBB2D, public $CacBase {
public:
    $OBB2D();
    ~$OBB2D();
    void calculateWithCenter(cocos2d::CCPoint, float, float, float);
    static OBB2D* create(cocos2d::CCPoint, float, float, float);
    void getBoundingRect();
    void overlaps(OBB2D*);
    void overlaps1Way(OBB2D*);
};


template<class D, void*** V>
class $ObjectToolbox : public ObjectToolbox, public $CacBase {
public:
    $ObjectToolbox();
    ~$ObjectToolbox();
    bool init();
    char const* intKeyToFrame(int);
    static ObjectToolbox* sharedState();
};


template<class D, void*** V>
class $OpacityEffectAction : public OpacityEffectAction, public $CacBase {
public:
    $OpacityEffectAction();
    ~$OpacityEffectAction();
    static OpacityEffectAction* create(float, float, float, int);
    static OpacityEffectAction* createFromString(std::string);
    bool init(float, float, float, int);
    void step(float);
};


template<class D, void*** V>
class $EditorPauseLayer : public EditorPauseLayer, public $CacBase {
public:
    $EditorPauseLayer();
    ~$EditorPauseLayer();
    static EditorPauseLayer* create(LevelEditorLayer*);
    void saveLevel();
};


template<class D, void*** V>
class $PauseLayer : public PauseLayer, public $CacBase {
public:
    $PauseLayer();
    ~$PauseLayer();
    static PauseLayer* create(bool);
    void onEdit(cocos2d::CCObject*);
};


template<class D, void*** V>
class $PlatformToolbox : public PlatformToolbox, public $CacBase {
public:
    $PlatformToolbox();
    ~$PlatformToolbox();
    void hideCursor();
    void showCursor();
};


template<class D, void*** V>
class $PlayLayer : public PlayLayer, public $CacBase {
public:
    $PlayLayer();
    ~$PlayLayer();
    void addCircle(CCCircleWave*);
    void addObject(GameObject*);
    void addToGroupOld(GameObject*);
    void addToSpeedObjects(GameObject*);
    void animateInDualGround(GameObject*, float, bool);
    void animateInGround(bool);
    void animateOutGround(bool);
    void animateOutGroundFinished();
    void applyEnterEffect(GameObject*);
    void calculateColorValues(EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*) override;
    void cameraMoveX(float, float, float);
    void cameraMoveY(float, float, float);
    void checkCollisions(PlayerObject*, float);
    void circleWaveWillBeRemoved(CCCircleWave*);
    void claimParticle(std::string);
    void clearPickedUpItems();
    void colorObject(int, cocos2d::_ccColor3B);
    void commitJumps();
    static PlayLayer* create(GJGameLevel*);
    void createCheckpoint();
    void createObjectsFromSetup(std::string);
    void createParticle(int, char const*, int, cocos2d::tCCPositionType);
    void currencyWillExit(CurrencyRewardLayer*);
    void delayedResetLevel();
    void destroyPlayer(PlayerObject*, GameObject*);
    void dialogClosed(DialogLayer*);
    void draw() override;
    void enterDualMode(GameObject*, bool);
    void exitAirMode();
    void exitBirdMode(PlayerObject*);
    void exitDartMode(PlayerObject*);
    void exitFlyMode(PlayerObject*);
    void exitRobotMode(PlayerObject*);
    void exitRollMode(PlayerObject*);
    void exitSpiderMode(PlayerObject*);
    void flipFinished();
    void flipGravity(PlayerObject*, bool, bool) override;
    void flipObjects();
    void fullReset();
    void getLastCheckpoint();
    void getMaxPortalY();
    void getMinPortalY();
    void getObjectsState();
    void getOtherPlayer(PlayerObject*);
    void getParticleKey(int, char const*, int, cocos2d::tCCPositionType);
    void getParticleKey2(std::string);
    void getRelativeMod(cocos2d::CCPoint, float, float, float);
    void getTempMilliTime();
    void gravityEffectFinished();
    void hasItem(int);
    void hasUniqueCoin(GameObject*);
    void incrementJumps();
    bool init(GJGameLevel*);
    void isFlipping();
    void levelComplete();
    void lightningFlash(cocos2d::CCPoint, cocos2d::CCPoint, cocos2d::_ccColor3B, float, float, int, bool, float);
    void lightningFlash(cocos2d::CCPoint, cocos2d::_ccColor3B);
    void loadDefaultColors();
    void loadFromCheckpoint(CheckpointObject*);
    void loadLastCheckpoint();
    void loadSavedObjectsState(std::string);
    void markCheckpoint();
    void moveCameraToPos(cocos2d::CCPoint);
    void onEnterTransitionDidFinish() override;
    void onExit() override;
    void onQuit();
    void optimizeColorGroups();
    void optimizeOpacityGroups();
    void optimizeSaveRequiredGroups();
    void pauseGame(bool);
    void pickupItem(GameObject*);
    void playAnimationCommand(int, int);
    void playEndAnimationToPos(cocos2d::CCPoint);
    void playExitDualEffect(PlayerObject*);
    void playFlashEffect(float, int, float);
    void playGravityEffect(bool);
    void playSpeedParticle(float);
    void playerWillSwitchMode(PlayerObject*, GameObject*);
    void prepareSpawnObjects();
    void processItems();
    void processLoadedMoveActions();
    void recordAction(bool, PlayerObject*);
    void registerActiveObject(GameObject*);
    void registerStateObject(GameObject*);
    void removeAllObjects();
    void removeFromGroupOld(GameObject*);
    void removeLastCheckpoint();
    void removePlayer2();
    void resetLevel();
    void resume();
    void resumeAndRestart();
    void saveRecordAction(bool, PlayerObject*);
    void scene(GJGameLevel*);
    void setupLevelStart(LevelSettingsObject*);
    void setupReplay(std::string);
    void shakeCamera(float, float, float);
    void shouldBlend(int);
    void showCompleteEffect();
    void showCompleteText();
    void showEndLayer();
    void showHint();
    void showNewBest(bool, int, int, bool, bool, bool);
    void showRetryLayer();
    void showTwoPlayerGuide();
    void sortGroups();
    void spawnCircle();
    void spawnFirework();
    void spawnParticle(char const*, int, cocos2d::tCCPositionType, cocos2d::CCPoint);
    void spawnPlayer2();
    void startGame();
    void startMusic();
    void startRecording();
    void startRecordingDelayed();
    void stopCameraShake();
    void stopRecording();
    void storeCheckpoint(CheckpointObject*);
    void switchToFlyMode(PlayerObject*, GameObject*, bool, int);
    void switchToRobotMode(PlayerObject*, GameObject*, bool);
    void switchToRollMode(PlayerObject*, GameObject*, bool);
    void switchToSpiderMode(PlayerObject*, GameObject*, bool);
    void timeForXPos(float);
    void timeForXPos2(float, bool);
    void toggleBGEffectVisibility(bool);
    void toggleDualMode(GameObject*, bool, PlayerObject*, bool);
    void toggleFlipped(bool, bool);
    void toggleGhostEffect(int);
    void toggleGlitter(bool);
    void togglePracticeMode(bool);
    void toggleProgressbar();
    void tryStartRecord();
    void unclaimParticle(char const*, cocos2d::CCParticleSystemQuad*);
    void unregisterActiveObject(GameObject*);
    void unregisterStateObject(GameObject*);
    void update(float) override;
    void updateAttempts();
    void updateCamera(float);
    void updateColor(cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*) override;
    void updateDualGround(PlayerObject*, int, bool);
    void updateEffectPositions();
    void updateLevelColors();
    void updateMoveObjectsLastPosition();
    void updateProgressbar();
    void updateReplay(float);
    void updateTimeMod(float, bool);
    void updateTweenAction(float, char const*) override;
    void updateVisibility();
    void vfDChk();
    void visit() override;
    void visitWithColorFlash();
    void willSwitchToMode(int, PlayerObject*);
    void xPosForTime(float);
};


template<class D, void*** V>
class $PlayerCheckpoint : public PlayerCheckpoint, public $CacBase {
public:
    $PlayerCheckpoint();
    ~$PlayerCheckpoint();
    static PlayerCheckpoint* create();
};


template<class D, void*** V>
class $PlayerObject : public PlayerObject, public $CacBase {
public:
    $PlayerObject();
    ~$PlayerObject();
    void activateStreak();
    void addAllParticles();
    void addToTouchedRings(GameObject*);
    void animationFinished(char const*) override;
    void boostPlayer(float);
    void bumpPlayer(float, int);
    void buttonDown(PlayerButton);
    void checkSnapJumpToObject(GameObject*);
    void collidedWithObject(float, GameObject*);
    void collidedWithObject(float, GameObject*, cocos2d::CCRect);
    void collidedWithSlope(float, GameObject*, bool);
    void convertToClosestRotation(float);
    void copyAttributes(PlayerObject*);
    static PlayerObject* create(int, int, cocos2d::CCLayer*);
    void deactivateParticle();
    void deactivateStreak(bool);
    void fadeOutStreak2(float);
    void flashPlayer(float, float, cocos2d::_ccColor3B, cocos2d::_ccColor3B);
    void flipGravity(bool, bool);
    void flipMod();
    void getActiveMode();
    void getModifiedSlopeYVel();
    void getOldPosition(float);
    void getOrientedBox() override;
    void getRealPosition() override;
    void getSecondColor();
    void gravityDown();
    void gravityUp();
    void hardFlipGravity();
    void hitGround(bool);
    void incrementJumps();
    bool init(int, int, cocos2d::CCLayer*);
    void isBoostValid(float);
    void isFlying();
    void isSafeFlip(float);
    void isSafeMode(float);
    void isSafeSpiderFlip(float);
    void levelFlipFinished();
    void levelFlipping();
    void levelWillFlip();
    void loadFromCheckpoint(PlayerCheckpoint*);
    void lockPlayer();
    void logValues();
    void modeDidChange();
    void placeStreakPoint();
    void playBurstEffect();
    void playDeathEffect();
    void playDynamicSpiderRun();
    void playerDestroyed(bool);
    void playerIsFalling();
    void playerTeleported();
    void playingEndEffect();
    void postCollision(float);
    void preCollision();
    void preSlopeCollision(float, GameObject*);
    void propellPlayer(float);
    void pushButton(PlayerButton);
    void pushDown();
    void pushPlayer(float);
    void releaseButton(PlayerButton);
    void removeAllParticles();
    void removePendingCheckpoint();
    void resetAllParticles();
    void resetCollisionLog();
    void resetObject() override;
    void resetPlayerIcon();
    void resetStateVariables();
    void resetStreak();
    void ringJump(GameObject*);
    void runBallRotation(float);
    void runBallRotation2();
    void runNormalRotation();
    void runRotateAction(bool);
    void saveToCheckpoint(PlayerCheckpoint*);
    void setColor(cocos2d::_ccColor3B const&) override;
    void setFlipX(bool) override;
    void setFlipY(bool) override;
    void setOpacity(unsigned char) override;
    void setPosition(cocos2d::CCPoint const&) override;
    void setRotation(float) override;
    void setScale(float) override;
    void setScaleX(float) override;
    void setScaleY(float) override;
    void setSecondColor(cocos2d::_ccColor3B const&);
    void setVisible(bool) override;
    void setupStreak();
    void spawnCircle();
    void spawnCircle2();
    void spawnDualCircle();
    void spawnFromPlayer(PlayerObject*);
    void spawnPortalCircle(cocos2d::_ccColor3B, float);
    void spawnScaleCircle();
    void specialGroundHit();
    void speedDown();
    void speedUp();
    void spiderTestJump(bool);
    void startDashing(GameObject*);
    void stopBurstEffect();
    void stopDashing();
    void stopRotation(bool);
    void storeCollision(bool, int);
    void switchedToMode(GameObjectType);
    void testForMoving(float, GameObject*);
    void toggleBirdMode(bool);
    void toggleDartMode(bool);
    void toggleFlyMode(bool);
    void toggleGhostEffect(GhostType);
    void togglePlayerScale(bool);
    void toggleRobotMode(bool);
    void toggleRollMode(bool);
    void toggleSpiderMode(bool);
    void toggleVisibility(bool);
    void touchedObject(GameObject*);
    void tryPlaceCheckpoint();
    void update(float) override;
    void updateCheckpointMode(bool);
    void updateCheckpointTest();
    void updateCollide(bool, int);
    void updateCollideBottom(float, int);
    void updateCollideTop(float, int);
    void updateDashAnimation();
    void updateDashArt();
    void updateGlowColor();
    void updateJump(float);
    void updateJumpVariables();
    void updatePlayerBirdFrame(int);
    void updatePlayerDartFrame(int);
    void updatePlayerFrame(int);
    void updatePlayerGlow();
    void updatePlayerRobotFrame(int);
    void updatePlayerRollFrame(int);
    void updatePlayerScale();
    void updatePlayerShipFrame(int);
    void updatePlayerSpiderFrame(int);
    void updatePlayerSpriteExtra(std::string);
    void updateRobotAnimationSpeed();
    void updateRotation(float);
    void updateRotation(float, float);
    void updateShipRotation(float);
    void updateShipSpriteExtra(std::string);
    void updateSlopeRotation(float);
    void updateSlopeYVelocity(float);
    void updateSpecial(float);
    void updateStateVariables();
    void updateTimeMod(float);
    void usingWallLimitedMode();
    void yStartDown();
    void yStartUp();
};


template<class D, void*** V>
class $PulseEffectAction : public PulseEffectAction, public $CacBase {
public:
    $PulseEffectAction();
    ~$PulseEffectAction();
    static PulseEffectAction* createFromString(std::string);
    void getSaveString();
};


template<class D, void*** V>
class $RetryLevelLayer : public RetryLevelLayer, public $CacBase {
public:
    $RetryLevelLayer();
    ~$RetryLevelLayer();
    static RetryLevelLayer* create();
};


template<class D, void*** V>
class $SetGroupIDLayer : public SetGroupIDLayer, public $CacBase {
public:
    $SetGroupIDLayer();
    ~$SetGroupIDLayer();
    void onNextGroupID1(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateGroupIDLabel();
};


template<class D, void*** V>
class $SetIDLayer : public SetIDLayer, public $CacBase {
public:
    $SetIDLayer();
    ~$SetIDLayer();
    static SetIDLayer* create(GameObject*);
};


template<class D, void*** V>
class $SetIDPopup : public SetIDPopup, public $CacBase {
public:
    $SetIDPopup();
    ~$SetIDPopup();
};


template<class D, void*** V>
class $SetItemIDLayer : public SetItemIDLayer, public $CacBase {
public:
    $SetItemIDLayer();
    ~$SetItemIDLayer();
    static SetItemIDLayer* create(EffectGameObject*, cocos2d::CCArray*);
};


template<class D, void*** V>
class $SetTargetIDLayer : public SetTargetIDLayer, public $CacBase {
public:
    $SetTargetIDLayer();
    ~$SetTargetIDLayer();
    static SetTargetIDLayer* create(EffectGameObject*, cocos2d::CCArray*, std::string);
    void onTargetIDArrow(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateTargetID();
};


template<class D, void*** V>
class $SetupAnimationPopup : public SetupAnimationPopup, public $CacBase {
public:
    $SetupAnimationPopup();
    ~$SetupAnimationPopup();
    static SetupAnimationPopup* create(EffectGameObject*, cocos2d::CCArray*);
    void onTargetIDArrow(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateTargetID();
};


template<class D, void*** V>
class $SetupCollisionTriggerPopup : public SetupCollisionTriggerPopup, public $CacBase {
public:
    $SetupCollisionTriggerPopup();
    ~$SetupCollisionTriggerPopup();
    static SetupCollisionTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*);
    void onTargetIDArrow(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateTargetID();
};


template<class D, void*** V>
class $SetupCountTriggerPopup : public SetupCountTriggerPopup, public $CacBase {
public:
    $SetupCountTriggerPopup();
    ~$SetupCountTriggerPopup();
    static SetupCountTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*);
    void onTargetIDArrow(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateTargetID();
};


template<class D, void*** V>
class $SetupInstantCountPopup : public SetupInstantCountPopup, public $CacBase {
public:
    $SetupInstantCountPopup();
    ~$SetupInstantCountPopup();
    static SetupInstantCountPopup* create(EffectGameObject*, cocos2d::CCArray*);
    void onTargetIDArrow(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateTargetID();
};


template<class D, void*** V>
class $SetupInteractObjectPopup : public SetupInteractObjectPopup, public $CacBase {
public:
    $SetupInteractObjectPopup();
    ~$SetupInteractObjectPopup();
    static SetupInteractObjectPopup* create(EffectGameObject*, cocos2d::CCArray*);
    void onTargetIDArrow(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateTargetID();
};


template<class D, void*** V>
class $SetupObjectTogglePopup : public SetupObjectTogglePopup, public $CacBase {
public:
    $SetupObjectTogglePopup();
    ~$SetupObjectTogglePopup();
    static SetupObjectTogglePopup* create(EffectGameObject*, cocos2d::CCArray*);
    bool init(EffectGameObject*, cocos2d::CCArray*);
    void onTargetIDArrow(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateTargetID();
};


template<class D, void*** V>
class $SetupOpacityPopup : public SetupOpacityPopup, public $CacBase {
public:
    $SetupOpacityPopup();
    ~$SetupOpacityPopup();
    static SetupOpacityPopup* create(EffectGameObject*, cocos2d::CCArray*);
    void onTargetIDArrow(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateTargetID();
};


template<class D, void*** V>
class $SetupPickupTriggerPopup : public SetupPickupTriggerPopup, public $CacBase {
public:
    $SetupPickupTriggerPopup();
    ~$SetupPickupTriggerPopup();
    static SetupPickupTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*);
    void onItemIDArrow(cocos2d::CCObject*);
    void onNextItemID(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateItemID();
};


template<class D, void*** V>
class $SetupShakePopup : public SetupShakePopup, public $CacBase {
public:
    $SetupShakePopup();
    ~$SetupShakePopup();
    static SetupShakePopup* create(EffectGameObject*, cocos2d::CCArray*);
};


template<class D, void*** V>
class $SetupSpawnPopup : public SetupSpawnPopup, public $CacBase {
public:
    $SetupSpawnPopup();
    ~$SetupSpawnPopup();
    static SetupSpawnPopup* create(EffectGameObject*, cocos2d::CCArray*);
    void createToggleButton(std::string, cocos2d::SEL_CallFuncO, bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*);
    void onTargetIDArrow(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateTargetID();
};


template<class D, void*** V>
class $SetupTouchTogglePopup : public SetupTouchTogglePopup, public $CacBase {
public:
    $SetupTouchTogglePopup();
    ~$SetupTouchTogglePopup();
    static SetupTouchTogglePopup* create(EffectGameObject*, cocos2d::CCArray*);
    void onTargetIDArrow(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*);
    void updateTargetID();
};


template<class D, void*** V>
class $SimplePlayer : public SimplePlayer, public $CacBase {
public:
    $SimplePlayer();
    ~$SimplePlayer();
    static SimplePlayer* create(int);
    void setSecondColor(cocos2d::_ccColor3B const&);
    void updateColors();
    void updatePlayerFrame(int, IconType);
};


template<class D, void*** V>
class $Slider : public Slider, public $CacBase {
public:
    $Slider();
    ~$Slider();
    static Slider* create(cocos2d::CCNode*, cocos2d::SEL_CallFuncO, char const*, char const*, char const*, char const*, float);
    static Slider* create(cocos2d::CCNode*, cocos2d::SEL_CallFuncO, float);
    void getValue();
    void setBarVisibility(bool);
    void setValue(float);
};


template<class D, void*** V>
class $SliderThumb : public SliderThumb, public $CacBase {
public:
    $SliderThumb();
    ~$SliderThumb();
    void getValue();
};


template<class D, void*** V>
class $SpawnTriggerAction : public SpawnTriggerAction, public $CacBase {
public:
    $SpawnTriggerAction();
    ~$SpawnTriggerAction();
    static SpawnTriggerAction* createFromString(std::string);
};


template<class D, void*** V>
class $SpeedObject : public SpeedObject, public $CacBase {
public:
    $SpeedObject();
    ~$SpeedObject();
    static SpeedObject* create(GameObject*, int, float);
    bool init(GameObject*, int, float);
};


template<class D, void*** V>
class $TeleportPortalObject : public TeleportPortalObject, public $CacBase {
public:
    $TeleportPortalObject();
    ~$TeleportPortalObject();
    static TeleportPortalObject* create(char const*);
    void getTeleportXOff(cocos2d::CCNode*);
};


template<class D, void*** V>
class $TextArea : public TextArea, public $CacBase {
public:
    $TextArea();
    ~$TextArea();
    static TextArea* create(std::string, char const*, float, float, cocos2d::CCPoint, float, bool);
};


template<class D, void*** V>
class $TextInputDelegate : public TextInputDelegate, public $CacBase {
public:
    $TextInputDelegate();
    ~$TextInputDelegate();
};


template<class D, void*** V>
class $ToggleTriggerAction : public ToggleTriggerAction, public $CacBase {
public:
    $ToggleTriggerAction();
    ~$ToggleTriggerAction();
    static ToggleTriggerAction* createFromString(std::string);
};


template<class D, void*** V>
class $GJCommentListLayer : public GJCommentListLayer, public $CacBase {
public:
    $GJCommentListLayer();
    ~$GJCommentListLayer();
    static GJCommentListLayer* create(BoomListView*, char const*, cocos2d::_ccColor4B, float, float, bool);
};


template<class D, void*** V>
class $TopArtistsLayer : public TopArtistsLayer, public $CacBase {
public:
    $TopArtistsLayer();
    ~$TopArtistsLayer();
    static TopArtistsLayer* create();
    void setupLeaderboard(cocos2d::CCArray*);
    bool init() override;
    void loadPage(int);
    void setupPageInfo(std::string, char const*);
};


template<class D, void*** V>
class $TouchToggleAction : public TouchToggleAction, public $CacBase {
public:
    $TouchToggleAction();
    ~$TouchToggleAction();
    static TouchToggleAction* createFromString(std::string);
};


template<class D, void*** V>
class $UILayer : public UILayer, public $CacBase {
public:
    $UILayer();
    ~$UILayer();
    static UILayer* create();
    void disableMenu();
    void enableMenu();
    void pCommand(cocos2d::CCNode*);
    void toggleCheckpointsMenu(bool);
};


template<class D, void*** V>
class $UndoCommand : public UndoCommand, public $CacBase {
public:
    $UndoCommand();
    ~$UndoCommand();
};


template<class D, void*** V>
class $UndoObject : public UndoObject, public $CacBase {
public:
    $UndoObject();
    ~$UndoObject();
    static UndoObject* create(GameObject*, UndoCommand);
    static UndoObject* createWithArray(cocos2d::CCArray*, UndoCommand);
};


template<class D, void*** V>
class $ColorSelectPopup : public ColorSelectPopup, public $CacBase {
public:
    $ColorSelectPopup();
    ~$ColorSelectPopup();
    void colorValueChanged(cocos2d::_ccColor3B);
    static ColorSelectPopup* create(EffectGameObject*, cocos2d::CCArray*);
    bool init(EffectGameObject*, cocos2d::CCArray*, ColorAction*) override;
    void onDefault(cocos2d::CCObject*);
    void onMultiTrigger(cocos2d::CCObject*);
    void onPlayerColor1(cocos2d::CCObject*);
    void onPlayerColor2(cocos2d::CCObject*);
    void onSpawnedByTrigger(cocos2d::CCObject*);
    void onToggleHSVMode(cocos2d::CCObject*);
    void onTouchTriggered(cocos2d::CCObject*);
    void show() override;
    void sliderChanged(cocos2d::CCObject*);
    void updateCopyColor();
    void updateCopyColorTextInputLabel();
    void updateDurLabel();
    void updateHSVMode();
    void updateOpacityLabel();
    void updateTouchTriggered();
};


template<class D, void*** V>
class $SetupPulsePopup : public SetupPulsePopup, public $CacBase {
public:
    $SetupPulsePopup();
    ~$SetupPulsePopup();
    void colorValueChanged(cocos2d::_ccColor3B);
    static SetupPulsePopup* create(EffectGameObject*, cocos2d::CCArray*);
    bool init(EffectGameObject*, cocos2d::CCArray*) override;
    void onSelectPulseMode(cocos2d::CCObject*);
    void onSelectTargetMode(cocos2d::CCObject*);
    void onUpdateCustomColor(cocos2d::CCObject*);
    void textChanged(CCTextInputNode*) override;
    void updateCopyColorTextInputLabel();
    void updateEditorLabel();
    void updateFadeOutLabel(bool);
    void updateTargetID();
    void updateTextInputLabel();
};
#include <CacKit.cpp>
#endif
