// Copyright camila314 & alk1m123 2021. Autogenerated using a python script
#pragma once 

#define _GLIBCXX_USE_CXX11_ABI 0
#include <iostream>
#include <string>
#include <map>
#include <GDML/GDML.hpp>
#include <CCMenuItemSpriteExtra.h>
#include <cocos2dx/cocos2d.h>
#include <cocos2dext/cocos-ext.h>


#define GM (GameManager::sharedState())
#define LEL (GM->_editorLayer())
#define PL (GM->_playLayer())
#define GJBL (LEL ? static_cast<GJBaseGameLayer*>(LEL) : static_cast<GJBaseGameLayer*>(PL))
#define WINSIZE (CCDirector::sharedDirector()->getWinSize())

//thanks pie
enum SearchType {
    kSearch          = 0x0,
    kMostDownloaded  = 0x1,
    kMostLiked       = 0x2,
    kTrending        = 0x3,
    kRecent          = 0x4,
    kUsersLevels     = 0x5,
    kFeatured        = 0x6,
    kMagic           = 0x7,
    kMapPacks        = 0x9,
    kAwarded         = 0xB,
    kFollowed        = 0xC,
    kFriends         = 0xD,
    kFindUsers       = 0xE,
    kHallOfFame      = 0x10,
    kMyLevels        = 0x62,
    kSavedLevels     = 0x63
};

typedef struct GameModes {
    bool cube;
    bool ship;
    bool ufo;
    bool ball;
    bool wave;
    bool robot;
    bool spider;
} GameModes;

typedef struct LevelDifficulty {
    int32_t denominator;
    int32_t numerator;  
} LevelDifficulty;

#define CLASS_PARAM(__TYPE__, __GETTER__, __OFFSET__) \
    inline __TYPE__& _##__GETTER__() { \
        return *((__TYPE__*)((long)this + __OFFSET__)); \
    }

#define STRUCT_PARAM(__TYPE__, __GETTER__, __OFFSET__) \
    inline __TYPE__ _##__GETTER__() { \
        return *(__TYPE__*)((long)this+__OFFSET__); \
    }

int xCompSpeed(void const*, void const*);
int xCompRealPos(void const*, void const*);


class GDObj { 
public:
    void* valOffset(long offset);
    void setValOffset(long offset, void* setter);
    template <typename T>
    T& __member(long offset) {
        return *reinterpret_cast<T*>(valOffset(offset));
    }
};


enum GameObjectType {};
enum PulseEffectType {};
enum TouchTriggerType {};
enum PlayerButton {};
enum GhostType {};
enum IconType {};
enum BoomListType {};
enum TableViewCellEditingStyle {};
enum CCIndexPath {};
enum UserListType {};
enum GJErrorCode {};
enum AccountError {};
enum GJSongError {};
enum LikeItemType {};
enum GJStoreItem {};
enum CommentError {};
enum BackupAccountError {};
enum UpdateResponse {};
class ArtistCell;
class GJItemIcon;
class GJUserCell;
class GameObject;
class GaragePage;
class HardStreak;
class PauseLayer;
class RingObject;
class SetIDLayer;
class SetIDPopup;
class ShardsPage;
class SongsLayer;
class StatsLayer;
class UndoObject;
class AppDelegate;
class CCCountdown;
class CCMoveCNode;
class CommentCell;
class DialogLayer;
class GJGameLevel;
class GJListLayer;
class GJScoreCell;
class GJShopLayer;
class GJUserScore;
class GJWorldNode;
class GameManager;
class MapPackCell;
class ProfilePage;
class RewardsPage;
class SecretLayer;
class SpeedObject;
class UploadPopup;
class AccountLayer;
class BoomListView;
class CCBlockLayer;
class CCCircleWave;
class CCLightFlash;
class CCLightStrip;
class CCSpritePlus;
class CreatorLayer;
class FLAlertLayer;
class GJHttpResult;
class GJRewardItem;
class GauntletNode;
class LoadingLayer;
class OptionsLayer;
class PlayerObject;
class SecretLayer2;
class SecretLayer3;
class SecretLayer4;
class SetTextPopup;
class SimplePlayer;
class SlideInLayer;
class SupportLayer;
class BoomListLayer;
class CCAlertCircle;
class ChallengeNode;
class DrawGridLayer;
class EditButtonBar;
class ExtendedLayer;
class GJChestSprite;
class GJGarageLayer;
class GJGroundLayer;
class GJMessageCell;
class GJRequestCell;
class GJRobotSprite;
class GJSongBrowser;
class GJSpriteColor;
class GJUserMessage;
class GauntletLayer;
class LikeItemLayer;
class ListButtonBar;
class LoadingCircle;
class MenuGameLayer;
class MyLevelsLayer;
class ObjectDecoder;
class ObjectManager;
class ObjectToolbox;
class SongInfoLayer;
class TableViewCell;
class TutorialLayer;
class TutorialPopup;
class AchievementBar;
class CCContentLayer;
class CCCounterLabel;
class ChallengesPage;
class CurrencySprite;
class CustomListView;
class CustomSongCell;
class DailyLevelNode;
class DailyLevelPage;
class EditLevelLayer;
class GJMessagePopup;
class GJOptionsLayer;
class GJRewardObject;
class GJScaleControl;
class GJSearchObject;
class GJSpiderSprite;
class GameObjectCopy;
class HSVWidgetPopup;
class LevelInfoLayer;
class RateDemonLayer;
class RateLevelLayer;
class RateStarsLayer;
class ScrollingLayer;
class SelectArtLayer;
class SetFolderPopup;
class SetItemIDLayer;
class SongInfoObject;
class StartPosObject;
class WorldLevelPage;
class AchievementCell;
class BoomScrollLayer;
class CCNodeContainer;
class CCSpriteWithHue;
class CCTextInputNode;
class CustomSongLayer;
class EndPortalObject;
class FileSaveManager;
class GJBaseGameLayer;
class GJChallengeItem;
class GJDropDownLayer;
class GJEffectManager;
class GJFriendRequest;
class GJObjectDecoder;
class InfoAlertButton;
class LabelGameObject;
class MoreSearchLayer;
class RetryLevelLayer;
class SelectFontLayer;
class SetGroupIDLayer;
class SetupPulsePopup;
class SetupShakePopup;
class SetupSpawnPopup;
class ShareLevelLayer;
class TopArtistsLayer;
class AccountHelpLayer;
class CCAnimatedSprite;
class CCContentManager;
class CCPartAnimSprite;
class CCScrollLayerExt;
class CheckpointObject;
class ColorSelectPopup;
class CustomSongWidget;
class EditorPauseLayer;
class EffectGameObject;
class FollowRewardPage;
class GJAccountManager;
class GJFlyGroundLayer;
class GJLevelScoreCell;
class GJMoreGamesLayer;
class GameLevelManager;
class GameSoundManager;
class GameStatsManager;
class GhostTrailEffect;
class KeybindingsLayer;
class LevelEditorLayer;
class LevelLeaderboard;
class LevelSearchLayer;
class LevelSelectLayer;
class MoreOptionsLayer;
class NumberInputLayer;
class PlayerCheckpoint;
class SetTargetIDLayer;
class SetupRotatePopup;
class SliderTouchLogic;
class SongOptionsLayer;
class WorldSelectLayer;
class AccountLoginLayer;
class AchievementsLayer;
class AudioEffectsLayer;
class CCMenuItemToggler;
class ColorActionSprite;
class DungeonBarsSprite;
class EditTriggersPopup;
class GJColorSetupLayer;
class GJRotationControl;
class GooglePlayManager;
class LeaderboardsLayer;
class LevelBrowserLayer;
class LevelFeatureLayer;
class LocalLevelManager;
class PromoInterstitial;
class PurchaseItemPopup;
class RewardUnlockLayer;
class SecretNumberLayer;
class SetupOpacityPopup;
class ShareCommentLayer;
class SpriteDescription;
class TableViewDelegate;
class TextInputDelegate;
class UploadActionPopup;
class VideoOptionsLayer;
class AchievementManager;
class AnimatedGameObject;
class AnimatedShopKeeper;
class ColorChannelSprite;
class ConfigureHSVWidget;
class EditorOptionsLayer;
class FriendRequestPopup;
class FriendsProfilePage;
class GJCommentListLayer;
class GJMoveCommandLayer;
class GameEffectsManager;
class GroupCommandObject;
class KeybindingsManager;
class LevelSettingsLayer;
class AchievementNotifier;
class CCAnimateFrameCache;
class CollisionBlockPopup;
class CommunityCreditNode;
class ConfigureValuePopup;
class CurrencyRewardLayer;
class EditGameObjectPopup;
class FRequestProfilePage;
class GJWriteMessagePopup;
class GauntletSelectLayer;
class GravityEffectSprite;
class LevelSettingsObject;
class MessagesProfilePage;
class SetupAnimationPopup;
class AccountRegisterLayer;
class CommunityCreditsPage;
class CustomizeObjectLayer;
class GJFollowCommandLayer;
class GJRotateCommandLayer;
class GJSpecialColorSelect;
class MusicDelegateHandler;
class MusicDownloadManager;
class ParentalOptionsLayer;
class TeleportPortalObject;
class UploadActionDelegate;
class CCMenuItemSpriteExtra;
class CreateGuidelinesLayer;
class GJPFollowCommandLayer;
class MoreVideoOptionsLayer;
class MusicDownloadDelegate;
class SetupTouchTogglePopup;
class ColorSelectLiveOverlay;
class DemonFilterSelectLayer;
class GJAccountSettingsLayer;
class SetupAnimSettingsPopup;
class SetupCountTriggerPopup;
class SetupInstantCountPopup;
class SetupObjectTogglePopup;
class SpriteAnimationManager;
class BoomScrollLayerDelegate;
class SetupPickupTriggerPopup;
class ShareLevelSettingsLayer;
class PlatformDownloadDelegate;
class SetupInteractObjectPopup;
class SetupCollisionTriggerPopup;
class UpdateAccountSettingsPopup;
class Slider;
class UILayer;
class EditorUI;
class GManager;
class GameCell;
class ListCell;
class SongCell;
class TextArea;
class GJComment;
class GJMapPack;
class InfoLayer;
class KeysLayer;
class LevelCell;
class LevelPage;
class MenuLayer;
class PlayLayer;
class StatsCell;
class TableView;


class ArtistCell : public GDObj {
public:
    ~ArtistCell();
    bool init();
    void draw();
};

class GJItemIcon : public GDObj {
public:
    ~GJItemIcon();
    void setOpacity(unsigned char);
};

class GJUserCell : public GDObj {
public:
    ~GJUserCell();
    bool init();
    void draw();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
    void onClosePopup(UploadActionPopup*);
};

class GameObject : public GDObj {
public:
    ~GameObject();
    void update(float);
    void setScaleX(float);
    void setScaleY(float);
    void setScale(float);
    void setPosition(cocos2d::CCPoint const&);
    void setVisible(bool);
    void setRotation(float);
    void setOpacity(unsigned char);
    void initWithTexture(cocos2d::CCTexture2D*);
    void setChildColor(cocos2d::_ccColor3B const&);
    void setFlipX(bool);
    void setFlipY(bool);
    void customSetup();
    void setupCustomSprites();
    void addMainSpriteToParent(bool);
    void resetObject();
    void triggerObject(GJBaseGameLayer*);
    void activateObject();
    void deactivateObject(bool);
    void getObjectRect();
    void getObjectRect(float, float);
    void getObjectRect2(float, float);
    void getObjectTextureRect();
    void getRealPosition();
    void setStartPos(cocos2d::CCPoint);
    void updateStartValues();
    void getSaveString();
    void isFlipX();
    void isFlipY();
    void setRScaleX(float);
    void setRScaleY(float);
    void setRScale(float);
    void getRScaleX();
    void getRScaleY();
    void calculateSpawnXPos();
    void triggerActivated(float);
    void powerOnObject();
    void powerOffObject();
    void setObjectColor(cocos2d::_ccColor3B const&);
    void setGlowColor(cocos2d::_ccColor3B const&);
    void getOrientedBox();
    void addToGroup(int);
    void removeFromGroup(int);
    void spawnXPosition();
    void getObjectRectDirty();
    void setObjectRectDirty(bool);
    void getOrientedRectDirty();
    void setOrientedRectDirty(bool);
    void getType();
    void setType(GameObjectType);
    void getStartPos();
};

class GaragePage : public GDObj {
public:
    ~GaragePage();
    void listButtonBarSwitchedPage(ListButtonBar*, int);
};

class HardStreak : public GDObj {
public:
    ~HardStreak();
    bool init();
};

class PauseLayer : public GDObj {
public:
    ~PauseLayer();
    void keyBackClicked();
    void keyDown(cocos2d::enumKeyCodes);
    void customSetup();
    void keyUp(cocos2d::enumKeyCodes);
};

class RingObject : public GDObj {
public:
    ~RingObject();
    void setScale(float);
    void setRotation(float);
    void resetObject();
    void getSaveString();
    void setRScale(float);
    void triggerActivated(float);
    void powerOnObject();
    void powerOffObject();
};

class SetIDLayer : public GDObj {
public:
    ~SetIDLayer();
    void keyBackClicked();
};

class SetIDPopup : public GDObj {
public:
    ~SetIDPopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void valueChanged();
};

class ShardsPage : public GDObj {
public:
    ~ShardsPage();
    bool init();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void show();
};

class SongsLayer : public GDObj {
public:
    ~SongsLayer();
    void customSetup();
};

class StatsLayer : public GDObj {
public:
    ~StatsLayer();
    void customSetup();
};

class UndoObject : public GDObj {
public:
    ~UndoObject();
};

class AppDelegate : public GDObj {
public:
    ~AppDelegate();
    void applicationDidFinishLaunching();
    void applicationDidEnterBackground();
    void applicationWillEnterForeground();
    void applicationWillBecomeActive();
    void applicationWillResignActive();
    void trySaveGame();
    void willSwitchToScene(cocos2d::CCScene*);
};

class CCCountdown : public GDObj {
public:
    ~CCCountdown();
    bool init();
    void setOpacity(unsigned char);
};

class CCMoveCNode : public GDObj {
public:
    ~CCMoveCNode();
    bool init();
};

class CommentCell : public GDObj {
public:
    ~CommentCell();
    bool init();
    void draw();
    void likedItem(LikeItemType, int, bool);
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class DialogLayer : public GDObj {
public:
    ~DialogLayer();
    void onEnter();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void keyDown(cocos2d::enumKeyCodes);
    void fadeInTextFinished(TextArea*);
};

class GJGameLevel : public GDObj {
public:
    ~GJGameLevel();
    void encodeWithCoder(DS_Dictionary*);
    void canEncode();
    bool init();
};

class GJListLayer : public GDObj {
public:
    ~GJListLayer();
};

class GJScoreCell : public GDObj {
public:
    ~GJScoreCell();
    bool init();
    void draw();
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class GJShopLayer : public GDObj {
public:
    ~GJShopLayer();
    void keyBackClicked();
    void didPurchaseItem(GJStoreItem*);
};

class GJUserScore : public GDObj {
public:
    ~GJUserScore();
    bool init();
};

class GJWorldNode : public GDObj {
public:
    ~GJWorldNode();
};

class GameManager : public GDObj {
public:
    ~GameManager();
    void update(float);
    bool init();
    void encodeDataTo(DS_Dictionary*);
    void dataLoaded(DS_Dictionary*);
    void firstLoad();
};

class MapPackCell : public GDObj {
public:
    ~MapPackCell();
    bool init();
    void draw();
};

class ProfilePage : public GDObj {
public:
    ~ProfilePage();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void show();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void updateUserScoreFinished();
    void updateUserScoreFailed();
    void getUserInfoFinished(GJUserScore*);
    void getUserInfoFailed(int);
    void userInfoChanged(GJUserScore*);
    void loadCommentsFinished(cocos2d::CCArray*, char const*);
    void loadCommentsFailed(char const*);
    void setupPageInfo(std::string, char const*);
    void commentUploadFinished(int);
    void commentUploadFailed(int, CommentError);
    void commentDeleteFailed(int, int);
    void onClosePopup(UploadActionPopup*);
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
};

class RewardsPage : public GDObj {
public:
    ~RewardsPage();
    bool init();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void show();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void rewardsStatusFinished(int);
    void rewardsStatusFailed();
};

class SecretLayer : public GDObj {
public:
    ~SecretLayer();
    bool init();
    void keyBackClicked();
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class SpeedObject : public GDObj {
public:
    ~SpeedObject();
};

class UploadPopup : public GDObj {
public:
    ~UploadPopup();
    void keyBackClicked();
    void show();
    void levelUploadFinished(GJGameLevel*);
    void levelUploadFailed(GJGameLevel*);
};

class AccountLayer : public GDObj {
public:
    ~AccountLayer();
    void customSetup();
    void layerHidden();
    void backupAccountFinished();
    void backupAccountFailed(BackupAccountError);
    void syncAccountFinished();
    void syncAccountFailed(BackupAccountError);
    void accountStatusChanged();
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class BoomListView : public GDObj {
public:
    ~BoomListView();
    void draw();
    void setupList();
    void TableViewWillDisplayCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*);
    void cellHeightForRowAtIndexPath(CCIndexPath&, TableView*);
    void didSelectRowAtIndexPath(CCIndexPath&, TableView*);
    void numberOfRowsInSection(unsigned int, TableView*);
    void numberOfSectionsInTableView(TableView*);
    void cellForRowAtIndexPath(CCIndexPath&, TableView*);
    void TableViewCommitCellEditingStyleForRowAtIndexPath(TableView*, TableViewCellEditingStyle, CCIndexPath&);
    void TableViewWillReloadCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*);
    void getListCell(char const*);
    void loadCell(TableViewCell*, int);
};

class CCBlockLayer : public GDObj {
public:
    ~CCBlockLayer();
    bool init();
    void draw();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void customSetup();
    void enterLayer();
    void exitLayer();
    void showLayer(bool);
    void hideLayer(bool);
    void layerVisible();
    void layerHidden();
    void enterAnimFinished();
    void disableUI();
    void enableUI();
};

class CCCircleWave : public GDObj {
public:
    ~CCCircleWave();
    void setPosition(cocos2d::CCPoint const&);
    void removeMeAndCleanup();
    void draw();
    void updateTweenAction(float, char const*);
};

class CCLightFlash : public GDObj {
public:
    ~CCLightFlash();
    bool init();
};

class CCLightStrip : public GDObj {
public:
    ~CCLightStrip();
    void draw();
    void updateTweenAction(float, char const*);
};

class CCSpritePlus : public GDObj {
public:
    ~CCSpritePlus();
    void setScaleX(float);
    void setScaleY(float);
    void setScale(float);
    void setPosition(cocos2d::CCPoint const&);
    void setRotation(float);
    void initWithTexture(cocos2d::CCTexture2D*);
    void initWithSpriteFrameName(char const*);
    void setFlipX(bool);
    void setFlipY(bool);
};

class CreatorLayer : public GDObj {
public:
    ~CreatorLayer();
    bool init();
    void keyBackClicked();
    void sceneWillResume();
    void dialogClosed(DialogLayer*);
};

class FLAlertLayer : public GDObj {
public:
    ~FLAlertLayer();
    void onEnter();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void keyDown(cocos2d::enumKeyCodes);
    void show();
};

class GJHttpResult : public GDObj {
public:
    ~GJHttpResult();
};

class GJRewardItem : public GDObj {
public:
    ~GJRewardItem();
    void encodeWithCoder(DS_Dictionary*);
    void canEncode();
};

class GauntletNode : public GDObj {
public:
    ~GauntletNode();
};

class LoadingLayer : public GDObj {
public:
    ~LoadingLayer();
};

class OptionsLayer : public GDObj {
public:
    ~OptionsLayer();
    void customSetup();
    void layerHidden();
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class PlayerObject : public GDObj {
public:
    ~PlayerObject();
    void update(float);
    void setScaleX(float);
    void setScaleY(float);
    void setScale(float);
    void setPosition(cocos2d::CCPoint const&);
    void setVisible(bool);
    void setRotation(float);
    void setOpacity(unsigned char);
    void setColor(cocos2d::_ccColor3B const&);
    void setFlipX(bool);
    void setFlipY(bool);
    void resetObject();
    void getRealPosition();
    void getOrientedBox();
    void animationFinished(char const*);
};

class SecretLayer2 : public GDObj {
public:
    ~SecretLayer2();
    bool init();
    void onExit();
    void keyBackClicked();
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void dialogClosed(DialogLayer*);
};

class SecretLayer3 : public GDObj {
public:
    ~SecretLayer3();
    bool init();
    void onExit();
    void keyBackClicked();
    void dialogClosed(DialogLayer*);
};

class SecretLayer4 : public GDObj {
public:
    ~SecretLayer4();
    bool init();
    void onExit();
    void keyBackClicked();
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void dialogClosed(DialogLayer*);
};

class SetTextPopup : public GDObj {
public:
    ~SetTextPopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
};

class SimplePlayer : public GDObj {
public:
    ~SimplePlayer();
    void setOpacity(unsigned char);
    void setColor(cocos2d::_ccColor3B const&);
};

class SlideInLayer : public GDObj {
public:
    ~SlideInLayer();
    bool init();
    void draw();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void customSetup();
    void enterLayer();
    void exitLayer(cocos2d::CCObject*);
    void showLayer(bool);
    void hideLayer(bool);
    void layerVisible();
    void layerHidden();
    void enterAnimFinished();
    void disableUI();
    void enableUI();
};

class SupportLayer : public GDObj {
public:
    ~SupportLayer();
    void customSetup();
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
    void onClosePopup(UploadActionPopup*);
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class BoomListLayer : public GDObj {
public:
    ~BoomListLayer();
};

class CCAlertCircle : public GDObj {
public:
    ~CCAlertCircle();
    bool init();
    void draw();
};

class ChallengeNode : public GDObj {
public:
    ~ChallengeNode();
};

class DrawGridLayer : public GDObj {
public:
    ~DrawGridLayer();
    void update(float);
    void draw();
};

class EditButtonBar : public GDObj {
public:
    ~EditButtonBar();
};

class ExtendedLayer : public GDObj {
public:
    ~ExtendedLayer();
    bool init();
    void setPosition(cocos2d::CCPoint const&);
};

class GJChestSprite : public GDObj {
public:
    ~GJChestSprite();
    void setColor(cocos2d::_ccColor3B const&);
};

class GJGarageLayer : public GDObj {
public:
    ~GJGarageLayer();
    bool init();
    void keyBackClicked();
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void listButtonBarSwitchedPage(ListButtonBar*, int);
    void updateRate();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void dialogClosed(DialogLayer*);
};

class GJGroundLayer : public GDObj {
public:
    ~GJGroundLayer();
    void draw();
    void showGround();
    void fadeInGround(float);
    void fadeOutGround(float);
};

class GJMessageCell : public GDObj {
public:
    ~GJMessageCell();
    bool init();
    void draw();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
    void onClosePopup(UploadActionPopup*);
};

class GJRequestCell : public GDObj {
public:
    ~GJRequestCell();
    bool init();
    void draw();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
    void onClosePopup(UploadActionPopup*);
};

class GJRobotSprite : public GDObj {
public:
    ~GJRobotSprite();
    bool init();
    void setOpacity(unsigned char);
    void hideSecondary();
};

class GJSongBrowser : public GDObj {
public:
    ~GJSongBrowser();
    void customSetup();
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class GJSpriteColor : public GDObj {
public:
    ~GJSpriteColor();
    bool init();
};

class GJUserMessage : public GDObj {
public:
    ~GJUserMessage();
    bool init();
};

class GauntletLayer : public GDObj {
public:
    ~GauntletLayer();
    void keyBackClicked();
    void loadLevelsFinished(cocos2d::CCArray*, char const*);
    void loadLevelsFailed(char const*);
};

class LikeItemLayer : public GDObj {
public:
    ~LikeItemLayer();
    void keyBackClicked();
};

class ListButtonBar : public GDObj {
public:
    ~ListButtonBar();
};

class LoadingCircle : public GDObj {
public:
    ~LoadingCircle();
    bool init();
    void draw();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
};

class MenuGameLayer : public GDObj {
public:
    ~MenuGameLayer();
    void update(float);
    bool init();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
};

class MyLevelsLayer : public GDObj {
public:
    ~MyLevelsLayer();
    bool init();
    void keyBackClicked();
};

class ObjectDecoder : public GDObj {
public:
    ~ObjectDecoder();
    bool init();
};

class ObjectManager : public GDObj {
public:
    ~ObjectManager();
    bool init();
};

class ObjectToolbox : public GDObj {
public:
    ~ObjectToolbox();
    bool init();
};

class SongInfoLayer : public GDObj {
public:
    ~SongInfoLayer();
    void keyBackClicked();
};

class TableViewCell : public GDObj {
public:
    ~TableViewCell();
};

class TutorialLayer : public GDObj {
public:
    ~TutorialLayer();
    bool init();
    void keyBackClicked();
};

class TutorialPopup : public GDObj {
public:
    ~TutorialPopup();
    void keyBackClicked();
    void show();
};

class AchievementBar : public GDObj {
public:
    ~AchievementBar();
    void setOpacity(unsigned char);
};

class CCContentLayer : public GDObj {
public:
    ~CCContentLayer();
    void setPosition(cocos2d::CCPoint const&);
};

class CCCounterLabel : public GDObj {
public:
    ~CCCounterLabel();
};

class ChallengesPage : public GDObj {
public:
    ~ChallengesPage();
    bool init();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void show();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void challengeStatusFinished();
    void challengeStatusFailed();
    void currencyWillExit(CurrencyRewardLayer*);
};

class CurrencySprite : public GDObj {
public:
    ~CurrencySprite();
};

class CustomListView : public GDObj {
public:
    ~CustomListView();
    void setupList();
    void getListCell(char const*);
    void loadCell(TableViewCell*, int);
};

class CustomSongCell : public GDObj {
public:
    ~CustomSongCell();
    bool init();
    void draw();
};

class DailyLevelNode : public GDObj {
public:
    ~DailyLevelNode();
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class DailyLevelPage : public GDObj {
public:
    ~DailyLevelPage();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void show();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void dailyStatusFinished(bool);
    void dailyStatusFailed(bool);
    void levelDownloadFinished(GJGameLevel*);
    void levelDownloadFailed(int);
};

class EditLevelLayer : public GDObj {
public:
    ~EditLevelLayer();
    void keyBackClicked();
    void keyDown(cocos2d::enumKeyCodes);
    void setIDPopupClosed(SetIDPopup*, int);
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
    void onClosePopup(UploadActionPopup*);
};

class GJMessagePopup : public GDObj {
public:
    ~GJMessagePopup();
    void keyBackClicked();
    void downloadMessageFinished(GJUserMessage*);
    void downloadMessageFailed(int);
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
    void onClosePopup(UploadActionPopup*);
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class GJOptionsLayer : public GDObj {
public:
    ~GJOptionsLayer();
    bool init();
    void keyBackClicked();
    void setupOptions();
    void onClose(cocos2d::CCObject*);
};

class GJRewardObject : public GDObj {
public:
    ~GJRewardObject();
    void encodeWithCoder(DS_Dictionary*);
    void canEncode();
};

class GJScaleControl : public GDObj {
public:
    ~GJScaleControl();
    bool init();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
};

class GJSearchObject : public GDObj {
public:
    ~GJSearchObject();
};

class GJSpiderSprite : public GDObj {
public:
    ~GJSpiderSprite();
    bool init();
};

class GameObjectCopy : public GDObj {
public:
    ~GameObjectCopy();
};

class HSVWidgetPopup : public GDObj {
public:
    ~HSVWidgetPopup();
    void keyBackClicked();
};

class LevelInfoLayer : public GDObj {
public:
    ~LevelInfoLayer();
    void keyBackClicked();
    void keyDown(cocos2d::enumKeyCodes);
    void numberInputClosed(NumberInputLayer*);
    void levelDownloadFinished(GJGameLevel*);
    void levelDownloadFailed(int);
    void levelUpdateFinished(GJGameLevel*, UpdateResponse);
    void levelUpdateFailed(int);
    void levelDeleteFinished(int);
    void levelDeleteFailed(int);
    void rateLevelClosed();
    void likedItem(LikeItemType, int, bool);
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void setIDPopupClosed(SetIDPopup*, int);
};

class RateDemonLayer : public GDObj {
public:
    ~RateDemonLayer();
    void keyBackClicked();
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
    void onClosePopup(UploadActionPopup*);
};

class RateLevelLayer : public GDObj {
public:
    ~RateLevelLayer();
    void keyBackClicked();
};

class RateStarsLayer : public GDObj {
public:
    ~RateStarsLayer();
    void keyBackClicked();
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
    void onClosePopup(UploadActionPopup*);
};

class ScrollingLayer : public GDObj {
public:
    ~ScrollingLayer();
    void draw();
    void visit();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
};

class SelectArtLayer : public GDObj {
public:
    ~SelectArtLayer();
    void keyBackClicked();
};

class SetFolderPopup : public GDObj {
public:
    ~SetFolderPopup();
    void valueChanged();
    void setTextPopupClosed(SetTextPopup*, std::string);
};

class SetItemIDLayer : public GDObj {
public:
    ~SetItemIDLayer();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class SongInfoObject : public GDObj {
public:
    ~SongInfoObject();
    void encodeWithCoder(DS_Dictionary*);
    void canEncode();
};

class StartPosObject : public GDObj {
public:
    ~StartPosObject();
    bool init();
    void getSaveString();
};

class WorldLevelPage : public GDObj {
public:
    ~WorldLevelPage();
    void keyBackClicked();
    void show();
};

class AchievementCell : public GDObj {
public:
    ~AchievementCell();
    bool init();
    void draw();
};

class BoomScrollLayer : public GDObj {
public:
    ~BoomScrollLayer();
    void visit();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
};

class CCNodeContainer : public GDObj {
public:
    ~CCNodeContainer();
    bool init();
    void visit();
};

class CCSpriteWithHue : public GDObj {
public:
    ~CCSpriteWithHue();
    void draw();
    void initWithTexture(cocos2d::CCTexture2D*);
    void initWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&);
    void initWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&, bool);
    void initWithSpriteFrame(cocos2d::CCSpriteFrame*);
    void updateColor();
};

class CCTextInputNode : public GDObj {
public:
    ~CCTextInputNode();
    void visit();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
    void textChanged();
    void onClickTrackNode(bool);
    void keyboardWillShow(cocos2d::CCIMEKeyboardNotificationInfo&);
    void keyboardWillHide(cocos2d::CCIMEKeyboardNotificationInfo&);
    void onTextFieldInsertText(cocos2d::CCTextFieldTTF*, char const*, int);
    void onTextFieldAttachWithIME(cocos2d::CCTextFieldTTF*);
    void onTextFieldDetachWithIME(cocos2d::CCTextFieldTTF*);
};

class CustomSongLayer : public GDObj {
public:
    ~CustomSongLayer();
    void keyBackClicked();
    void show();
    void textChanged(CCTextInputNode*);
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
    void dropDownLayerWillClose(GJDropDownLayer*);
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class EndPortalObject : public GDObj {
public:
    ~EndPortalObject();
    bool init();
    void setPosition(cocos2d::CCPoint const&);
    void setVisible(bool);
    void triggerObject(GJBaseGameLayer*);
    void calculateSpawnXPos();
};

class FileSaveManager : public GDObj {
public:
    ~FileSaveManager();
    bool init();
    void firstLoad();
};

class GJBaseGameLayer : public GDObj {
public:
    ~GJBaseGameLayer();
    bool init();
    void objectsCollided(int, int);
    void createMoveCommand(cocos2d::CCPoint, int, float, int, float, bool, bool, int);
    void updateColor(cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*);
    void flipGravity(PlayerObject*, bool, bool);
    void calculateColorValues(EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*);
    void toggleGroupTriggered(int, bool);
    void spawnGroup(int);
    void addToSection(GameObject*);
    void addToGroup(GameObject*, int, bool);
    void removeFromGroup(GameObject*, int);
};

class GJChallengeItem : public GDObj {
public:
    ~GJChallengeItem();
    void encodeWithCoder(DS_Dictionary*);
    void canEncode();
};

class GJDropDownLayer : public GDObj {
public:
    ~GJDropDownLayer();
    void draw();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void customSetup();
    void enterLayer();
    void exitLayer(cocos2d::CCObject*);
    void showLayer(bool);
    void hideLayer(bool);
    void layerVisible();
    void layerHidden();
    void enterAnimFinished();
    void disableUI();
    void enableUI();
};

class GJEffectManager : public GDObj {
public:
    ~GJEffectManager();
    bool init();
};

class GJFriendRequest : public GDObj {
public:
    ~GJFriendRequest();
    bool init();
};

class GJObjectDecoder : public GDObj {
public:
    ~GJObjectDecoder();
    bool init();
    void getDecodedObject(int, DS_Dictionary*);
};

class InfoAlertButton : public GDObj {
public:
    ~InfoAlertButton();
    void activate();
};

class LabelGameObject : public GDObj {
public:
    ~LabelGameObject();
    bool init();
    void setOpacity(unsigned char);
    void setupCustomSprites();
    void addMainSpriteToParent(bool);
    void getSaveString();
    void setObjectColor(cocos2d::_ccColor3B const&);
};

class MoreSearchLayer : public GDObj {
public:
    ~MoreSearchLayer();
    bool init();
    void keyBackClicked();
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class RetryLevelLayer : public GDObj {
public:
    ~RetryLevelLayer();
    void keyBackClicked();
    void keyDown(cocos2d::enumKeyCodes);
    void customSetup();
    void showLayer(bool);
    void enterAnimFinished();
    void keyUp(cocos2d::enumKeyCodes);
};

class SelectFontLayer : public GDObj {
public:
    ~SelectFontLayer();
    void keyBackClicked();
};

class SetGroupIDLayer : public GDObj {
public:
    ~SetGroupIDLayer();
    void keyBackClicked();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
};

class SetupPulsePopup : public GDObj {
public:
    ~SetupPulsePopup();
    void keyBackClicked();
    void show();
    void colorValueChanged(cocos2d::_ccColor3B);
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void colorSelectClosed(GJSpecialColorSelect*, int);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class SetupShakePopup : public GDObj {
public:
    ~SetupShakePopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class SetupSpawnPopup : public GDObj {
public:
    ~SetupSpawnPopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class ShareLevelLayer : public GDObj {
public:
    ~ShareLevelLayer();
    void keyBackClicked();
};

class TopArtistsLayer : public GDObj {
public:
    ~TopArtistsLayer();
    bool init();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void show();
    void loadListFinished(cocos2d::CCArray*, char const*);
    void loadListFailed(char const*);
    void setupPageInfo(std::string, char const*);
};

class AccountHelpLayer : public GDObj {
public:
    ~AccountHelpLayer();
    void customSetup();
    void layerHidden();
    void accountStatusChanged();
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class CCAnimatedSprite : public GDObj {
public:
    ~CCAnimatedSprite();
    void setOpacity(unsigned char);
    void animationFinished(char const*);
    void animationFinishedO(cocos2d::CCObject*);
};

class CCContentManager : public GDObj {
public:
    ~CCContentManager();
};

class CCPartAnimSprite : public GDObj {
public:
    ~CCPartAnimSprite();
    void setScaleX(float);
    void setScaleY(float);
    void setScale(float);
    void setOpacity(unsigned char);
    void setBlendFunc(cocos2d::_ccBlendFunc);
    void setDisplayFrame(cocos2d::CCSpriteFrame*);
    void isFrameDisplayed(cocos2d::CCSpriteFrame*);
    void displayFrame();
};

class CCScrollLayerExt : public GDObj {
public:
    ~CCScrollLayerExt();
    void visit();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
    void preVisitWithClippingRect(cocos2d::CCRect);
    void postVisit();
};

class CheckpointObject : public GDObj {
public:
    ~CheckpointObject();
    bool init();
};

class ColorSelectPopup : public GDObj {
public:
    ~ColorSelectPopup();
    void keyBackClicked();
    void show();
    void colorValueChanged(cocos2d::_ccColor3B);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void colorSelectClosed(GJSpecialColorSelect*, int);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class CustomSongWidget : public GDObj {
public:
    ~CustomSongWidget();
    void loadSongInfoFinished(SongInfoObject*);
    void loadSongInfoFailed(int, GJSongError);
    void downloadSongFinished(SongInfoObject*);
    void downloadSongFailed(int, GJSongError);
    void songStateChanged();
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class EditorPauseLayer : public GDObj {
public:
    ~EditorPauseLayer();
    void keyBackClicked();
    void keyDown(cocos2d::enumKeyCodes);
    void customSetup();
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class EffectGameObject : public GDObj {
public:
    ~EffectGameObject();
    void customSetup();
    void triggerObject(GJBaseGameLayer*);
    void getSaveString();
    void triggerActivated(float);
    void spawnXPosition();
};

class FollowRewardPage : public GDObj {
public:
    ~FollowRewardPage();
    bool init();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void show();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void updateRate();
};

class GJAccountManager : public GDObj {
public:
    ~GJAccountManager();
    bool init();
};

class GJFlyGroundLayer : public GDObj {
public:
    ~GJFlyGroundLayer();
    bool init();
};

class GJLevelScoreCell : public GDObj {
public:
    ~GJLevelScoreCell();
    bool init();
    void draw();
};

class GJMoreGamesLayer : public GDObj {
public:
    ~GJMoreGamesLayer();
    void customSetup();
};

class GameLevelManager : public GDObj {
public:
    ~GameLevelManager();
    bool init();
};

class GameSoundManager : public GDObj {
public:
    ~GameSoundManager();
    bool init();
};

class GameStatsManager : public GDObj {
public:
    ~GameStatsManager();
    bool init();
};

class GhostTrailEffect : public GDObj {
public:
    ~GhostTrailEffect();
    bool init();
    void draw();
};

class KeybindingsLayer : public GDObj {
public:
    ~KeybindingsLayer();
    bool init();
    void keyBackClicked();
};

class LevelEditorLayer : public GDObj {
public:
    ~LevelEditorLayer();
    void update(float);
    void draw();
    void updateColor(cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*);
    void flipGravity(PlayerObject*, bool, bool);
    void calculateColorValues(EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*);
    void addToGroup(GameObject*, int, bool);
    void removeFromGroup(GameObject*, int);
    void timeForXPos(float);
    void xPosForTime(float);
    void levelSettingsUpdated();
};

class LevelLeaderboard : public GDObj {
public:
    ~LevelLeaderboard();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void show();
    void loadLeaderboardFinished(cocos2d::CCArray*, char const*);
    void loadLeaderboardFailed(char const*);
    void updateUserScoreFinished();
    void updateUserScoreFailed();
};

class LevelSearchLayer : public GDObj {
public:
    ~LevelSearchLayer();
    bool init();
    void keyBackClicked();
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void demonFilterSelectClosed(int);
};

class LevelSelectLayer : public GDObj {
public:
    ~LevelSelectLayer();
    void keyBackClicked();
    void keyDown(cocos2d::enumKeyCodes);
    void updatePageWithObject(cocos2d::CCObject*, cocos2d::CCObject*);
    void scrollLayerMoved(cocos2d::CCPoint);
};

class MoreOptionsLayer : public GDObj {
public:
    ~MoreOptionsLayer();
    bool init();
    void keyBackClicked();
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
    void googlePlaySignedIn();
};

class NumberInputLayer : public GDObj {
public:
    ~NumberInputLayer();
    bool init();
    void registerWithTouchDispatcher();
    void keyBackClicked();
};

class PlayerCheckpoint : public GDObj {
public:
    ~PlayerCheckpoint();
    bool init();
};

class SetTargetIDLayer : public GDObj {
public:
    ~SetTargetIDLayer();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class SetupRotatePopup : public GDObj {
public:
    ~SetupRotatePopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class SliderTouchLogic : public GDObj {
public:
    ~SliderTouchLogic();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
};

class SongOptionsLayer : public GDObj {
public:
    ~SongOptionsLayer();
    void keyBackClicked();
};

class WorldSelectLayer : public GDObj {
public:
    ~WorldSelectLayer();
    void onExit();
    void keyBackClicked();
    void scrollLayerWillScrollToPage(BoomScrollLayer*, int);
    void scrollLayerScrolledToPage(BoomScrollLayer*, int);
    void scrollLayerMoved(cocos2d::CCPoint);
};

class AccountLoginLayer : public GDObj {
public:
    ~AccountLoginLayer();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void loginAccountFinished(int, int);
    void loginAccountFailed(AccountError);
};

class AchievementsLayer : public GDObj {
public:
    ~AchievementsLayer();
    void keyDown(cocos2d::enumKeyCodes);
    void customSetup();
};

class AudioEffectsLayer : public GDObj {
public:
    ~AudioEffectsLayer();
    void draw();
    void updateTweenAction(float, char const*);
};

class CCMenuItemToggler : public GDObj {
public:
    ~CCMenuItemToggler();
    void activate();
    void selected();
    void unselected();
    void setEnabled(bool);
};

class ColorActionSprite : public GDObj {
public:
    ~ColorActionSprite();
    bool init();
};

class DungeonBarsSprite : public GDObj {
public:
    ~DungeonBarsSprite();
    bool init();
    void visit();
};

class EditTriggersPopup : public GDObj {
public:
    ~EditTriggersPopup();
    void keyBackClicked();
    void show();
};

class GJColorSetupLayer : public GDObj {
public:
    ~GJColorSetupLayer();
    void keyBackClicked();
    void colorSelectClosed(cocos2d::CCNode*);
};

class GJRotationControl : public GDObj {
public:
    ~GJRotationControl();
    bool init();
    void draw();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
};

class GooglePlayManager : public GDObj {
public:
    ~GooglePlayManager();
    bool init();
};

class LeaderboardsLayer : public GDObj {
public:
    ~LeaderboardsLayer();
    void keyBackClicked();
    void updateUserScoreFinished();
    void updateUserScoreFailed();
    void loadLeaderboardFinished(cocos2d::CCArray*, char const*);
    void loadLeaderboardFailed(char const*);
};

class LevelBrowserLayer : public GDObj {
public:
    ~LevelBrowserLayer();
    void onEnter();
    void onEnterTransitionDidFinish();
    void keyBackClicked();
    void keyDown(cocos2d::enumKeyCodes);
    void loadLevelsFinished(cocos2d::CCArray*, char const*);
    void loadLevelsFailed(char const*);
    void setupPageInfo(std::string, char const*);
    void setTextPopupClosed(SetTextPopup*, std::string);
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void setIDPopupClosed(SetIDPopup*, int);
};

class LevelFeatureLayer : public GDObj {
public:
    ~LevelFeatureLayer();
    void keyBackClicked();
};

class LocalLevelManager : public GDObj {
public:
    ~LocalLevelManager();
    bool init();
    void encodeDataTo(DS_Dictionary*);
    void dataLoaded(DS_Dictionary*);
    void firstLoad();
};

class PromoInterstitial : public GDObj {
public:
    ~PromoInterstitial();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void keyBackClicked();
    void show();
};

class PurchaseItemPopup : public GDObj {
public:
    ~PurchaseItemPopup();
    void keyBackClicked();
};

class RewardUnlockLayer : public GDObj {
public:
    ~RewardUnlockLayer();
    void keyBackClicked();
    void currencyWillExit(CurrencyRewardLayer*);
};

class SecretNumberLayer : public GDObj {
public:
    ~SecretNumberLayer();
    bool init();
};

class SetupOpacityPopup : public GDObj {
public:
    ~SetupOpacityPopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class ShareCommentLayer : public GDObj {
public:
    ~ShareCommentLayer();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
    void onClosePopup(UploadActionPopup*);
};

class SpriteDescription : public GDObj {
public:
    ~SpriteDescription();
};

class TableViewDelegate : public GDObj {
public:
    void willTweenToIndexPath(CCIndexPath&, TableViewCell*, TableView*);
    void didEndTweenToIndexPath(CCIndexPath&, TableView*);
    void TableViewDidDisplayCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*);
};

class TextInputDelegate : public GDObj {
public:
    void textChanged(CCTextInputNode*);
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
    void allowTextInput(CCTextInputNode*);
};

class UploadActionPopup : public GDObj {
public:
    ~UploadActionPopup();
    void keyBackClicked();
};

class VideoOptionsLayer : public GDObj {
public:
    ~VideoOptionsLayer();
    bool init();
    void keyBackClicked();
};

class AchievementManager : public GDObj {
public:
    ~AchievementManager();
    bool init();
};

class AnimatedGameObject : public GDObj {
public:
    ~AnimatedGameObject();
    void setOpacity(unsigned char);
    void resetObject();
    void activateObject();
    void deactivateObject(bool);
    void setObjectColor(cocos2d::_ccColor3B const&);
    void animationFinished(char const*);
    void displayFrameChanged(cocos2d::CCObject*, std::string);
};

class AnimatedShopKeeper : public GDObj {
public:
    ~AnimatedShopKeeper();
    void animationFinished(char const*);
};

class ColorChannelSprite : public GDObj {
public:
    ~ColorChannelSprite();
    bool init();
};

class ConfigureHSVWidget : public GDObj {
public:
    ~ConfigureHSVWidget();
};

class EditorOptionsLayer : public GDObj {
public:
    ~EditorOptionsLayer();
    bool init();
    void setupOptions();
    void onClose(cocos2d::CCObject*);
};

class FriendRequestPopup : public GDObj {
public:
    ~FriendRequestPopup();
    void keyBackClicked();
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
    void onClosePopup(UploadActionPopup*);
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class FriendsProfilePage : public GDObj {
public:
    ~FriendsProfilePage();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void getUserListFinished(cocos2d::CCArray*, UserListType);
    void getUserListFailed(UserListType, GJErrorCode);
    void userListChanged(cocos2d::CCArray*, UserListType);
    void forceReloadList(UserListType);
};

class GJCommentListLayer : public GDObj {
public:
    ~GJCommentListLayer();
};

class GJMoveCommandLayer : public GDObj {
public:
    ~GJMoveCommandLayer();
    void keyBackClicked();
    void valuePopupClosed(ConfigureValuePopup*, float);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class GameEffectsManager : public GDObj {
public:
    ~GameEffectsManager();
};

class GroupCommandObject : public GDObj {
public:
    ~GroupCommandObject();
    bool init();
    void updateTweenAction(float, char const*);
};

class KeybindingsManager : public GDObj {
public:
    ~KeybindingsManager();
    bool init();
};

class LevelSettingsLayer : public GDObj {
public:
    ~LevelSettingsLayer();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void colorSelectClosed(cocos2d::CCNode*);
    void customSongLayerClosed();
    void selectArtClosed(SelectArtLayer*);
};

class AchievementNotifier : public GDObj {
public:
    ~AchievementNotifier();
    bool init();
};

class CCAnimateFrameCache : public GDObj {
public:
    ~CCAnimateFrameCache();
};

class CollisionBlockPopup : public GDObj {
public:
    ~CollisionBlockPopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class CommunityCreditNode : public GDObj {
public:
    ~CommunityCreditNode();
};

class ConfigureValuePopup : public GDObj {
public:
    ~ConfigureValuePopup();
    void keyBackClicked();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
};

class CurrencyRewardLayer : public GDObj {
public:
    ~CurrencyRewardLayer();
    void update(float);
};

class EditGameObjectPopup : public GDObj {
public:
    ~EditGameObjectPopup();
    void keyBackClicked();
    void show();
};

class FRequestProfilePage : public GDObj {
public:
    ~FRequestProfilePage();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void onClosePopup(UploadActionPopup*);
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
    void loadFRequestsFinished(cocos2d::CCArray*, char const*);
    void loadFRequestsFailed(char const*, GJErrorCode);
    void setupPageInfo(std::string, char const*);
    void forceReloadRequests(bool);
};

class GJWriteMessagePopup : public GDObj {
public:
    ~GJWriteMessagePopup();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void uploadMessageFinished(int);
    void uploadMessageFailed(int);
    void onClosePopup(UploadActionPopup*);
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class GauntletSelectLayer : public GDObj {
public:
    ~GauntletSelectLayer();
    void onExit();
    void keyBackClicked();
    void scrollLayerWillScrollToPage(BoomScrollLayer*, int);
    void scrollLayerScrolledToPage(BoomScrollLayer*, int);
    void loadLevelsFinished(cocos2d::CCArray*, char const*);
    void loadLevelsFailed(char const*);
};

class GravityEffectSprite : public GDObj {
public:
    ~GravityEffectSprite();
    bool init();
    void draw();
};

class LevelSettingsObject : public GDObj {
public:
    ~LevelSettingsObject();
    bool init();
};

class MessagesProfilePage : public GDObj {
public:
    ~MessagesProfilePage();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void onClosePopup(UploadActionPopup*);
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
    void loadMessagesFinished(cocos2d::CCArray*, char const*);
    void loadMessagesFailed(char const*, GJErrorCode);
    void forceReloadMessages(bool);
    void setupPageInfo(std::string, char const*);
};

class SetupAnimationPopup : public GDObj {
public:
    ~SetupAnimationPopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class AccountRegisterLayer : public GDObj {
public:
    ~AccountRegisterLayer();
    bool init();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
    void allowTextInput(CCTextInputNode*);
    void registerAccountFinished();
    void registerAccountFailed(AccountError);
};

class CommunityCreditsPage : public GDObj {
public:
    ~CommunityCreditsPage();
    bool init();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void show();
};

class CustomizeObjectLayer : public GDObj {
public:
    ~CustomizeObjectLayer();
    void keyBackClicked();
    void textInputOpened(CCTextInputNode*);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void hsvPopupClosed(HSVWidgetPopup*, cocos2d::_ccHSVValue);
    void colorSelectClosed(cocos2d::CCNode*);
    void colorSetupClosed(int);
};

class GJFollowCommandLayer : public GDObj {
public:
    ~GJFollowCommandLayer();
    void keyBackClicked();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class GJRotateCommandLayer : public GDObj {
public:
    ~GJRotateCommandLayer();
    void keyBackClicked();
    void valuePopupClosed(ConfigureValuePopup*, float);
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class GJSpecialColorSelect : public GDObj {
public:
    ~GJSpecialColorSelect();
    void keyBackClicked();
};

class MusicDelegateHandler : public GDObj {
public:
    ~MusicDelegateHandler();
};

class MusicDownloadManager : public GDObj {
public:
    ~MusicDownloadManager();
    bool init();
};

class ParentalOptionsLayer : public GDObj {
public:
    ~ParentalOptionsLayer();
    bool init();
    void keyBackClicked();
};

class TeleportPortalObject : public GDObj {
public:
    ~TeleportPortalObject();
    void setPosition(cocos2d::CCPoint const&);
    void setRotation(float);
    void setStartPos(cocos2d::CCPoint);
    void getSaveString();
    void addToGroup(int);
    void removeFromGroup(int);
    void setRotation2(float);
    void addToGroup2(int);
    void removeFromGroup2(int);
};

class UploadActionDelegate : public GDObj {
public:
    void uploadActionFinished(int, int);
    void uploadActionFailed(int, int);
};

class CreateGuidelinesLayer : public GDObj {
public:
    ~CreateGuidelinesLayer();
    void update(float);
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void keyDown(cocos2d::enumKeyCodes);
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void keyUp(cocos2d::enumKeyCodes);
};

class GJPFollowCommandLayer : public GDObj {
public:
    ~GJPFollowCommandLayer();
    void keyBackClicked();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class MoreVideoOptionsLayer : public GDObj {
public:
    ~MoreVideoOptionsLayer();
    bool init();
    void keyBackClicked();
};

class MusicDownloadDelegate : public GDObj {
public:
    void loadSongInfoFinished(SongInfoObject*);
    void loadSongInfoFailed(int, GJSongError);
    void downloadSongFinished(SongInfoObject*);
    void downloadSongFailed(int, GJSongError);
};

class SetupTouchTogglePopup : public GDObj {
public:
    ~SetupTouchTogglePopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class ColorSelectLiveOverlay : public GDObj {
public:
    ~ColorSelectLiveOverlay();
    void keyBackClicked();
    void show();
};

class DemonFilterSelectLayer : public GDObj {
public:
    ~DemonFilterSelectLayer();
    bool init();
    void keyBackClicked();
};

class GJAccountSettingsLayer : public GDObj {
public:
    ~GJAccountSettingsLayer();
    void keyBackClicked();
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class SetupAnimSettingsPopup : public GDObj {
public:
    ~SetupAnimSettingsPopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class SetupCountTriggerPopup : public GDObj {
public:
    ~SetupCountTriggerPopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class SetupInstantCountPopup : public GDObj {
public:
    ~SetupInstantCountPopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class SetupObjectTogglePopup : public GDObj {
public:
    ~SetupObjectTogglePopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class SpriteAnimationManager : public GDObj {
public:
    ~SpriteAnimationManager();
};

class BoomScrollLayerDelegate : public GDObj {
public:
    void scrollLayerScrollingStarted(BoomScrollLayer*);
    void scrollLayerScrolledToPage(BoomScrollLayer*, int);
    void scrollLayerMoved(cocos2d::CCPoint);
    void scrollLayerWillScrollToPage(BoomScrollLayer*, int);
};

class SetupPickupTriggerPopup : public GDObj {
public:
    ~SetupPickupTriggerPopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class ShareLevelSettingsLayer : public GDObj {
public:
    ~ShareLevelSettingsLayer();
    void keyBackClicked();
    void numberInputClosed(NumberInputLayer*);
};

class PlatformDownloadDelegate : public GDObj {
public:
    void downloadFinished(char const*);
    void downloadFailed(char const*);
};

class SetupInteractObjectPopup : public GDObj {
public:
    ~SetupInteractObjectPopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class SetupCollisionTriggerPopup : public GDObj {
public:
    ~SetupCollisionTriggerPopup();
    void keyBackClicked();
    void show();
    void textInputClosed(CCTextInputNode*);
    void textChanged(CCTextInputNode*);
    void textInputShouldOffset(CCTextInputNode*, float);
    void textInputReturn(CCTextInputNode*);
};

class UpdateAccountSettingsPopup : public GDObj {
public:
    ~UpdateAccountSettingsPopup();
    void keyBackClicked();
    void updateSettingsFinished();
    void updateSettingsFailed();
};

class Slider : public GDObj {
public:
    ~Slider();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
};

class UILayer : public GDObj {
public:
    ~UILayer();
    bool init();
    void draw();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void keyDown(cocos2d::enumKeyCodes);
    void keyUp(cocos2d::enumKeyCodes);
};

class EditorUI : public GDObj {
public:
    ~EditorUI();
    void draw();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void keyDown(cocos2d::enumKeyCodes);
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void songStateChanged();
    void colorSelectClosed(cocos2d::CCNode*);
    void keyUp(cocos2d::enumKeyCodes);
    void scrollWheel(float, float);
    void angleChangeBegin();
    void angleChangeEnded();
    void angleChanged(float);
    void scaleChangeBegin();
    void scaleChangeEnded();
    void scaleChanged(float);
};

class GManager : public GDObj {
public:
    ~GManager();
    bool init();
    void setup();
    void encodeDataTo(DS_Dictionary*);
    void dataLoaded(DS_Dictionary*);
    void firstLoad();
};

class GameCell : public GDObj {
public:
    ~GameCell();
    bool init();
    void draw();
};

class ListCell : public GDObj {
public:
    ~ListCell();
    bool init();
    void draw();
};

class SongCell : public GDObj {
public:
    ~SongCell();
    bool init();
    void draw();
};

class TextArea : public GDObj {
public:
    ~TextArea();
    void draw();
    void setOpacity(unsigned char);
};

class GJComment : public GDObj {
public:
    ~GJComment();
    bool init();
};

class GJMapPack : public GDObj {
public:
    ~GJMapPack();
    bool init();
};

class InfoLayer : public GDObj {
public:
    ~InfoLayer();
    void registerWithTouchDispatcher();
    void keyBackClicked();
    void show();
    void loadCommentsFinished(cocos2d::CCArray*, char const*);
    void loadCommentsFailed(char const*);
    void setupPageInfo(std::string, char const*);
    void commentUploadFinished(int);
    void commentUploadFailed(int, CommentError);
    void updateUserScoreFinished();
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class KeysLayer : public GDObj {
public:
    ~KeysLayer();
    bool init();
    void keyBackClicked();
    void FLAlert_Clicked(FLAlertLayer*, bool);
    void dialogClosed(DialogLayer*);
};

class LevelCell : public GDObj {
public:
    ~LevelCell();
    bool init();
    void draw();
};

class LevelPage : public GDObj {
public:
    ~LevelPage();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
    void dialogClosed(DialogLayer*);
};

class MenuLayer : public GDObj {
public:
    ~MenuLayer();
    bool init();
    void keyBackClicked();
    void keyDown(cocos2d::enumKeyCodes);
    void googlePlaySignedIn();
    void FLAlert_Clicked(FLAlertLayer*, bool);
};

class PlayLayer : public GDObj {
public:
    ~PlayLayer();
    void update(float);
    void onEnterTransitionDidFinish();
    void onExit();
    void draw();
    void visit();
    void updateTweenAction(float, char const*);
    void updateColor(cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*);
    void flipGravity(PlayerObject*, bool, bool);
    void calculateColorValues(EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*);
    void timeForXPos(float);
    void xPosForTime(float);
    void currencyWillExit(CurrencyRewardLayer*);
    void circleWaveWillBeRemoved(CCCircleWave*);
    void dialogClosed(DialogLayer*);
};

class StatsCell : public GDObj {
public:
    ~StatsCell();
    bool init();
    void draw();
};

class TableView : public GDObj {
public:
    ~TableView();
    void onEnter();
    void onExit();
    void ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void registerWithTouchDispatcher();
    void scrollWheel(float, float);
    void scrllViewWillBeginDecelerating(CCScrollLayerExt*);
    void scrollViewDidEndDecelerating(CCScrollLayerExt*);
    void scrollViewTouchMoving(CCScrollLayerExt*);
    void scrollViewDidEndMoving(CCScrollLayerExt*);
};

