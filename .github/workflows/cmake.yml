name: CMake

on: push

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  # BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", 
            artifacts: [./Examples/build/HelloWorld/Cacao/*.dylib, ./Examples/build/**/*.dylib],
            os: windows-latest,
            build_type: "Release", cc: "cl", cxx: "cl",
          }
        - {
            name: "macOS Latest Clang",
            artifacts: [./Examples/build/HelloWorld/Cacao/*.dll, ./Examples/build/**/*.dll],
            os: macos-latest,
            build_type: "Release", cc: "clang", cxx: "clang++"
          }

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ply

    - name: Configure CMake
      working-directory: ./Examples
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}

    - name: Build
      working-directory: ./Examples
      # Build your program with the given configuration
      run: cmake --build build --config ${{ matrix.config.build_type }}

    - name: Upload ${{ matrix.config.name }} Binaries
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.name }} Binaries
        path: ${{ matrix.config.artifacts }}
