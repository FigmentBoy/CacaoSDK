
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'bodyADDRESS ASSIGN CLASS COLON COMMA CONST IDENT LCURLY LPAREN LTRI NUM OPTCALL RCURLY RPAREN RTRI SEMI STATIC STDCALL TEMPLATEDATA THISCALL UNSIGNED VIRTUAL VOLATILE VOLATILEDATA WHITESPACEempty :body : bodypurebodypure : bodypure bodypurebodypure : class LCURLY info RCURLYclass : CLASS IDENTclass : CLASS IDENT COLON classbaseclassbase : classbase COMMA classbaseclassbase : IDENTinfo : info infoinfo : functioninfo : volatileinfo : membermember : declaration offset SEMImember : declaration SEMIfunction : VIRTUAL purefunction offset SEMIfunction : STATIC purefunction offset SEMIfunction : purefunction offset SEMIpurefunction : declaration parameterpurefunction : declaration parameter CONSTpurefunction : name parameteroffset : ASSIGN ADDRESSparameter : LPAREN pureparameter RPARENpureparameter : pureparameter COMMA pureparameterpureparameter : typepureparameter : declarationpureparameter : emptydeclaration : type namename : IDENTtype : puretypepuretype : puretype templatepuretype : UNSIGNED puretypepuretype : CONST puretypepuretype : puretype CONSTpuretype : IDENTtemplate : LTRI puretemplate RTRIpuretemplate : TEMPLATEDATApuretemplate : TEMPLATEDATA puretemplatepuretemplate : template puretemplatevolatile : VOLATILE purevolatilepurevolatile : LCURLY purevolatile RCURLYpurevolatile : purevolatile purevolatilepurevolatile : VOLATILEDATApurevolatile : SEMI'
    
_lr_action_items = {'CLASS':([0,2,5,25,],[4,4,4,-4,]),'$end':([1,2,5,25,],[0,-2,-3,-4,]),'LCURLY':([3,7,15,31,32,33,34,48,49,54,55,68,74,],[6,-5,32,32,32,-42,-43,-8,-6,32,32,-40,-7,]),'IDENT':([4,6,8,9,10,11,12,14,17,19,20,21,22,23,24,31,33,34,36,38,39,40,44,45,47,51,54,56,59,65,66,67,68,70,71,],[7,20,20,-10,-11,-12,20,20,40,43,-34,-29,40,48,20,-39,-42,-43,-14,40,-32,-34,-30,-33,-31,-17,-41,-13,43,48,-15,-16,-40,40,-35,]),'VIRTUAL':([6,8,9,10,11,24,31,33,34,36,51,54,56,66,67,68,],[12,12,-10,-11,-12,12,-39,-42,-43,-14,-17,-41,-13,-15,-16,-40,]),'STATIC':([6,8,9,10,11,24,31,33,34,36,51,54,56,66,67,68,],[14,14,-10,-11,-12,14,-39,-42,-43,-14,-17,-41,-13,-15,-16,-40,]),'VOLATILE':([6,8,9,10,11,24,31,33,34,36,51,54,56,66,67,68,],[15,15,-10,-11,-12,15,-39,-42,-43,-14,-17,-41,-13,-15,-16,-40,]),'UNSIGNED':([6,8,9,10,11,12,14,17,22,24,31,33,34,36,38,51,54,56,66,67,68,70,],[22,22,-10,-11,-12,22,22,22,22,22,-39,-42,-43,-14,22,-17,-41,-13,-15,-16,-40,22,]),'CONST':([6,8,9,10,11,12,14,17,20,21,22,24,31,33,34,36,37,38,39,40,44,45,47,51,54,56,66,67,68,69,70,71,],[17,17,-10,-11,-12,17,17,17,-34,45,17,17,-39,-42,-43,-14,57,17,45,-34,-30,-33,45,-17,-41,-13,-15,-16,-40,-22,17,-35,]),'COLON':([7,],[23,]),'RCURLY':([8,9,10,11,24,31,33,34,36,51,54,55,56,66,67,68,],[25,-10,-11,-12,-9,-39,-42,-43,-14,-17,-41,68,-13,-15,-16,-40,]),'ASSIGN':([13,16,26,30,37,41,42,43,57,69,],[29,29,29,29,-18,-20,-27,-28,-19,-22,]),'VOLATILEDATA':([15,31,32,33,34,54,55,68,],[33,33,33,-42,-43,33,33,-40,]),'SEMI':([15,16,28,31,32,33,34,35,42,43,50,52,53,54,55,68,],[34,36,51,34,34,-42,-43,56,-27,-28,66,-21,67,34,34,-40,]),'LPAREN':([16,18,20,27,42,43,],[38,38,-28,38,-27,-28,]),'LTRI':([20,21,39,40,44,45,46,47,63,64,71,],[-34,46,46,-34,-30,-33,46,46,46,46,-35,]),'RPAREN':([21,38,39,40,42,43,44,45,47,58,59,60,61,70,71,75,],[-29,-1,-32,-34,-27,-28,-30,-33,-31,69,-24,-25,-26,-1,-35,-23,]),'COMMA':([21,38,39,40,42,43,44,45,47,48,49,58,59,60,61,70,71,74,75,],[-29,-1,-32,-34,-27,-28,-30,-33,-31,-8,65,70,-24,-25,-26,-1,-35,65,70,]),'ADDRESS':([29,],[52,]),'TEMPLATEDATA':([46,63,64,71,],[63,63,63,-35,]),'RTRI':([62,63,72,73,],[71,-36,-37,-38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,],[1,]),'bodypure':([0,2,5,],[2,5,5,]),'class':([0,2,5,],[3,3,3,]),'info':([6,8,24,],[8,24,24,]),'function':([6,8,24,],[9,9,9,]),'volatile':([6,8,24,],[10,10,10,]),'member':([6,8,24,],[11,11,11,]),'purefunction':([6,8,12,14,24,],[13,13,26,30,13,]),'declaration':([6,8,12,14,24,38,70,],[16,16,27,27,16,60,60,]),'name':([6,8,12,14,19,24,59,],[18,18,18,18,42,18,42,]),'type':([6,8,12,14,24,38,70,],[19,19,19,19,19,59,59,]),'puretype':([6,8,12,14,17,22,24,38,70,],[21,21,21,21,39,47,21,21,21,]),'offset':([13,16,26,30,],[28,35,50,53,]),'purevolatile':([15,31,32,54,55,],[31,54,55,54,54,]),'parameter':([16,18,27,],[37,41,37,]),'template':([21,39,46,47,63,64,],[44,44,64,44,64,64,]),'classbase':([23,65,],[49,74,]),'pureparameter':([38,70,],[58,75,]),'empty':([38,70,],[61,61,]),'puretemplate':([46,63,64,],[62,72,73,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',43),
  ('body -> bodypure','body',1,'p_body_body','Parser.py',49),
  ('bodypure -> bodypure bodypure','bodypure',2,'p_bodypure_bodypure','Parser.py',54),
  ('bodypure -> class LCURLY info RCURLY','bodypure',4,'p_bodypure_body','Parser.py',59),
  ('class -> CLASS IDENT','class',2,'p_class_class','Parser.py',72),
  ('class -> CLASS IDENT COLON classbase','class',4,'p_class_based','Parser.py',79),
  ('classbase -> classbase COMMA classbase','classbase',3,'p_classbase_bases','Parser.py',87),
  ('classbase -> IDENT','classbase',1,'p_classbase_base','Parser.py',92),
  ('info -> info info','info',2,'p_info_infos','Parser.py',100),
  ('info -> function','info',1,'p_info_function','Parser.py',105),
  ('info -> volatile','info',1,'p_info_volatile','Parser.py',110),
  ('info -> member','info',1,'p_info_member','Parser.py',115),
  ('member -> declaration offset SEMI','member',3,'p_member_normal','Parser.py',123),
  ('member -> declaration SEMI','member',2,'p_member_offsetless','Parser.py',130),
  ('function -> VIRTUAL purefunction offset SEMI','function',4,'p_function_virtual','Parser.py',139),
  ('function -> STATIC purefunction offset SEMI','function',4,'p_function_static','Parser.py',147),
  ('function -> purefunction offset SEMI','function',3,'p_function_normal','Parser.py',155),
  ('purefunction -> declaration parameter','purefunction',2,'p_purefunction_pure','Parser.py',162),
  ('purefunction -> declaration parameter CONST','purefunction',3,'p_purefunction_const','Parser.py',170),
  ('purefunction -> name parameter','purefunction',2,'p_purefunction_returnless','Parser.py',179),
  ('offset -> ASSIGN ADDRESS','offset',2,'p_offset_offset','Parser.py',190),
  ('parameter -> LPAREN pureparameter RPAREN','parameter',3,'p_parameter_parameter','Parser.py',198),
  ('pureparameter -> pureparameter COMMA pureparameter','pureparameter',3,'p_pureparameter_types','Parser.py',203),
  ('pureparameter -> type','pureparameter',1,'p_pureparameter_type','Parser.py',208),
  ('pureparameter -> declaration','pureparameter',1,'p_pureparameter_declaration','Parser.py',213),
  ('pureparameter -> empty','pureparameter',1,'p_pureparameter_empty','Parser.py',218),
  ('declaration -> type name','declaration',2,'p_declaration_declaration','Parser.py',226),
  ('name -> IDENT','name',1,'p_name_name','Parser.py',233),
  ('type -> puretype','type',1,'p_type_type','Parser.py',243),
  ('puretype -> puretype template','puretype',2,'p_puretype_templated','Parser.py',250),
  ('puretype -> UNSIGNED puretype','puretype',2,'p_puretype_unsigned','Parser.py',255),
  ('puretype -> CONST puretype','puretype',2,'p_puretype_constl','Parser.py',260),
  ('puretype -> puretype CONST','puretype',2,'p_puretype_constr','Parser.py',265),
  ('puretype -> IDENT','puretype',1,'p_puretype_puretype','Parser.py',270),
  ('template -> LTRI puretemplate RTRI','template',3,'p_template_template','Parser.py',278),
  ('puretemplate -> TEMPLATEDATA','puretemplate',1,'p_puretemplate_data','Parser.py',283),
  ('puretemplate -> TEMPLATEDATA puretemplate','puretemplate',2,'p_puretemplate_datas','Parser.py',288),
  ('puretemplate -> template puretemplate','puretemplate',2,'p_puretemplate_recurse','Parser.py',293),
  ('volatile -> VOLATILE purevolatile','volatile',2,'p_volatile_start','Parser.py',301),
  ('purevolatile -> LCURLY purevolatile RCURLY','purevolatile',3,'p_purevolatile_recurse','Parser.py',306),
  ('purevolatile -> purevolatile purevolatile','purevolatile',2,'p_purevolatile_datas','Parser.py',311),
  ('purevolatile -> VOLATILEDATA','purevolatile',1,'p_purevolatile_data','Parser.py',316),
  ('purevolatile -> SEMI','purevolatile',1,'p_purevolatile_semi','Parser.py',321),
]
