// 
// Copyright camila314 & alk1m123 2021. 
// Autogenerated using a python script
//
#pragma once
#include <Base/HeaderBase.hpp>

class AppDelegate;
class CCCircleWaveDelegate;
class TableViewDelegate;
class TableViewDataSource;
class CCScrollLayerExtDelegate;
class GJSpecialColorSelectDelegate;
class TextInputDelegate;
class FLAlertLayerProtocol;
class CCSpritePlus;
class CCMoveCNode;
class CCNodeContainer;
class CCAnimatedSprite;
class CCBlockLayer;
class CCCircleWave;
class CCLightFlash;
class CCMenuItemSpriteExtra;
class CCMenuItemToggler;
class CCScrollLayerExt;
class FLAlertLayer;
class MenuLayer;
class ButtonSprite;
class CCTextInputNode;
class TableView;
class BoomListView;
class CustomListView;
class TableViewCell;

class AppDelegate {
public:
    void bgScale();
    virtual bool applicationDidFinishLaunching();
    virtual void applicationDidEnterBackground();
    virtual void applicationWillEnterForeground();
    virtual bool applicationWillBecomeActive();
    virtual bool applicationWillResignActive();
    virtual void trySaveGame();
    virtual void willSwitchToScene(cocos2d::CCScene*);
    static AppDelegate* get();
    CLASSPARAM(cocos2d::CCScene*, runningScene, 0x28);
};

class CCCircleWaveDelegate {
public:
};

class TableViewDelegate {
public:
    virtual int numberOfRowsInSection(unsigned int, TableView*) {return 0;};
    virtual void numberOfSectionsInTableView(TableView*) {};
    virtual void TableViewCommitCellEditingStyleForRowAtIndexPath(TableView*, TableViewCellEditingStyle, CCIndexPath&) {};
    virtual void cellForRowAtIndexPath(CCIndexPath&, TableView*) {};
};

class TableViewDataSource {
public:
    virtual void willTweenToIndexPath(CCIndexPath&, TableViewCell*, TableView*) {};
    virtual void didEndTweenToIndexPath(CCIndexPath&, TableView*) {};
    virtual void TableViewWillDisplayCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*) {};
    virtual void TableViewDidDisplayCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*) {};
    virtual void TableViewWillReloadCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*) {};
    virtual void cellHeightForRowAtIndexPath(CCIndexPath&, TableView*) {};
    virtual void didSelectRowAtIndexPath(CCIndexPath&, TableView*) {};
};

class CCScrollLayerExtDelegate {
public:
};

class GJSpecialColorSelectDelegate {
public:
};

class TextInputDelegate {
public:
    virtual void textChanged(CCTextInputNode*) {};
    virtual void textInputOpened(CCTextInputNode*) {};
    virtual void textInputClosed(CCTextInputNode*) {};
    virtual void textInputShouldOffset(CCTextInputNode*, float) {};
    virtual void textInputReturn(CCTextInputNode*) {};
    virtual bool allowTextInput(CCTextInputNode*) {return true;};
};

class FLAlertLayerProtocol {
public:
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) {};
};

class CCSpritePlus : public cocos2d::CCSprite {
public:
    bool initWithSpriteFrameName(char const*);
    inline CCSpritePlus* getFollowingSprite() {
        return m_followingSprite;
    };
    inline void setFollowingSprite(CCSpritePlus* setter) {
        m_followingSprite = setter;
    };
    cocos2d::CCArray* m_followers;
    CCSpritePlus* m_followingSprite;
    bool m_hasFollower;
    bool m_propagateScaleChanges;
    bool m_propagateFlipChanges;
};

class CCMoveCNode : public cocos2d::CCNode {
public:
    static CCMoveCNode* create();
    bool init();
    ~CCMoveCNode();
};

class CCNodeContainer : public cocos2d::CCNode {
public:
    static CCNodeContainer* create();
    bool init();
    void visit();
};

class CCAnimatedSprite : public cocos2d::CCSprite {
public:
    void runAnimation(gd::string);
    void tweenToAnimation(gd::string, float);
};

class CCBlockLayer {
public:
    void disableUI();
    void draw();
    void enableUI();
    void enterAnimFinished();
    void enterLayer();
    void exitLayer();
    void hideLayer(bool);
    bool init();
    void layerHidden();
    void layerVisible();
    void registerWithTouchDispatcher();
    void showLayer(bool);
};

class CCCircleWave : public cocos2d::CCNode {
public:
    static CCCircleWave* create(float, float, float, bool);
    static CCCircleWave* create(float, float, float, bool, bool);
    bool init(float, float, float, bool, bool);
    void followObject(cocos2d::CCNode*, bool);
    void updatePosition(float);
    CLASSPARAM(cocos2d::_ccColor3B, color, 0x134);
    CLASSPARAM(CCCircleWaveDelegate*, delegate, 0x150);
};

class CCLightFlash {
public:
    static CCLightFlash* create();
    void playEffect(cocos2d::CCPoint, cocos2d::_ccColor3B, float, float, float, float, float, float, float, float, float, float, float, float, float, float, int, bool, bool, float);
};

class CCMenuItemSpriteExtra {
public:
    static CCMenuItemSpriteExtra* create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
    void setSizeMult(float);
    CCMenuItemSpriteExtra();
    bool init(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
};

class CCMenuItemToggler : public cocos2d::CCMenuItem {
public:
    static CCMenuItemToggler* create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
    void setSizeMult(float);
    void toggle(bool);
    CCMenuItemSpriteExtra* m_onButton;
    CCMenuItemSpriteExtra* m_offButton;
    bool m_toggled;
    bool m_notClickable;
};

class CCScrollLayerExt : public cocos2d::CCLayer {
public:
    virtual ~CCScrollLayerExt();
    virtual void visit();
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    virtual void registerWithTouchDispatcher();
    virtual void preVisitWithClippingRect(cocos2d::CCRect);
    virtual void postVisit();
    void moveToTop();
    void moveToTopWithOffset(float);
};

class FLAlertLayer : public cocos2d::CCLayerColor {
public:
    virtual ~FLAlertLayer();
    virtual void onEnter();
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    virtual void registerWithTouchDispatcher();
    virtual void keyBackClicked();
    virtual void keyDown(cocos2d::enumKeyCodes);
    virtual void show();
    bool init(FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float, bool, float);
    static FLAlertLayer* create(FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float);
    static FLAlertLayer* create(FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float, bool, float);
    static FLAlertLayer* create(char const* title, const gd::string &desc, char const* btn) {
        return FLAlertLayer::create(nullptr, title, desc, btn, nullptr, 300.0);
    };
    cocos2d::CCMenu* m_buttonMenu;
    int m_controlConnected;
    FLAlertLayerProtocol* m_alertProtocol;
    cocos2d::CCNode* m_scene;
    bool m_reverseKeyBack;
    cocos2d::ccColor3B m_color;
    cocos2d::CCLayer* m_mainLayer;
    int m_ZOrder;
    bool m_noElasticity;
    cocos2d::ccColor3B m_color2;
    ButtonSprite* m_button1;
    ButtonSprite* m_button2;
    cocos2d::CCLayerColor* m_scrollingLayer;
    int m_joystickConnected;
    bool m_containsBorder;
    bool m_noAction;
};

class MenuLayer : public cocos2d::CCLayer, public FLAlertLayerProtocol {
public:
    virtual ~MenuLayer();
    virtual bool init();
    virtual void keyBackClicked();
    virtual void keyDown(cocos2d::enumKeyCodes);
    virtual void googlePlaySignedIn();
    virtual void FLAlert_Clicked(FLAlertLayer*, bool);
    void onMoreGames(cocos2d::CCObject*);
    void onQuit(cocos2d::CCObject*);
    void scene(bool);
};

class ButtonSprite : public cocos2d::CCSprite {
public:
    static ButtonSprite* create(char const*);
    static ButtonSprite* create(char const*, int, int, float, bool);
    void updateBGImage(char const*);
    static ButtonSprite* create(char const*, float);
    static ButtonSprite* create(cocos2d::CCSprite*, int, int, float, float, bool, char const*, bool);
};

class CCTextInputNode : public cocos2d::CCLayer, public cocos2d::CCIMEDelegate, public cocos2d::CCTextFieldDelegate {
public:
    static CCTextInputNode* create(float, float, char const*, char const*, int, char const*);
    gd::string getString();
    void refreshLabel();
    void setAllowedChars(gd::string);
    void setLabelNormalColor(cocos2d::_ccColor3B);
    void setLabelPlaceholderColor(cocos2d::_ccColor3B);
    void setLabelPlaceholderScale(float);
    void setMaxLabelScale(float);
    void setMaxLabelWidth(float);
    void setString(gd::string);
    void updateLabel(gd::string);
    void forceOffset();
    virtual void registerWithTouchDispatcher();
    bool init(float, float, char const*, char const*, int, char const*);
    virtual void visit();
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*);
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*);
    virtual void textChanged();
    virtual void onClickTrackNode(bool);
    virtual void keyboardWillShow(cocos2d::CCIMEKeyboardNotificationInfo&);
    virtual void keyboardWillHide(cocos2d::CCIMEKeyboardNotificationInfo&);
    virtual bool onTextFieldInsertText(cocos2d::CCTextFieldTTF*, char const*, int);
    virtual bool onTextFieldAttachWithIME(cocos2d::CCTextFieldTTF*);
    virtual bool onTextFieldDetachWithIME(cocos2d::CCTextFieldTTF*);
    void* m_unknown0;
    gd::string m_caption;
    int m_unknown1;
    bool m_selected;
    gd::string m_allowedChars;
    float m_maxLabelWidth;
    float m_maxLabelScale;
    float m_placeholderScale;
    cocos2d::ccColor3B m_placeholderColor;
    cocos2d::ccColor3B m_textColor;
    cocos2d::CCLabelBMFont* m_cursor;
    cocos2d::CCTextFieldTTF* m_textField;
    TextInputDelegate* m_delegate;
    int m_maxLabelLength;
    cocos2d::CCLabelBMFont* m_placeholderLabel;
    bool m_unknown2;
    bool m_unknown3;
    bool m_forceOffset;
};

class TableView : public CCScrollLayerExt, public CCScrollLayerExtDelegate {
public:
    static TableView* create(TableViewDelegate*, TableViewDataSource*, cocos2d::CCRect);
    void reloadData();
    CLASSPARAM(float, unknown, 0x1c8);
};

class BoomListView : public cocos2d::CCLayer, public TableViewDataSource, public TableViewDelegate {
public:
    static BoomListView* create(cocos2d::CCArray*, float, float, int, BoomListType);
    bool init(cocos2d::CCArray*, float, float, int, BoomListType);
    void draw();
    virtual void setupList();
    virtual void TableViewWillDisplayCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*);
    virtual void cellHeightForRowAtIndexPath(CCIndexPath&, TableView*);
    virtual void didSelectRowAtIndexPath(CCIndexPath&, TableView*);
    virtual int numberOfRowsInSection(unsigned int, TableView*);
    virtual void numberOfSectionsInTableView(TableView*);
    virtual void cellForRowAtIndexPath(CCIndexPath&, TableView*);
    virtual void TableViewCommitCellEditingStyleForRowAtIndexPath(TableView*, TableViewCellEditingStyle, CCIndexPath&);
    virtual void TableViewWillReloadCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*);
    virtual TableViewCell* getListCell(char const*);
    virtual void loadCell(TableViewCell*, int);
    TableView* m_tableView;
    cocos2d::CCArray* m_content;
    BoomListType m_type;
    float m_width;
    float m_height;
    float m_cellHeight;
    int m_page;
};

class CustomListView : public cocos2d::CCLayerColor {
public:
    static CustomListView* create(cocos2d::CCArray*, float, float, int, BoomListType);
    void getListCell(char const*);
    void loadCell(TableViewCell*, int);
    void setupList();
};

class TableViewCell : public cocos2d::CCLayer {
public:
    TableViewCell(char const*, float, float);
    char pad[0x1c0-0x170];
    float m_parentHeight;
    float m_height;
    cocos2d::CCLayerColor* m_backgroundLayer;
    cocos2d::CCLayer* m_mainLayer;
};
