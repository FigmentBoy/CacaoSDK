from Shared import * 

classes = pickle.load(open(picklepath, "rb"))

build_start = """
template<class D>
struct ${cl} : {cl}, InterfaceBase {{
	${cl}(const ${cl}& c) : {cl}(c) {{}}
	${cl}() = delete;
"""

build_member_types = "	setInterfaceTypesOf({id}, {cl}, {name}, {const}, {count}{trail}{types});\n"

build_static_types = "	setInterfaceStaticTypesOf({id}, {cl}, {name}, {const}, {count}{trail}{types});\n"

build_set_address = "	static inline auto address{id} = {address};\n"

build_declare_member = """
	dupable getFunctionOf({cl}, {name}, {const}, {count}{trail}{types}) {{
		return reinterpret_cast<fun{id}>(address{id})(this{trail}{params});
	}}
"""

build_declare_static = """
	dupable static getFunctionOf({cl}, {name}, {const}, {count}{trail}{types}) {{
		return reinterpret_cast<fun{id}>(address{id})({params});
	}}
"""

build_declare_special = """
	dupable void {name}({exprs}) {{
		reinterpret_cast<void(*)(decltype(this){trail}{types})>(address{id})(this{trail}{params});
	}}
"""

build_declare_virtual_win32 = """
	dupable getFunctionOf({cl}, {name}, {const}, {count}{trail}{types}) {{
		return lilac::meta::Function<std::remove_pointer_v<fun{id}>, lilac::meta::x86::Thiscall>\{address{id}\}(this{trail}{params});
	}}
"""

build_declare_member_win32 = """
	dupable getFunctionOf({cl}, {name}, {const}, {count}{trail}{types}) {{
		return lilac::meta::Function<std::remove_pointer_v<fun{id}>, lilac::meta::x86::Membercall>\{address{id}\}(this{trail}{params});
	}}
"""

build_declare_static_win32 = """
	dupable static getFunctionOf({cl}, {name}, {const}, {count}{trail}{types}) {{
		return lilac::meta::Function<std::remove_pointer_v<fun{id}>, lilac::meta::x86::Optcall>\{address{id}\}(this{trail}{params});
	}}
"""

build_declare_special_win32 = """
	dupable void {name}({exprs}) {{
		lilac::meta::Function<void(decltype(this){trail}{types}), lilac::meta::x86::Membercall>\{address{id}\}(this{trail}{params});
	}}
"""


build_body2_start = """
public:
	static bool _apply() {{
"""
	

build_body2_special = """
		if constexpr(&${cl}::{name} != &D::{name}) {{
			modContainer.registerHookEnable(address{id}, FunctionScrapper::addressOfNonVirtual(&D::{name}));
		}}
"""

build_body2_body = """
		if constexpr((mem{id})(&${cl}::{name}) != (der{id})(&D::{name})) {{
			modContainer.registerHookEnable(address{id}, FunctionScrapper::addressOfNonVirtual((der{id})(&D::{name})));
		}}
"""

build_body2_body_static = """
		if constexpr((mem{id})(&${cl}::{name}) != (der{id})(&D::{name})) {{
			modContainer.registerHookEnable(address{id}, FunctionScrapper::addressOfNonVirtual((der{id})(&D::{name})));
		}}
"""

build_body2_body_virtual = """
		if ((mem{id})(&${cl}::{name}) != (der{id})(&D::{name})) {{
			modContainer.registerHookEnable(address{id}, FunctionScrapper::addressOfVirtual((der{id})(&D::{name})));
		}}
"""

build_body2_end = """
		return true;
	}\n"""
build_end = "};\n"




out = """// 
// Copyright camila314 & alk1m123 2022. 
// Autogenerated using a python script
//
#pragma once
#include <InterfaceBase.hpp>
#define dl decltype
#define dv std::declval
namespace Cacao::interfaces {
using namespace cocos2d;
using namespace cocos2d::extension;
"""

def isPublic(func):
	return getNamespace(getNamespace(func)) == "" or getAccessSpecifierOf(func) == "public"

for cl in classes:

	out += build_start.format(
		cl=stripNamespace(cl.name),
	)

	for i, info in enumerate(cl.info):
		if not isinstance(info, GenFunction):
			continue
		if info.getOffset(platform) == "None":
			continue
		if not isPublic(f"{cl.name}::{info.declare.name}"):
			continue

		if info.declare.name in cl.name:
			info.declare.name = "constructor"
			info.declare.type = "void"
			continue

		if '~' in info.declare.name:
			info.declare.name = "destructor"
			info.declare.type = "void"
			continue


		bodytype = build_member_types
		if info.static:
			bodytype = build_static_types
		
		out += bodytype.format(
			name = info.declare.name,
			cl = stripNamespace(cl.name),
			trail = ', ' if len(info.parameters) > 0 else '',
			types = ', '.join(arg.getType(i) for i, arg in enumerate(info.parameters)),
			count = len(info.parameters),
			const = 'const' if info.const else '',
			id = i,
		)

	for i, info in enumerate(cl.info):
		if not isinstance(info, GenFunction):
			continue
		if info.getOffset(platform) == "None":
			continue
		if info.declare.name in ["constructor", "destructor"]:
			pass
		elif not isPublic(f"{cl.name}::{info.declare.name}"):
			continue

		out += build_set_address.format(
			address = info.getAddress(platform, i), 
			id = i,
		)

	for i, info in enumerate(cl.info):
		if not isinstance(info, GenFunction):
			continue
		if info.getOffset(platform) == "None":
			continue
		
		if platform == "Win32":
			bodydeclare = build_declare_member_win32
			if info.static:
				bodydeclare = build_declare_static_win32
			if info.virtual:
				bodydeclare = build_declare_virtual_win32
			if info.declare.name in ["constructor", "destructor"]:
				bodydeclare = build_declare_special_win32
			elif not isPublic(f"{cl.name}::{info.declare.name}"):
				continue
		else:
			bodydeclare = build_declare_member
			if info.static:
				bodydeclare = build_declare_static
			if info.declare.name in ["constructor", "destructor"]:
				bodydeclare = build_declare_special
			elif not isPublic(f"{cl.name}::{info.declare.name}"):
				continue
		
		out += bodydeclare.format(
			name = info.declare.name,
			cl = stripNamespace(cl.name),
			trail = ', ' if len(info.parameters) > 0 else '',
			types = ', '.join(arg.getType(i) for i, arg in enumerate(info.parameters)),
			params = ', '.join(arg.getName(i) for i, arg in enumerate(info.parameters)),
			exprs = ', '.join(arg.getExpr(i) for i, arg in enumerate(info.parameters)),
			count = len(info.parameters),
			const = 'const' if info.const else '',
			id = i,
		)

	out += build_body2_start.format(cl=cl.name)

	for i, info in enumerate(cl.info):
		if not isinstance(info, GenFunction):
			continue

		if info.getOffset(platform) == "None":
			continue

		body2 = build_body2_body
		if info.static:
			body2 = build_body2_body_static
		elif info.virtual:
			body2 = build_body2_body_virtual

		if "constructor" == info.declare.name:
			continue #not dealing with this

		if "constructor" == info.declare.name or "destructor" == info.declare.name:
			info.virtual = False
			info.static = False
			body2 = build_body2_special
			if platform == "Android":
				continue
		elif not isPublic(f"{cl.name}::{info.declare.name}"):
			continue
			
		

		out += body2.format(
			name = info.declare.name,
			type = inheritReturn(info),
			cl = stripNamespace(cl.name),
			offset = info.getAddress(platform, i), 
			params = ', '.join(arg.getType(i) for i, arg in enumerate(info.parameters)),
			count = len(info.parameters),
			id = i,
		)

	out += build_body2_end
	out += build_end
	

out += """
#undef dl
#undef dv
} // namespace Cacao::interfaces
"""

writeIfDifferent("Interface.hpp", out)
