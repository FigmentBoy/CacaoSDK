from Shared import * 

classes = pickle.load(open(picklepath, "rb"))

functionBody = """
using f{id} = {type2}(*)({const}{cl}*{params2});
{type}{cl}::{name}({params}) {const}{{
    {function}
}}
"""

staticBody = """
using f{id} = {type2}(*)({params2});
{type}{cl}::{name}({params}) {{
    {function}
}}
"""

out = """// 
// Copyright camila314 & alk1m123 2021. 
// Autogenerated using a python script
//
#include <Header.hpp>
"""

i = 0
for cl in classes:
    for info in cl.info:
        if isinstance(info, str) and "cocos2d" in cl.name:
            out += "\n" + info.replace("\n    ", "\n") + "\n"
            continue
        if not isinstance(info, CinnamonFunction):
            continue
        body = functionBody
        if info.static:
            body = staticBody
        out += body.format(
            name = info.declare.name,
            type = f"{info.declare.type} " if info.declare.type else "",
            type2 = info.declare.type if info.declare.type else f"{cl.name}*",
            cl = cl.name,
            offset = info.offset, 
            params = ', '.join(arg.getExpr(i) for i, arg in enumerate(info.parameters)),
            params2 = (', ' if not info.static and len(info.parameters) > 0 else "") + ', '.join(arg.getType(i) for i, arg in enumerate(info.parameters)),
            const = "const " if info.const else "",
            id = i,
            function = getFunctionImplementation(cl, info, i),
        )
        i += 1


with open(os.path.join(os.path.dirname(__file__), "..", "Source.cpp"), "w") as f:
    f.write(out)
