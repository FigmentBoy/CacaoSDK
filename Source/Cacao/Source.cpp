// 
// Copyright camila314 & alk1m123 2022. 
// Autogenerated using a python script
//
#include <Interface.hpp>
using namespace Cacao::interfaces;
using namespace cocos2d;
using namespace cocos2d::extension;

getOutoflineFunctionOf(CCActionTween, create, , 4, float, char const*, float, float) {
	return $CCActionTween<CCActionTween>::create(p0, p1, p2, p3);
}

getOutoflineFunctionOf(CCAnimate, create, , 1, cocos2d::CCAnimation*) {
	return $CCAnimate<CCAnimate>::create(p0);
}

getOutoflineFunctionOf(CCAnimation, createWithSpriteFrames, , 2, cocos2d::CCArray*, float) {
	return $CCAnimation<CCAnimation>::createWithSpriteFrames(p0, p1);
}

getOutoflineFunctionOf(CCApplication, getCurrentLanguage, , 0) {
	return reinterpret_cast<$CCApplication<CCApplication>*>(this)->$CCApplication<CCApplication>::getCurrentLanguage();
}

getOutoflineFunctionOf(CCApplication, getTargetPlatform, , 0) {
	return reinterpret_cast<$CCApplication<CCApplication>*>(this)->$CCApplication<CCApplication>::getTargetPlatform();
}

getOutoflineFunctionOf(CCApplication, openURL, , 1, char const*) {
	return reinterpret_cast<$CCApplication<CCApplication>*>(this)->$CCApplication<CCApplication>::openURL(p0);
}

getOutoflineFunctionOf(CCApplication, setAnimationInterval, , 1, double) {
	return reinterpret_cast<$CCApplication<CCApplication>*>(this)->$CCApplication<CCApplication>::setAnimationInterval(p0);
}

getOutoflineFunctionOf(CCApplicationProtocol, gameDidSave, , 0) {
	return reinterpret_cast<$CCApplicationProtocol<CCApplicationProtocol>*>(this)->$CCApplicationProtocol<CCApplicationProtocol>::gameDidSave();
}

getOutoflineFunctionOf(CCArray, addObject, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$CCArray<CCArray>*>(this)->$CCArray<CCArray>::addObject(p0);
}

getOutoflineFunctionOf(CCArray, addObjectNew, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$CCArray<CCArray>*>(this)->$CCArray<CCArray>::addObjectNew(p0);
}

getOutoflineFunctionOf(CCArray, addObjectsFromArray, , 1, cocos2d::CCArray*) {
	return reinterpret_cast<$CCArray<CCArray>*>(this)->$CCArray<CCArray>::addObjectsFromArray(p0);
}

getOutoflineFunctionOf(CCArray, containsObject, const, 1, cocos2d::CCObject*) {
	return reinterpret_cast<const $CCArray<CCArray>*>(this)->$CCArray<CCArray>::containsObject(p0);
}

getOutoflineFunctionOf(CCArray, count, const, 0) {
	return reinterpret_cast<const $CCArray<CCArray>*>(this)->$CCArray<CCArray>::count();
}

getOutoflineFunctionOf(CCArray, create, , 0) {
	return $CCArray<CCArray>::create();
}

getOutoflineFunctionOf(CCArray, createWithObject, , 1, cocos2d::CCObject*) {
	return $CCArray<CCArray>::createWithObject(p0);
}

getOutoflineFunctionOf(CCArray, fastRemoveObject, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$CCArray<CCArray>*>(this)->$CCArray<CCArray>::fastRemoveObject(p0);
}

getOutoflineFunctionOf(CCArray, fastRemoveObjectAtIndex, , 1, unsigned int) {
	return reinterpret_cast<$CCArray<CCArray>*>(this)->$CCArray<CCArray>::fastRemoveObjectAtIndex(p0);
}

getOutoflineFunctionOf(CCArray, fastRemoveObjectAtIndexNew, , 1, unsigned int) {
	return reinterpret_cast<$CCArray<CCArray>*>(this)->$CCArray<CCArray>::fastRemoveObjectAtIndexNew(p0);
}

getOutoflineFunctionOf(CCArray, lastObject, , 0) {
	return reinterpret_cast<$CCArray<CCArray>*>(this)->$CCArray<CCArray>::lastObject();
}

getOutoflineFunctionOf(CCArray, objectAtIndex, , 1, unsigned int) {
	return reinterpret_cast<$CCArray<CCArray>*>(this)->$CCArray<CCArray>::objectAtIndex(p0);
}

getOutoflineFunctionOf(CCArray, removeAllObjects, , 0) {
	return reinterpret_cast<$CCArray<CCArray>*>(this)->$CCArray<CCArray>::removeAllObjects();
}

getOutoflineFunctionOf(CCArray, removeLastObject, , 1, bool) {
	return reinterpret_cast<$CCArray<CCArray>*>(this)->$CCArray<CCArray>::removeLastObject(p0);
}

getOutoflineFunctionOf(CCArray, removeObject, , 2, cocos2d::CCObject*, bool) {
	return reinterpret_cast<$CCArray<CCArray>*>(this)->$CCArray<CCArray>::removeObject(p0, p1);
}

getOutoflineFunctionOf(CCArray, removeObjectAtIndex, , 2, unsigned int, bool) {
	return reinterpret_cast<$CCArray<CCArray>*>(this)->$CCArray<CCArray>::removeObjectAtIndex(p0, p1);
}

getOutoflineFunctionOf(CCArray, stringAtIndex, , 1, unsigned int) {
	return reinterpret_cast<$CCArray<CCArray>*>(this)->$CCArray<CCArray>::stringAtIndex(p0);
}

getOutoflineFunctionOf(CCBezierTo, create, , 2, float, cocos2d::_ccBezierConfig const&) {
	return $CCBezierTo<CCBezierTo>::create(p0, p1);
}

getOutoflineFunctionOf(CCCallFunc, create, , 1, int) {
	return $CCCallFunc<CCCallFunc>::create(p0);
}

getOutoflineFunctionOf(CCClippingNode, create, , 0) {
	return $CCClippingNode<CCClippingNode>::create();
}

getOutoflineFunctionOf(CCClippingNode, create, , 1, cocos2d::CCNode*) {
	return $CCClippingNode<CCClippingNode>::create(p0);
}

getOutoflineFunctionOf(CCClippingNode, getAlphaThreshold, const, 0) {
	return reinterpret_cast<const $CCClippingNode<CCClippingNode>*>(this)->$CCClippingNode<CCClippingNode>::getAlphaThreshold();
}

getOutoflineFunctionOf(CCClippingNode, getStencil, const, 0) {
	return reinterpret_cast<const $CCClippingNode<CCClippingNode>*>(this)->$CCClippingNode<CCClippingNode>::getStencil();
}

getOutoflineFunctionOf(CCClippingNode, isInverted, const, 0) {
	return reinterpret_cast<const $CCClippingNode<CCClippingNode>*>(this)->$CCClippingNode<CCClippingNode>::isInverted();
}

getOutoflineFunctionOf(CCClippingNode, onEnter, , 0) {
	return reinterpret_cast<$CCClippingNode<CCClippingNode>*>(this)->$CCClippingNode<CCClippingNode>::onEnter();
}

getOutoflineFunctionOf(CCClippingNode, onEnterTransitionDidFinish, , 0) {
	return reinterpret_cast<$CCClippingNode<CCClippingNode>*>(this)->$CCClippingNode<CCClippingNode>::onEnterTransitionDidFinish();
}

getOutoflineFunctionOf(CCClippingNode, onExit, , 0) {
	return reinterpret_cast<$CCClippingNode<CCClippingNode>*>(this)->$CCClippingNode<CCClippingNode>::onExit();
}

getOutoflineFunctionOf(CCClippingNode, onExitTransitionDidStart, , 0) {
	return reinterpret_cast<$CCClippingNode<CCClippingNode>*>(this)->$CCClippingNode<CCClippingNode>::onExitTransitionDidStart();
}

getOutoflineFunctionOf(CCClippingNode, setAlphaThreshold, , 1, float) {
	return reinterpret_cast<$CCClippingNode<CCClippingNode>*>(this)->$CCClippingNode<CCClippingNode>::setAlphaThreshold(p0);
}

getOutoflineFunctionOf(CCClippingNode, setInverted, , 1, bool) {
	return reinterpret_cast<$CCClippingNode<CCClippingNode>*>(this)->$CCClippingNode<CCClippingNode>::setInverted(p0);
}

getOutoflineFunctionOf(CCClippingNode, setStencil, , 1, cocos2d::CCNode*) {
	return reinterpret_cast<$CCClippingNode<CCClippingNode>*>(this)->$CCClippingNode<CCClippingNode>::setStencil(p0);
}

getOutoflineFunctionOf(CCClippingNode, visit, , 0) {
	return reinterpret_cast<$CCClippingNode<CCClippingNode>*>(this)->$CCClippingNode<CCClippingNode>::visit();
}

cocos2d::CCObject* cocos2d::CCCopying::copyWithZone(cocos2d::CCZone*) {
	// 2 people complimented my hair today i feel happy
	//
	// add 3 to that c:
	return 0;
}


getOutoflineFunctionOf(CCDelayTime, create, , 1, float) {
	return $CCDelayTime<CCDelayTime>::create(p0);
}

getOutoflineFunctionOf(CCDictionary, allKeys, , 0) {
	return reinterpret_cast<$CCDictionary<CCDictionary>*>(this)->$CCDictionary<CCDictionary>::allKeys();
}

getOutoflineFunctionOf(CCDictionary, count, , 0) {
	return reinterpret_cast<$CCDictionary<CCDictionary>*>(this)->$CCDictionary<CCDictionary>::count();
}

getOutoflineFunctionOf(CCDictionary, create, , 0) {
	return $CCDictionary<CCDictionary>::create();
}

getOutoflineFunctionOf(CCDictionary, objectForKey, , 1, intptr_t) {
	return reinterpret_cast<$CCDictionary<CCDictionary>*>(this)->$CCDictionary<CCDictionary>::objectForKey(p0);
}

getOutoflineFunctionOf(CCDictionary, objectForKey, , 1, gd::string const&) {
	return reinterpret_cast<$CCDictionary<CCDictionary>*>(this)->$CCDictionary<CCDictionary>::objectForKey(p0);
}

getOutoflineFunctionOf(CCDictionary, removeAllObjects, , 0) {
	return reinterpret_cast<$CCDictionary<CCDictionary>*>(this)->$CCDictionary<CCDictionary>::removeAllObjects();
}

getOutoflineFunctionOf(CCDictionary, removeObjectForKey, , 1, intptr_t) {
	return reinterpret_cast<$CCDictionary<CCDictionary>*>(this)->$CCDictionary<CCDictionary>::removeObjectForKey(p0);
}

getOutoflineFunctionOf(CCDictionary, setObject, , 2, cocos2d::CCObject*, intptr_t) {
	return reinterpret_cast<$CCDictionary<CCDictionary>*>(this)->$CCDictionary<CCDictionary>::setObject(p0, p1);
}

getOutoflineFunctionOf(CCDictionary, setObject, , 2, cocos2d::CCObject*, gd::string const&) {
	return reinterpret_cast<$CCDictionary<CCDictionary>*>(this)->$CCDictionary<CCDictionary>::setObject(p0, p1);
}

getOutoflineFunctionOf(CCDictionary, valueForKey, , 1, intptr_t) {
	return reinterpret_cast<$CCDictionary<CCDictionary>*>(this)->$CCDictionary<CCDictionary>::valueForKey(p0);
}

getOutoflineFunctionOf(CCDictionary, valueForKey, , 1, gd::string const&) {
	return reinterpret_cast<$CCDictionary<CCDictionary>*>(this)->$CCDictionary<CCDictionary>::valueForKey(p0);
}

CCDirector::~CCDirector() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCDirector<CCDirector>*>(this)->destructor();
}

getOutoflineFunctionOf(CCDirector, init, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::init();
}

getOutoflineFunctionOf(CCDirector, getScheduler, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::getScheduler();
}

getOutoflineFunctionOf(CCDirector, setScheduler, , 1, cocos2d::CCScheduler*) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::setScheduler(p0);
}

getOutoflineFunctionOf(CCDirector, getActionManager, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::getActionManager();
}

getOutoflineFunctionOf(CCDirector, setActionManager, , 1, cocos2d::CCActionManager*) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::setActionManager(p0);
}

getOutoflineFunctionOf(CCDirector, getTouchDispatcher, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::getTouchDispatcher();
}

getOutoflineFunctionOf(CCDirector, setTouchDispatcher, , 1, cocos2d::CCTouchDispatcher*) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::setTouchDispatcher(p0);
}

getOutoflineFunctionOf(CCDirector, getKeypadDispatcher, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::getKeypadDispatcher();
}

getOutoflineFunctionOf(CCDirector, setKeypadDispatcher, , 1, cocos2d::CCKeypadDispatcher*) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::setKeypadDispatcher(p0);
}

getOutoflineFunctionOf(CCDirector, getKeyboardDispatcher, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::getKeyboardDispatcher();
}

getOutoflineFunctionOf(CCDirector, setKeyboardDispatcher, , 1, cocos2d::CCKeyboardDispatcher*) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::setKeyboardDispatcher(p0);
}

getOutoflineFunctionOf(CCDirector, getMouseDispatcher, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::getMouseDispatcher();
}

getOutoflineFunctionOf(CCDirector, setMouseDispatcher, , 1, cocos2d::CCMouseDispatcher*) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::setMouseDispatcher(p0);
}

getOutoflineFunctionOf(CCDirector, getAccelerometer, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::getAccelerometer();
}

getOutoflineFunctionOf(CCDirector, setAccelerometer, , 1, cocos2d::CCAccelerometer*) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::setAccelerometer(p0);
}

getOutoflineFunctionOf(CCDirector, getDeltaTime, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::getDeltaTime();
}

getOutoflineFunctionOf(CCDirector, getSceneDelegate, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::getSceneDelegate();
}

getOutoflineFunctionOf(CCDirector, setSceneDelegate, , 1, cocos2d::CCSceneDelegate*) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::setSceneDelegate(p0);
}

getOutoflineFunctionOf(CCDirector, getWinSize, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::getWinSize();
}

getOutoflineFunctionOf(CCDirector, pushScene, , 1, cocos2d::CCScene*) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::pushScene(p0);
}

getOutoflineFunctionOf(CCDirector, replaceScene, , 1, cocos2d::CCScene*) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::replaceScene(p0);
}

getOutoflineFunctionOf(CCDirector, resetSmoothFixCounter, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::resetSmoothFixCounter();
}

getOutoflineFunctionOf(CCDirector, sharedDirector, , 0) {
	return $CCDirector<CCDirector>::sharedDirector();
}

getOutoflineFunctionOf(CCDirector, calculateDeltaTime, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::calculateDeltaTime();
}

getOutoflineFunctionOf(CCDirector, calculateMPF, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::calculateMPF();
}

getOutoflineFunctionOf(CCDirector, convertToGL, , 1, cocos2d::CCPoint const&) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::convertToGL(p0);
}

getOutoflineFunctionOf(CCDirector, drawScene, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::drawScene();
}

getOutoflineFunctionOf(CCDirector, setNextScene, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::setNextScene();
}

getOutoflineFunctionOf(CCDirector, showStats, , 0) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::showStats();
}

getOutoflineFunctionOf(CCDirector, updateContentScale, , 1, cocos2d::TextureQuality) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::updateContentScale(p0);
}

getOutoflineFunctionOf(CCDirector, popSceneWithTransition, , 2, float, cocos2d::PopTransition) {
	return reinterpret_cast<$CCDirector<CCDirector>*>(this)->$CCDirector<CCDirector>::popSceneWithTransition(p0, p1);
}

getOutoflineFunctionOf(CCDrawNode, clear, , 0) {
	return reinterpret_cast<$CCDrawNode<CCDrawNode>*>(this)->$CCDrawNode<CCDrawNode>::clear();
}

getOutoflineFunctionOf(CCDrawNode, create, , 0) {
	return $CCDrawNode<CCDrawNode>::create();
}

getOutoflineFunctionOf(CCDrawNode, drawPolygon, , 5, cocos2d::CCPoint*, unsigned int, cocos2d::_ccColor4F const&, float, cocos2d::_ccColor4F const&) {
	return reinterpret_cast<$CCDrawNode<CCDrawNode>*>(this)->$CCDrawNode<CCDrawNode>::drawPolygon(p0, p1, p2, p3, p4);
}

getOutoflineFunctionOf(CCDrawNode, drawSegment, , 4, cocos2d::CCPoint const&, cocos2d::CCPoint const&, float, cocos2d::_ccColor4F const&) {
	return reinterpret_cast<$CCDrawNode<CCDrawNode>*>(this)->$CCDrawNode<CCDrawNode>::drawSegment(p0, p1, p2, p3);
}

getOutoflineFunctionOf(CCDrawNode, getBlendFunc, const, 0) {
	return reinterpret_cast<const $CCDrawNode<CCDrawNode>*>(this)->$CCDrawNode<CCDrawNode>::getBlendFunc();
}

getOutoflineFunctionOf(CCDrawNode, init, , 0) {
	return reinterpret_cast<$CCDrawNode<CCDrawNode>*>(this)->$CCDrawNode<CCDrawNode>::init();
}

getOutoflineFunctionOf(CCDrawNode, setBlendFunc, , 1, cocos2d::_ccBlendFunc const&) {
	return reinterpret_cast<$CCDrawNode<CCDrawNode>*>(this)->$CCDrawNode<CCDrawNode>::setBlendFunc(p0);
}

getOutoflineFunctionOf(CCDrawNode, draw, , 0) {
	return reinterpret_cast<$CCDrawNode<CCDrawNode>*>(this)->$CCDrawNode<CCDrawNode>::draw();
}

CCDrawNode::~CCDrawNode() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCDrawNode<CCDrawNode>*>(this)->destructor();
}

getOutoflineFunctionOf(CCEaseElasticOut, create, , 2, cocos2d::CCActionInterval*, float) {
	return $CCEaseElasticOut<CCEaseElasticOut>::create(p0, p1);
}

getOutoflineFunctionOf(CCEaseIn, create, , 2, cocos2d::CCActionInterval*, float) {
	return $CCEaseIn<CCEaseIn>::create(p0, p1);
}

getOutoflineFunctionOf(CCEaseInOut, create, , 2, cocos2d::CCActionInterval*, float) {
	return $CCEaseInOut<CCEaseInOut>::create(p0, p1);
}

getOutoflineFunctionOf(CCEaseOut, create, , 2, cocos2d::CCActionInterval*, float) {
	return $CCEaseOut<CCEaseOut>::create(p0, p1);
}

getOutoflineFunctionOf(CCFadeOut, create, , 1, float) {
	return $CCFadeOut<CCFadeOut>::create(p0);
}

getOutoflineFunctionOf(CCFadeTo, create, , 2, float, unsigned char) {
	return $CCFadeTo<CCFadeTo>::create(p0, p1);
}

getOutoflineFunctionOf(CCHide, create, , 0) {
	return $CCHide<CCHide>::create();
}

CCIMEDelegate::~CCIMEDelegate() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCIMEDelegate<CCIMEDelegate>*>(this)->destructor();
}

getOutoflineFunctionOf(CCIMEDelegate, attachWithIME, , 0) {
	return reinterpret_cast<$CCIMEDelegate<CCIMEDelegate>*>(this)->$CCIMEDelegate<CCIMEDelegate>::attachWithIME();
}

getOutoflineFunctionOf(CCIMEDelegate, detachWithIME, , 0) {
	return reinterpret_cast<$CCIMEDelegate<CCIMEDelegate>*>(this)->$CCIMEDelegate<CCIMEDelegate>::detachWithIME();
}

CCIMEDelegate::CCIMEDelegate() : CCIMEDelegate(*this) {
	reinterpret_cast<$CCIMEDelegate<CCIMEDelegate>*>(this)->constructor();
}

CCImage::CCImage() : CCImage(*this) {
	reinterpret_cast<$CCImage<CCImage>*>(this)->constructor();
}

CCImage::~CCImage() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCImage<CCImage>*>(this)->destructor();
}

getOutoflineFunctionOf(CCImage, initWithImageData, , 6, void*, int, cocos2d::CCImage::EImageFormat, int, int, int) {
	return reinterpret_cast<$CCImage<CCImage>*>(this)->$CCImage<CCImage>::initWithImageData(p0, p1, p2, p3, p4, p5);
}

void cocos2d::CCKeyboardDelegate::keyDown(cocos2d::enumKeyCodes) {};

void cocos2d::CCKeyboardDelegate::keyUp(cocos2d::enumKeyCodes) {};

cocos2d::CCKeyboardDelegate::CCKeyboardDelegate() {};

getOutoflineFunctionOf(CCKeyboardDispatcher, dispatchKeyboardMSG, , 2, cocos2d::enumKeyCodes, bool) {
	return reinterpret_cast<$CCKeyboardDispatcher<CCKeyboardDispatcher>*>(this)->$CCKeyboardDispatcher<CCKeyboardDispatcher>::dispatchKeyboardMSG(p0, p1);
}

getOutoflineFunctionOf(CCKeyboardHandler, handlerWithDelegate, , 1, cocos2d::CCKeyboardDelegate*) {
	return $CCKeyboardHandler<CCKeyboardHandler>::handlerWithDelegate(p0);
}

getOutoflineFunctionOf(CCKeyboardHandler, initWithDelegate, , 1, cocos2d::CCKeyboardDelegate*) {
	return reinterpret_cast<$CCKeyboardHandler<CCKeyboardHandler>*>(this)->$CCKeyboardHandler<CCKeyboardHandler>::initWithDelegate(p0);
}

CCKeyboardHandler::~CCKeyboardHandler() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCKeyboardHandler<CCKeyboardHandler>*>(this)->destructor();
}

getOutoflineFunctionOf(CCKeypadHandler, handlerWithDelegate, , 1, cocos2d::CCKeypadDelegate*) {
	return $CCKeypadHandler<CCKeypadHandler>::handlerWithDelegate(p0);
}

getOutoflineFunctionOf(CCKeypadHandler, initWithDelegate, , 1, cocos2d::CCKeypadDelegate*) {
	return reinterpret_cast<$CCKeypadHandler<CCKeypadHandler>*>(this)->$CCKeypadHandler<CCKeypadHandler>::initWithDelegate(p0);
}

CCKeypadHandler::~CCKeypadHandler() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCKeypadHandler<CCKeypadHandler>*>(this)->destructor();
}

getOutoflineFunctionOf(CCKeypadHandler, getDelegate, , 0) {
	return reinterpret_cast<$CCKeypadHandler<CCKeypadHandler>*>(this)->$CCKeypadHandler<CCKeypadHandler>::getDelegate();
}

getOutoflineFunctionOf(CCLabelBMFont, create, , 2, char const*, char const*) {
	return $CCLabelBMFont<CCLabelBMFont>::create(p0, p1);
}

getOutoflineFunctionOf(CCLabelBMFont, limitLabelWidth, , 3, float, float, float) {
	return reinterpret_cast<$CCLabelBMFont<CCLabelBMFont>*>(this)->$CCLabelBMFont<CCLabelBMFont>::limitLabelWidth(p0, p1, p2);
}

getOutoflineFunctionOf(CCLabelBMFont, setScale, , 1, float) {
	return reinterpret_cast<$CCLabelBMFont<CCLabelBMFont>*>(this)->$CCLabelBMFont<CCLabelBMFont>::setScale(p0);
}

getOutoflineFunctionOf(CCLabelBMFont, setString, , 2, char const*, bool) {
	return reinterpret_cast<$CCLabelBMFont<CCLabelBMFont>*>(this)->$CCLabelBMFont<CCLabelBMFont>::setString(p0, p1);
}

getOutoflineFunctionOf(CCLabelBMFont, setAnchorPoint, , 1, cocos2d::CCPoint const&) {
	return reinterpret_cast<$CCLabelBMFont<CCLabelBMFont>*>(this)->$CCLabelBMFont<CCLabelBMFont>::setAnchorPoint(p0);
}

getOutoflineFunctionOf(CCLabelTTF, updateTexture, , 0) {
	return reinterpret_cast<$CCLabelTTF<CCLabelTTF>*>(this)->$CCLabelTTF<CCLabelTTF>::updateTexture();
}

CCLayer::CCLayer() : CCLayer(*this) {
	reinterpret_cast<$CCLayer<CCLayer>*>(this)->constructor();
}

getOutoflineFunctionOf(CCLayer, ccTouchBegan, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::ccTouchBegan(p0, p1);
}

getOutoflineFunctionOf(CCLayer, ccTouchCancelled, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::ccTouchCancelled(p0, p1);
}

getOutoflineFunctionOf(CCLayer, ccTouchEnded, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::ccTouchEnded(p0, p1);
}

getOutoflineFunctionOf(CCLayer, ccTouchMoved, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::ccTouchMoved(p0, p1);
}

getOutoflineFunctionOf(CCLayer, ccTouchesBegan, , 2, cocos2d::CCSet*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::ccTouchesBegan(p0, p1);
}

getOutoflineFunctionOf(CCLayer, ccTouchesCancelled, , 2, cocos2d::CCSet*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::ccTouchesCancelled(p0, p1);
}

getOutoflineFunctionOf(CCLayer, ccTouchesEnded, , 2, cocos2d::CCSet*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::ccTouchesEnded(p0, p1);
}

getOutoflineFunctionOf(CCLayer, ccTouchesMoved, , 2, cocos2d::CCSet*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::ccTouchesMoved(p0, p1);
}

getOutoflineFunctionOf(CCLayer, create, , 0) {
	return $CCLayer<CCLayer>::create();
}

getOutoflineFunctionOf(CCLayer, didAccelerate, , 1, cocos2d::CCAcceleration*) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::didAccelerate(p0);
}

getOutoflineFunctionOf(CCLayer, getTouchMode, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::getTouchMode();
}

getOutoflineFunctionOf(CCLayer, getTouchPriority, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::getTouchPriority();
}

getOutoflineFunctionOf(CCLayer, init, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::init();
}

getOutoflineFunctionOf(CCLayer, isAccelerometerEnabled, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::isAccelerometerEnabled();
}

getOutoflineFunctionOf(CCLayer, isKeyboardEnabled, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::isKeyboardEnabled();
}

getOutoflineFunctionOf(CCLayer, isKeypadEnabled, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::isKeypadEnabled();
}

getOutoflineFunctionOf(CCLayer, isMouseEnabled, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::isMouseEnabled();
}

getOutoflineFunctionOf(CCLayer, isTouchEnabled, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::isTouchEnabled();
}

getOutoflineFunctionOf(CCLayer, keyBackClicked, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::keyBackClicked();
}

getOutoflineFunctionOf(CCLayer, keyDown, , 1, cocos2d::enumKeyCodes) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::keyDown(p0);
}

getOutoflineFunctionOf(CCLayer, keyMenuClicked, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::keyMenuClicked();
}

getOutoflineFunctionOf(CCLayer, onEnter, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::onEnter();
}

getOutoflineFunctionOf(CCLayer, onEnterTransitionDidFinish, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::onEnterTransitionDidFinish();
}

getOutoflineFunctionOf(CCLayer, onExit, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::onExit();
}

getOutoflineFunctionOf(CCLayer, registerScriptTouchHandler, , 4, int, bool, int, bool) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::registerScriptTouchHandler(p0, p1, p2, p3);
}

getOutoflineFunctionOf(CCLayer, registerWithTouchDispatcher, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::registerWithTouchDispatcher();
}

getOutoflineFunctionOf(CCLayer, setAccelerometerEnabled, , 1, bool) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::setAccelerometerEnabled(p0);
}

getOutoflineFunctionOf(CCLayer, setAccelerometerInterval, , 1, double) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::setAccelerometerInterval(p0);
}

getOutoflineFunctionOf(CCLayer, setKeyboardEnabled, , 1, bool) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::setKeyboardEnabled(p0);
}

getOutoflineFunctionOf(CCLayer, setKeypadEnabled, , 1, bool) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::setKeypadEnabled(p0);
}

getOutoflineFunctionOf(CCLayer, setMouseEnabled, , 1, bool) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::setMouseEnabled(p0);
}

getOutoflineFunctionOf(CCLayer, setTouchEnabled, , 1, bool) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::setTouchEnabled(p0);
}

getOutoflineFunctionOf(CCLayer, setTouchMode, , 1, cocos2d::ccTouchesMode) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::setTouchMode(p0);
}

getOutoflineFunctionOf(CCLayer, setTouchPriority, , 1, int) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::setTouchPriority(p0);
}

getOutoflineFunctionOf(CCLayer, unregisterScriptTouchHandler, , 0) {
	return reinterpret_cast<$CCLayer<CCLayer>*>(this)->$CCLayer<CCLayer>::unregisterScriptTouchHandler();
}

CCLayer::~CCLayer() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCLayer<CCLayer>*>(this)->destructor();
}

CCLayerColor::CCLayerColor() : CCLayerColor(*this) {
	reinterpret_cast<$CCLayerColor<CCLayerColor>*>(this)->constructor();
}

getOutoflineFunctionOf(CCLayerColor, create, , 3, cocos2d::_ccColor4B const&, float, float) {
	return $CCLayerColor<CCLayerColor>::create(p0, p1, p2);
}

getOutoflineFunctionOf(CCLayerColor, draw, , 0) {
	return reinterpret_cast<$CCLayerColor<CCLayerColor>*>(this)->$CCLayerColor<CCLayerColor>::draw();
}

getOutoflineFunctionOf(CCLayerColor, getBlendFunc, , 0) {
	return reinterpret_cast<$CCLayerColor<CCLayerColor>*>(this)->$CCLayerColor<CCLayerColor>::getBlendFunc();
}

getOutoflineFunctionOf(CCLayerColor, init, , 0) {
	return reinterpret_cast<$CCLayerColor<CCLayerColor>*>(this)->$CCLayerColor<CCLayerColor>::init();
}

getOutoflineFunctionOf(CCLayerColor, initWithColor, , 1, cocos2d::_ccColor4B const&) {
	return reinterpret_cast<$CCLayerColor<CCLayerColor>*>(this)->$CCLayerColor<CCLayerColor>::initWithColor(p0);
}

getOutoflineFunctionOf(CCLayerColor, initWithColor, , 3, cocos2d::_ccColor4B const&, float, float) {
	return reinterpret_cast<$CCLayerColor<CCLayerColor>*>(this)->$CCLayerColor<CCLayerColor>::initWithColor(p0, p1, p2);
}

getOutoflineFunctionOf(CCLayerColor, setBlendFunc, , 1, cocos2d::_ccBlendFunc) {
	return reinterpret_cast<$CCLayerColor<CCLayerColor>*>(this)->$CCLayerColor<CCLayerColor>::setBlendFunc(p0);
}

getOutoflineFunctionOf(CCLayerColor, setColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$CCLayerColor<CCLayerColor>*>(this)->$CCLayerColor<CCLayerColor>::setColor(p0);
}

getOutoflineFunctionOf(CCLayerColor, setContentSize, , 1, cocos2d::CCSize const&) {
	return reinterpret_cast<$CCLayerColor<CCLayerColor>*>(this)->$CCLayerColor<CCLayerColor>::setContentSize(p0);
}

getOutoflineFunctionOf(CCLayerColor, setOpacity, , 1, unsigned char) {
	return reinterpret_cast<$CCLayerColor<CCLayerColor>*>(this)->$CCLayerColor<CCLayerColor>::setOpacity(p0);
}

getOutoflineFunctionOf(CCLayerColor, updateColor, , 0) {
	return reinterpret_cast<$CCLayerColor<CCLayerColor>*>(this)->$CCLayerColor<CCLayerColor>::updateColor();
}

CCLayerColor::~CCLayerColor() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCLayerColor<CCLayerColor>*>(this)->destructor();
}

CCLayerRGBA::CCLayerRGBA() : CCLayerRGBA(*this) {
	reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->constructor();
}

getOutoflineFunctionOf(CCLayerRGBA, init, , 0) {
	return reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->$CCLayerRGBA<CCLayerRGBA>::init();
}

getOutoflineFunctionOf(CCLayerRGBA, getOpacity, , 0) {
	return reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->$CCLayerRGBA<CCLayerRGBA>::getOpacity();
}

getOutoflineFunctionOf(CCLayerRGBA, getDisplayedOpacity, , 0) {
	return reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->$CCLayerRGBA<CCLayerRGBA>::getDisplayedOpacity();
}

getOutoflineFunctionOf(CCLayerRGBA, setOpacity, , 1, unsigned char) {
	return reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->$CCLayerRGBA<CCLayerRGBA>::setOpacity(p0);
}

getOutoflineFunctionOf(CCLayerRGBA, updateDisplayedOpacity, , 1, unsigned char) {
	return reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->$CCLayerRGBA<CCLayerRGBA>::updateDisplayedOpacity(p0);
}

getOutoflineFunctionOf(CCLayerRGBA, isCascadeOpacityEnabled, , 0) {
	return reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->$CCLayerRGBA<CCLayerRGBA>::isCascadeOpacityEnabled();
}

getOutoflineFunctionOf(CCLayerRGBA, setCascadeOpacityEnabled, , 1, bool) {
	return reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->$CCLayerRGBA<CCLayerRGBA>::setCascadeOpacityEnabled(p0);
}

getOutoflineFunctionOf(CCLayerRGBA, getColor, , 0) {
	return reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->$CCLayerRGBA<CCLayerRGBA>::getColor();
}

getOutoflineFunctionOf(CCLayerRGBA, getDisplayedColor, , 0) {
	return reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->$CCLayerRGBA<CCLayerRGBA>::getDisplayedColor();
}

getOutoflineFunctionOf(CCLayerRGBA, setColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->$CCLayerRGBA<CCLayerRGBA>::setColor(p0);
}

getOutoflineFunctionOf(CCLayerRGBA, updateDisplayedColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->$CCLayerRGBA<CCLayerRGBA>::updateDisplayedColor(p0);
}

getOutoflineFunctionOf(CCLayerRGBA, isCascadeColorEnabled, , 0) {
	return reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->$CCLayerRGBA<CCLayerRGBA>::isCascadeColorEnabled();
}

getOutoflineFunctionOf(CCLayerRGBA, setCascadeColorEnabled, , 1, bool) {
	return reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->$CCLayerRGBA<CCLayerRGBA>::setCascadeColorEnabled(p0);
}

CCLayerRGBA::~CCLayerRGBA() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCLayerRGBA<CCLayerRGBA>*>(this)->destructor();
}

getOutoflineFunctionOf(CCMenu, alignItemsHorizontallyWithPadding, , 1, float) {
	return reinterpret_cast<$CCMenu<CCMenu>*>(this)->$CCMenu<CCMenu>::alignItemsHorizontallyWithPadding(p0);
}

getOutoflineFunctionOf(CCMenu, alignItemsVerticallyWithPadding, , 1, float) {
	return reinterpret_cast<$CCMenu<CCMenu>*>(this)->$CCMenu<CCMenu>::alignItemsVerticallyWithPadding(p0);
}

getOutoflineFunctionOf(CCMenu, create, , 0) {
	return $CCMenu<CCMenu>::create();
}

getOutoflineFunctionOf(CCMenu, createWithArray, , 1, cocos2d::CCArray*) {
	return $CCMenu<CCMenu>::createWithArray(p0);
}

getOutoflineFunctionOf(CCMenu, createWithItem, , 1, cocos2d::CCMenuItem*) {
	return $CCMenu<CCMenu>::createWithItem(p0);
}

CCMenuItem::~CCMenuItem() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCMenuItem<CCMenuItem>*>(this)->destructor();
}

getOutoflineFunctionOf(CCMenuItem, activate, , 0) {
	return reinterpret_cast<$CCMenuItem<CCMenuItem>*>(this)->$CCMenuItem<CCMenuItem>::activate();
}

getOutoflineFunctionOf(CCMenuItem, selected, , 0) {
	return reinterpret_cast<$CCMenuItem<CCMenuItem>*>(this)->$CCMenuItem<CCMenuItem>::selected();
}

getOutoflineFunctionOf(CCMenuItem, unselected, , 0) {
	return reinterpret_cast<$CCMenuItem<CCMenuItem>*>(this)->$CCMenuItem<CCMenuItem>::unselected();
}

getOutoflineFunctionOf(CCMenuItem, registerScriptTapHandler, , 1, int) {
	return reinterpret_cast<$CCMenuItem<CCMenuItem>*>(this)->$CCMenuItem<CCMenuItem>::registerScriptTapHandler(p0);
}

getOutoflineFunctionOf(CCMenuItem, unregisterScriptTapHandler, , 0) {
	return reinterpret_cast<$CCMenuItem<CCMenuItem>*>(this)->$CCMenuItem<CCMenuItem>::unregisterScriptTapHandler();
}

getOutoflineFunctionOf(CCMenuItem, isEnabled, , 0) {
	return reinterpret_cast<$CCMenuItem<CCMenuItem>*>(this)->$CCMenuItem<CCMenuItem>::isEnabled();
}

getOutoflineFunctionOf(CCMenuItem, setEnabled, , 1, bool) {
	return reinterpret_cast<$CCMenuItem<CCMenuItem>*>(this)->$CCMenuItem<CCMenuItem>::setEnabled(p0);
}

getOutoflineFunctionOf(CCMenuItem, isSelected, , 0) {
	return reinterpret_cast<$CCMenuItem<CCMenuItem>*>(this)->$CCMenuItem<CCMenuItem>::isSelected();
}

getOutoflineFunctionOf(CCMenuItemImage, init, , 0) {
	return reinterpret_cast<$CCMenuItemImage<CCMenuItemImage>*>(this)->$CCMenuItemImage<CCMenuItemImage>::init();
}

CCMenuItemLabel::~CCMenuItemLabel() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCMenuItemLabel<CCMenuItemLabel>*>(this)->destructor();
}

getOutoflineFunctionOf(CCMenuItemLabel, activate, , 0) {
	return reinterpret_cast<$CCMenuItemLabel<CCMenuItemLabel>*>(this)->$CCMenuItemLabel<CCMenuItemLabel>::activate();
}

getOutoflineFunctionOf(CCMenuItemLabel, selected, , 0) {
	return reinterpret_cast<$CCMenuItemLabel<CCMenuItemLabel>*>(this)->$CCMenuItemLabel<CCMenuItemLabel>::selected();
}

getOutoflineFunctionOf(CCMenuItemLabel, unselected, , 0) {
	return reinterpret_cast<$CCMenuItemLabel<CCMenuItemLabel>*>(this)->$CCMenuItemLabel<CCMenuItemLabel>::unselected();
}

getOutoflineFunctionOf(CCMenuItemLabel, setEnabled, , 1, bool) {
	return reinterpret_cast<$CCMenuItemLabel<CCMenuItemLabel>*>(this)->$CCMenuItemLabel<CCMenuItemLabel>::setEnabled(p0);
}

getOutoflineFunctionOf(CCMenuItemLabel, getDisabledColor, , 0) {
	return reinterpret_cast<$CCMenuItemLabel<CCMenuItemLabel>*>(this)->$CCMenuItemLabel<CCMenuItemLabel>::getDisabledColor();
}

getOutoflineFunctionOf(CCMenuItemLabel, setDisabledColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$CCMenuItemLabel<CCMenuItemLabel>*>(this)->$CCMenuItemLabel<CCMenuItemLabel>::setDisabledColor(p0);
}

getOutoflineFunctionOf(CCMenuItemLabel, getLabel, , 0) {
	return reinterpret_cast<$CCMenuItemLabel<CCMenuItemLabel>*>(this)->$CCMenuItemLabel<CCMenuItemLabel>::getLabel();
}

getOutoflineFunctionOf(CCMenuItemLabel, setLabel, , 1, cocos2d::CCNode*) {
	return reinterpret_cast<$CCMenuItemLabel<CCMenuItemLabel>*>(this)->$CCMenuItemLabel<CCMenuItemLabel>::setLabel(p0);
}

getOutoflineFunctionOf(CCMenuItemSprite, selected, , 0) {
	return reinterpret_cast<$CCMenuItemSprite<CCMenuItemSprite>*>(this)->$CCMenuItemSprite<CCMenuItemSprite>::selected();
}

getOutoflineFunctionOf(CCMenuItemSprite, unselected, , 0) {
	return reinterpret_cast<$CCMenuItemSprite<CCMenuItemSprite>*>(this)->$CCMenuItemSprite<CCMenuItemSprite>::unselected();
}

getOutoflineFunctionOf(CCMenuItemSprite, setEnabled, , 1, bool) {
	return reinterpret_cast<$CCMenuItemSprite<CCMenuItemSprite>*>(this)->$CCMenuItemSprite<CCMenuItemSprite>::setEnabled(p0);
}

getOutoflineFunctionOf(CCMenuItemSprite, getNormalImage, , 0) {
	return reinterpret_cast<$CCMenuItemSprite<CCMenuItemSprite>*>(this)->$CCMenuItemSprite<CCMenuItemSprite>::getNormalImage();
}

getOutoflineFunctionOf(CCMenuItemSprite, setNormalImage, , 1, cocos2d::CCNode*) {
	return reinterpret_cast<$CCMenuItemSprite<CCMenuItemSprite>*>(this)->$CCMenuItemSprite<CCMenuItemSprite>::setNormalImage(p0);
}

getOutoflineFunctionOf(CCMenuItemSprite, getSelectedImage, , 0) {
	return reinterpret_cast<$CCMenuItemSprite<CCMenuItemSprite>*>(this)->$CCMenuItemSprite<CCMenuItemSprite>::getSelectedImage();
}

getOutoflineFunctionOf(CCMenuItemSprite, setSelectedImage, , 1, cocos2d::CCNode*) {
	return reinterpret_cast<$CCMenuItemSprite<CCMenuItemSprite>*>(this)->$CCMenuItemSprite<CCMenuItemSprite>::setSelectedImage(p0);
}

getOutoflineFunctionOf(CCMenuItemSprite, getDisabledImage, , 0) {
	return reinterpret_cast<$CCMenuItemSprite<CCMenuItemSprite>*>(this)->$CCMenuItemSprite<CCMenuItemSprite>::getDisabledImage();
}

getOutoflineFunctionOf(CCMenuItemSprite, setDisabledImage, , 1, cocos2d::CCNode*) {
	return reinterpret_cast<$CCMenuItemSprite<CCMenuItemSprite>*>(this)->$CCMenuItemSprite<CCMenuItemSprite>::setDisabledImage(p0);
}

getOutoflineFunctionOf(CCMenuItemSprite, updateImagesVisibility, , 0) {
	return reinterpret_cast<$CCMenuItemSprite<CCMenuItemSprite>*>(this)->$CCMenuItemSprite<CCMenuItemSprite>::updateImagesVisibility();
}

getOutoflineFunctionOf(CCMenuItemSprite, create, , 3, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCNode*) {
	return $CCMenuItemSprite<CCMenuItemSprite>::create(p0, p1, p2);
}

getOutoflineFunctionOf(CCMenuItemSprite, create, , 5, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler) {
	return $CCMenuItemSprite<CCMenuItemSprite>::create(p0, p1, p2, p3, p4);
}

getOutoflineFunctionOf(CCMenuItemSprite, create, , 4, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler) {
	return $CCMenuItemSprite<CCMenuItemSprite>::create(p0, p1, p2, p3);
}

getOutoflineFunctionOf(CCMotionStreak, reset, , 0) {
	return reinterpret_cast<$CCMotionStreak<CCMotionStreak>*>(this)->$CCMotionStreak<CCMotionStreak>::reset();
}

getOutoflineFunctionOf(CCMotionStreak, resumeStroke, , 0) {
	return reinterpret_cast<$CCMotionStreak<CCMotionStreak>*>(this)->$CCMotionStreak<CCMotionStreak>::resumeStroke();
}

getOutoflineFunctionOf(CCMotionStreak, stopStroke, , 0) {
	return reinterpret_cast<$CCMotionStreak<CCMotionStreak>*>(this)->$CCMotionStreak<CCMotionStreak>::stopStroke();
}

cocos2d::CCMouseDelegate::CCMouseDelegate() {};

void cocos2d::CCMouseDelegate::rightKeyDown() {};

void cocos2d::CCMouseDelegate::rightKeyUp() {};

void cocos2d::CCMouseDelegate::scrollWheel(float, float) {};

getOutoflineFunctionOf(CCMouseHandler, handlerWithDelegate, , 1, cocos2d::CCMouseDelegate*) {
	return $CCMouseHandler<CCMouseHandler>::handlerWithDelegate(p0);
}

getOutoflineFunctionOf(CCMouseHandler, initWithDelegate, , 1, cocos2d::CCMouseDelegate*) {
	return reinterpret_cast<$CCMouseHandler<CCMouseHandler>*>(this)->$CCMouseHandler<CCMouseHandler>::initWithDelegate(p0);
}

CCMouseHandler::~CCMouseHandler() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCMouseHandler<CCMouseHandler>*>(this)->destructor();
}

getOutoflineFunctionOf(CCMoveBy, create, , 2, float, cocos2d::CCPoint const&) {
	return $CCMoveBy<CCMoveBy>::create(p0, p1);
}

getOutoflineFunctionOf(CCMoveTo, create, , 2, float, cocos2d::CCPoint const&) {
	return $CCMoveTo<CCMoveTo>::create(p0, p1);
}

CCNode::CCNode() : CCNode(*this) {
	reinterpret_cast<$CCNode<CCNode>*>(this)->constructor();
}

getOutoflineFunctionOf(CCNode, _setZOrder, , 1, int) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::_setZOrder(p0);
}

getOutoflineFunctionOf(CCNode, addChild, , 1, cocos2d::CCNode*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::addChild(p0);
}

getOutoflineFunctionOf(CCNode, addChild, , 2, cocos2d::CCNode*, int) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::addChild(p0, p1);
}

getOutoflineFunctionOf(CCNode, addChild, , 3, cocos2d::CCNode*, int, int) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::addChild(p0, p1, p2);
}

getOutoflineFunctionOf(CCNode, addComponent, , 1, cocos2d::CCComponent*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::addComponent(p0);
}

getOutoflineFunctionOf(CCNode, cleanup, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::cleanup();
}

getOutoflineFunctionOf(CCNode, convertToNodeSpace, , 1, cocos2d::CCPoint const&) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::convertToNodeSpace(p0);
}

getOutoflineFunctionOf(CCNode, convertToWorldSpace, , 1, cocos2d::CCPoint const&) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::convertToWorldSpace(p0);
}

getOutoflineFunctionOf(CCNode, create, , 0) {
	return $CCNode<CCNode>::create();
}

getOutoflineFunctionOf(CCNode, draw, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::draw();
}

getOutoflineFunctionOf(CCNode, getActionByTag, , 1, int) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getActionByTag(p0);
}

getOutoflineFunctionOf(CCNode, getActionManager, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getActionManager();
}

getOutoflineFunctionOf(CCNode, getAnchorPoint, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getAnchorPoint();
}

getOutoflineFunctionOf(CCNode, getAnchorPointInPoints, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getAnchorPointInPoints();
}

getOutoflineFunctionOf(CCNode, getCamera, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getCamera();
}

getOutoflineFunctionOf(CCNode, getChildByTag, , 1, int) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getChildByTag(p0);
}

getOutoflineFunctionOf(CCNode, getChildren, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getChildren();
}

getOutoflineFunctionOf(CCNode, getChildrenCount, const, 0) {
	return reinterpret_cast<const $CCNode<CCNode>*>(this)->$CCNode<CCNode>::getChildrenCount();
}

getOutoflineFunctionOf(CCNode, getContentSize, const, 0) {
	return reinterpret_cast<const $CCNode<CCNode>*>(this)->$CCNode<CCNode>::getContentSize();
}

getOutoflineFunctionOf(CCNode, getGLServerState, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getGLServerState();
}

getOutoflineFunctionOf(CCNode, getGrid, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getGrid();
}

getOutoflineFunctionOf(CCNode, getOrderOfArrival, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getOrderOfArrival();
}

getOutoflineFunctionOf(CCNode, getParent, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getParent();
}

getOutoflineFunctionOf(CCNode, getPosition, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getPosition();
}

getOutoflineFunctionOf(CCNode, getPosition, , 2, float*, float*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getPosition(p0, p1);
}

getOutoflineFunctionOf(CCNode, getPositionX, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getPositionX();
}

getOutoflineFunctionOf(CCNode, getPositionY, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getPositionY();
}

getOutoflineFunctionOf(CCNode, getRotation, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getRotation();
}

getOutoflineFunctionOf(CCNode, getRotationX, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getRotationX();
}

getOutoflineFunctionOf(CCNode, getRotationY, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getRotationY();
}

getOutoflineFunctionOf(CCNode, getScale, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getScale();
}

getOutoflineFunctionOf(CCNode, getScaleX, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getScaleX();
}

getOutoflineFunctionOf(CCNode, getScaleY, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getScaleY();
}

getOutoflineFunctionOf(CCNode, getScaledContentSize, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getScaledContentSize();
}

getOutoflineFunctionOf(CCNode, getScheduler, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getScheduler();
}

getOutoflineFunctionOf(CCNode, getShaderProgram, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getShaderProgram();
}

getOutoflineFunctionOf(CCNode, getSkewX, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getSkewX();
}

getOutoflineFunctionOf(CCNode, getSkewY, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getSkewY();
}

getOutoflineFunctionOf(CCNode, getUserData, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getUserData();
}

getOutoflineFunctionOf(CCNode, getUserObject, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getUserObject();
}

getOutoflineFunctionOf(CCNode, getVertexZ, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getVertexZ();
}

getOutoflineFunctionOf(CCNode, getZOrder, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::getZOrder();
}

getOutoflineFunctionOf(CCNode, ignoreAnchorPointForPosition, , 1, bool) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::ignoreAnchorPointForPosition(p0);
}

getOutoflineFunctionOf(CCNode, init, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::init();
}

getOutoflineFunctionOf(CCNode, isIgnoreAnchorPointForPosition, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::isIgnoreAnchorPointForPosition();
}

getOutoflineFunctionOf(CCNode, isRunning, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::isRunning();
}

getOutoflineFunctionOf(CCNode, isVisible, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::isVisible();
}

getOutoflineFunctionOf(CCNode, nodeToParentTransform, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::nodeToParentTransform();
}

getOutoflineFunctionOf(CCNode, nodeToWorldTransform, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::nodeToWorldTransform();
}

getOutoflineFunctionOf(CCNode, onEnter, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::onEnter();
}

getOutoflineFunctionOf(CCNode, onEnterTransitionDidFinish, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::onEnterTransitionDidFinish();
}

getOutoflineFunctionOf(CCNode, onExit, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::onExit();
}

getOutoflineFunctionOf(CCNode, onExitTransitionDidStart, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::onExitTransitionDidStart();
}

getOutoflineFunctionOf(CCNode, parentToNodeTransform, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::parentToNodeTransform();
}

getOutoflineFunctionOf(CCNode, pauseSchedulerAndActions, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::pauseSchedulerAndActions();
}

getOutoflineFunctionOf(CCNode, registerScriptHandler, , 1, int) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::registerScriptHandler(p0);
}

getOutoflineFunctionOf(CCNode, removeAllChildren, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::removeAllChildren();
}

getOutoflineFunctionOf(CCNode, removeAllChildrenWithCleanup, , 1, bool) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::removeAllChildrenWithCleanup(p0);
}

getOutoflineFunctionOf(CCNode, removeAllComponents, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::removeAllComponents();
}

getOutoflineFunctionOf(CCNode, removeChild, , 1, cocos2d::CCNode*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::removeChild(p0);
}

getOutoflineFunctionOf(CCNode, removeChild, , 2, cocos2d::CCNode*, bool) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::removeChild(p0, p1);
}

getOutoflineFunctionOf(CCNode, removeChildByTag, , 1, int) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::removeChildByTag(p0);
}

getOutoflineFunctionOf(CCNode, removeChildByTag, , 2, int, bool) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::removeChildByTag(p0, p1);
}

getOutoflineFunctionOf(CCNode, removeComponent, , 1, char const*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::removeComponent(p0);
}

getOutoflineFunctionOf(CCNode, removeComponent, , 1, cocos2d::CCComponent*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::removeComponent(p0);
}

getOutoflineFunctionOf(CCNode, removeFromParent, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::removeFromParent();
}

getOutoflineFunctionOf(CCNode, removeFromParentAndCleanup, , 1, bool) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::removeFromParentAndCleanup(p0);
}

getOutoflineFunctionOf(CCNode, removeMeAndCleanup, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::removeMeAndCleanup();
}

getOutoflineFunctionOf(CCNode, reorderChild, , 2, cocos2d::CCNode*, int) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::reorderChild(p0, p1);
}

getOutoflineFunctionOf(CCNode, resumeSchedulerAndActions, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::resumeSchedulerAndActions();
}

getOutoflineFunctionOf(CCNode, runAction, , 1, cocos2d::CCAction*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::runAction(p0);
}

getOutoflineFunctionOf(CCNode, schedule, , 1, cocos2d::SEL_SCHEDULE) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::schedule(p0);
}

getOutoflineFunctionOf(CCNode, schedule, , 2, cocos2d::SEL_SCHEDULE, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::schedule(p0, p1);
}

getOutoflineFunctionOf(CCNode, scheduleUpdate, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::scheduleUpdate();
}

getOutoflineFunctionOf(CCNode, setActionManager, , 1, cocos2d::CCActionManager*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setActionManager(p0);
}

getOutoflineFunctionOf(CCNode, setAnchorPoint, , 1, cocos2d::CCPoint const&) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setAnchorPoint(p0);
}

getOutoflineFunctionOf(CCNode, setContentSize, , 1, cocos2d::CCSize const&) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setContentSize(p0);
}

getOutoflineFunctionOf(CCNode, setGLServerState, , 1, cocos2d::ccGLServerState) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setGLServerState(p0);
}

getOutoflineFunctionOf(CCNode, setGrid, , 1, cocos2d::CCGridBase*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setGrid(p0);
}

getOutoflineFunctionOf(CCNode, setOrderOfArrival, , 1, unsigned int) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setOrderOfArrival(p0);
}

getOutoflineFunctionOf(CCNode, setParent, , 1, cocos2d::CCNode*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setParent(p0);
}

getOutoflineFunctionOf(CCNode, setPosition, , 1, cocos2d::CCPoint const&) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setPosition(p0);
}

getOutoflineFunctionOf(CCNode, setPosition, , 2, float, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setPosition(p0, p1);
}

getOutoflineFunctionOf(CCNode, setPositionX, , 1, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setPositionX(p0);
}

getOutoflineFunctionOf(CCNode, setPositionY, , 1, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setPositionY(p0);
}

getOutoflineFunctionOf(CCNode, setRotation, , 1, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setRotation(p0);
}

getOutoflineFunctionOf(CCNode, setRotationX, , 1, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setRotationX(p0);
}

getOutoflineFunctionOf(CCNode, setRotationY, , 1, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setRotationY(p0);
}

getOutoflineFunctionOf(CCNode, setScale, , 1, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setScale(p0);
}

getOutoflineFunctionOf(CCNode, setScale, , 2, float, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setScale(p0, p1);
}

getOutoflineFunctionOf(CCNode, setScaleX, , 1, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setScaleX(p0);
}

getOutoflineFunctionOf(CCNode, setScaleY, , 1, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setScaleY(p0);
}

getOutoflineFunctionOf(CCNode, setScheduler, , 1, cocos2d::CCScheduler*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setScheduler(p0);
}

getOutoflineFunctionOf(CCNode, setShaderProgram, , 1, cocos2d::CCGLProgram*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setShaderProgram(p0);
}

getOutoflineFunctionOf(CCNode, setSkewX, , 1, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setSkewX(p0);
}

getOutoflineFunctionOf(CCNode, setSkewY, , 1, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setSkewY(p0);
}

getOutoflineFunctionOf(CCNode, setUserData, , 1, void*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setUserData(p0);
}

getOutoflineFunctionOf(CCNode, setUserObject, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setUserObject(p0);
}

getOutoflineFunctionOf(CCNode, setVertexZ, , 1, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setVertexZ(p0);
}

getOutoflineFunctionOf(CCNode, setVisible, , 1, bool) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setVisible(p0);
}

getOutoflineFunctionOf(CCNode, setZOrder, , 1, int) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::setZOrder(p0);
}

getOutoflineFunctionOf(CCNode, sortAllChildren, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::sortAllChildren();
}

getOutoflineFunctionOf(CCNode, stopActionByTag, , 1, int) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::stopActionByTag(p0);
}

getOutoflineFunctionOf(CCNode, stopAllActions, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::stopAllActions();
}

getOutoflineFunctionOf(CCNode, unregisterScriptHandler, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::unregisterScriptHandler();
}

getOutoflineFunctionOf(CCNode, unschedule, , 1, cocos2d::SEL_SCHEDULE) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::unschedule(p0);
}

getOutoflineFunctionOf(CCNode, unscheduleAllSelectors, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::unscheduleAllSelectors();
}

getOutoflineFunctionOf(CCNode, unscheduleUpdate, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::unscheduleUpdate();
}

getOutoflineFunctionOf(CCNode, update, , 1, float) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::update(p0);
}

getOutoflineFunctionOf(CCNode, updateTransform, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::updateTransform();
}

getOutoflineFunctionOf(CCNode, updateTweenAction, , 2, float, char const*) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::updateTweenAction(p0, p1);
}

getOutoflineFunctionOf(CCNode, visit, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::visit();
}

getOutoflineFunctionOf(CCNode, worldToNodeTransform, , 0) {
	return reinterpret_cast<$CCNode<CCNode>*>(this)->$CCNode<CCNode>::worldToNodeTransform();
}

CCNode::~CCNode() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCNode<CCNode>*>(this)->destructor();
}

CCNodeRGBA::CCNodeRGBA() : CCNodeRGBA(*this) {
	reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->constructor();
}

CCNodeRGBA::~CCNodeRGBA() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->destructor();
}

getOutoflineFunctionOf(CCNodeRGBA, init, , 0) {
	return reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->$CCNodeRGBA<CCNodeRGBA>::init();
}

getOutoflineFunctionOf(CCNodeRGBA, getOpacity, , 0) {
	return reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->$CCNodeRGBA<CCNodeRGBA>::getOpacity();
}

getOutoflineFunctionOf(CCNodeRGBA, getDisplayedOpacity, , 0) {
	return reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->$CCNodeRGBA<CCNodeRGBA>::getDisplayedOpacity();
}

getOutoflineFunctionOf(CCNodeRGBA, setOpacity, , 1, GLubyte) {
	return reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->$CCNodeRGBA<CCNodeRGBA>::setOpacity(p0);
}

getOutoflineFunctionOf(CCNodeRGBA, updateDisplayedOpacity, , 1, GLubyte) {
	return reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->$CCNodeRGBA<CCNodeRGBA>::updateDisplayedOpacity(p0);
}

getOutoflineFunctionOf(CCNodeRGBA, isCascadeOpacityEnabled, , 0) {
	return reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->$CCNodeRGBA<CCNodeRGBA>::isCascadeOpacityEnabled();
}

getOutoflineFunctionOf(CCNodeRGBA, setCascadeOpacityEnabled, , 1, bool) {
	return reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->$CCNodeRGBA<CCNodeRGBA>::setCascadeOpacityEnabled(p0);
}

getOutoflineFunctionOf(CCNodeRGBA, getColor, , 0) {
	return reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->$CCNodeRGBA<CCNodeRGBA>::getColor();
}

getOutoflineFunctionOf(CCNodeRGBA, getDisplayedColor, , 0) {
	return reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->$CCNodeRGBA<CCNodeRGBA>::getDisplayedColor();
}

getOutoflineFunctionOf(CCNodeRGBA, setColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->$CCNodeRGBA<CCNodeRGBA>::setColor(p0);
}

getOutoflineFunctionOf(CCNodeRGBA, updateDisplayedColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->$CCNodeRGBA<CCNodeRGBA>::updateDisplayedColor(p0);
}

getOutoflineFunctionOf(CCNodeRGBA, isCascadeColorEnabled, , 0) {
	return reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->$CCNodeRGBA<CCNodeRGBA>::isCascadeColorEnabled();
}

getOutoflineFunctionOf(CCNodeRGBA, setCascadeColorEnabled, , 1, bool) {
	return reinterpret_cast<$CCNodeRGBA<CCNodeRGBA>*>(this)->$CCNodeRGBA<CCNodeRGBA>::setCascadeColorEnabled(p0);
}

CCObject::CCObject() : CCObject(*this) {
	reinterpret_cast<$CCObject<CCObject>*>(this)->constructor();
}

getOutoflineFunctionOf(CCObject, acceptVisitor, , 1, cocos2d::CCDataVisitor&) {
	return reinterpret_cast<$CCObject<CCObject>*>(this)->$CCObject<CCObject>::acceptVisitor(p0);
}

getOutoflineFunctionOf(CCObject, autorelease, , 0) {
	return reinterpret_cast<$CCObject<CCObject>*>(this)->$CCObject<CCObject>::autorelease();
}

getOutoflineFunctionOf(CCObject, canEncode, , 0) {
	return reinterpret_cast<$CCObject<CCObject>*>(this)->$CCObject<CCObject>::canEncode();
}

getOutoflineFunctionOf(CCObject, encodeWithCoder, , 1, DS_Dictionary*) {
	return reinterpret_cast<$CCObject<CCObject>*>(this)->$CCObject<CCObject>::encodeWithCoder(p0);
}

getOutoflineFunctionOf(CCObject, getTag, const, 0) {
	return reinterpret_cast<const $CCObject<CCObject>*>(this)->$CCObject<CCObject>::getTag();
}

getOutoflineFunctionOf(CCObject, isEqual, , 1, cocos2d::CCObject const*) {
	return reinterpret_cast<$CCObject<CCObject>*>(this)->$CCObject<CCObject>::isEqual(p0);
}

getOutoflineFunctionOf(CCObject, release, , 0) {
	return reinterpret_cast<$CCObject<CCObject>*>(this)->$CCObject<CCObject>::release();
}

getOutoflineFunctionOf(CCObject, retain, , 0) {
	return reinterpret_cast<$CCObject<CCObject>*>(this)->$CCObject<CCObject>::retain();
}

getOutoflineFunctionOf(CCObject, setTag, , 1, int) {
	return reinterpret_cast<$CCObject<CCObject>*>(this)->$CCObject<CCObject>::setTag(p0);
}

CCObject::~CCObject() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCObject<CCObject>*>(this)->destructor();
}

getOutoflineFunctionOf(CCParticleSystem, resetSystem, , 0) {
	return reinterpret_cast<$CCParticleSystem<CCParticleSystem>*>(this)->$CCParticleSystem<CCParticleSystem>::resetSystem();
}

getOutoflineFunctionOf(CCParticleSystem, resumeSystem, , 0) {
	return reinterpret_cast<$CCParticleSystem<CCParticleSystem>*>(this)->$CCParticleSystem<CCParticleSystem>::resumeSystem();
}

getOutoflineFunctionOf(CCParticleSystem, stopSystem, , 0) {
	return reinterpret_cast<$CCParticleSystem<CCParticleSystem>*>(this)->$CCParticleSystem<CCParticleSystem>::stopSystem();
}

getOutoflineFunctionOf(CCParticleSystemQuad, create, , 1, char const*) {
	return $CCParticleSystemQuad<CCParticleSystemQuad>::create(p0);
}

getOutoflineFunctionOf(CCPoolManager, pop, , 0) {
	return reinterpret_cast<$CCPoolManager<CCPoolManager>*>(this)->$CCPoolManager<CCPoolManager>::pop();
}

getOutoflineFunctionOf(CCPoolManager, sharedPoolManager, , 0) {
	return $CCPoolManager<CCPoolManager>::sharedPoolManager();
}

getOutoflineFunctionOf(CCRenderTexture, begin, , 0) {
	return reinterpret_cast<$CCRenderTexture<CCRenderTexture>*>(this)->$CCRenderTexture<CCRenderTexture>::begin();
}

getOutoflineFunctionOf(CCRenderTexture, end, , 0) {
	return reinterpret_cast<$CCRenderTexture<CCRenderTexture>*>(this)->$CCRenderTexture<CCRenderTexture>::end();
}

getOutoflineFunctionOf(CCRenderTexture, create, , 3, int, int, cocos2d::CCTexture2DPixelFormat) {
	return $CCRenderTexture<CCRenderTexture>::create(p0, p1, p2);
}

getOutoflineFunctionOf(CCRenderTexture, newCCImage, , 1, bool) {
	return reinterpret_cast<$CCRenderTexture<CCRenderTexture>*>(this)->$CCRenderTexture<CCRenderTexture>::newCCImage(p0);
}

getOutoflineFunctionOf(CCRepeatForever, create, , 1, cocos2d::CCActionInterval*) {
	return $CCRepeatForever<CCRepeatForever>::create(p0);
}

getOutoflineFunctionOf(CCRotateBy, create, , 2, float, float) {
	return $CCRotateBy<CCRotateBy>::create(p0, p1);
}

getOutoflineFunctionOf(CCScaleTo, create, , 2, float, float) {
	return $CCScaleTo<CCScaleTo>::create(p0, p1);
}

getOutoflineFunctionOf(CCScaleTo, create, , 3, float, float, float) {
	return $CCScaleTo<CCScaleTo>::create(p0, p1, p2);
}

getOutoflineFunctionOf(CCScene, create, , 0) {
	return $CCScene<CCScene>::create();
}

getOutoflineFunctionOf(CCScene, getHighestChildZ, , 0) {
	return reinterpret_cast<$CCScene<CCScene>*>(this)->$CCScene<CCScene>::getHighestChildZ();
}

getOutoflineFunctionOf(CCScheduler, scheduleSelector, , 6, cocos2d::SEL_SCHEDULE, cocos2d::CCObject*, float, unsigned int, float, bool) {
	return reinterpret_cast<$CCScheduler<CCScheduler>*>(this)->$CCScheduler<CCScheduler>::scheduleSelector(p0, p1, p2, p3, p4, p5);
}

getOutoflineFunctionOf(CCScheduler, scheduleUpdateForTarget, , 3, cocos2d::CCObject*, int, bool) {
	return reinterpret_cast<$CCScheduler<CCScheduler>*>(this)->$CCScheduler<CCScheduler>::scheduleUpdateForTarget(p0, p1, p2);
}

getOutoflineFunctionOf(CCScheduler, unscheduleAllForTarget, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$CCScheduler<CCScheduler>*>(this)->$CCScheduler<CCScheduler>::unscheduleAllForTarget(p0);
}

CCSet::CCSet() : CCSet(*this) {
	reinterpret_cast<$CCSet<CCSet>*>(this)->constructor();
}

CCSet::~CCSet() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCSet<CCSet>*>(this)->destructor();
}

getOutoflineFunctionOf(CCSet, acceptVisitor, , 1, cocos2d::CCDataVisitor&) {
	return reinterpret_cast<$CCSet<CCSet>*>(this)->$CCSet<CCSet>::acceptVisitor(p0);
}

CCSprite::~CCSprite() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCSprite<CCSprite>*>(this)->destructor();
}

getOutoflineFunctionOf(CCSprite, init, , 0) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::init();
}

getOutoflineFunctionOf(CCSprite, setVertexZ, , 1, float) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setVertexZ(p0);
}

getOutoflineFunctionOf(CCSprite, setScaleX, , 1, float) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setScaleX(p0);
}

getOutoflineFunctionOf(CCSprite, setScaleY, , 1, float) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setScaleY(p0);
}

getOutoflineFunctionOf(CCSprite, setScale, , 1, float) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setScale(p0);
}

getOutoflineFunctionOf(CCSprite, setPosition, , 1, cocos2d::CCPoint const&) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setPosition(p0);
}

getOutoflineFunctionOf(CCSprite, setSkewX, , 1, float) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setSkewX(p0);
}

getOutoflineFunctionOf(CCSprite, setSkewY, , 1, float) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setSkewY(p0);
}

getOutoflineFunctionOf(CCSprite, setAnchorPoint, , 1, cocos2d::CCPoint const&) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setAnchorPoint(p0);
}

getOutoflineFunctionOf(CCSprite, setVisible, , 1, bool) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setVisible(p0);
}

getOutoflineFunctionOf(CCSprite, setRotation, , 1, float) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setRotation(p0);
}

getOutoflineFunctionOf(CCSprite, setRotationX, , 1, float) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setRotationX(p0);
}

getOutoflineFunctionOf(CCSprite, setRotationY, , 1, float) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setRotationY(p0);
}

getOutoflineFunctionOf(CCSprite, ignoreAnchorPointForPosition, , 1, bool) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::ignoreAnchorPointForPosition(p0);
}

getOutoflineFunctionOf(CCSprite, addChild, , 1, cocos2d::CCNode*) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::addChild(p0);
}

getOutoflineFunctionOf(CCSprite, addChild, , 2, cocos2d::CCNode*, int) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::addChild(p0, p1);
}

getOutoflineFunctionOf(CCSprite, addChild, , 3, cocos2d::CCNode*, int, int) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::addChild(p0, p1, p2);
}

getOutoflineFunctionOf(CCSprite, removeChild, , 2, cocos2d::CCNode*, bool) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::removeChild(p0, p1);
}

getOutoflineFunctionOf(CCSprite, removeAllChildrenWithCleanup, , 1, bool) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::removeAllChildrenWithCleanup(p0);
}

getOutoflineFunctionOf(CCSprite, reorderChild, , 2, cocos2d::CCNode*, int) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::reorderChild(p0, p1);
}

getOutoflineFunctionOf(CCSprite, sortAllChildren, , 0) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::sortAllChildren();
}

getOutoflineFunctionOf(CCSprite, draw, , 0) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::draw();
}

getOutoflineFunctionOf(CCSprite, updateTransform, , 0) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::updateTransform();
}

getOutoflineFunctionOf(CCSprite, setOpacity, , 1, unsigned char) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setOpacity(p0);
}

getOutoflineFunctionOf(CCSprite, updateDisplayedOpacity, , 1, unsigned char) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::updateDisplayedOpacity(p0);
}

getOutoflineFunctionOf(CCSprite, setColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setColor(p0);
}

getOutoflineFunctionOf(CCSprite, updateDisplayedColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::updateDisplayedColor(p0);
}

getOutoflineFunctionOf(CCSprite, setOpacityModifyRGB, , 1, bool) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setOpacityModifyRGB(p0);
}

getOutoflineFunctionOf(CCSprite, isOpacityModifyRGB, , 0) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::isOpacityModifyRGB();
}

getOutoflineFunctionOf(CCSprite, initWithTexture, , 1, cocos2d::CCTexture2D*) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::initWithTexture(p0);
}

getOutoflineFunctionOf(CCSprite, initWithTexture, , 2, cocos2d::CCTexture2D*, cocos2d::CCRect const&) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::initWithTexture(p0, p1);
}

getOutoflineFunctionOf(CCSprite, initWithTexture, , 3, cocos2d::CCTexture2D*, cocos2d::CCRect const&, bool) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::initWithTexture(p0, p1, p2);
}

getOutoflineFunctionOf(CCSprite, initWithSpriteFrame, , 1, cocos2d::CCSpriteFrame*) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::initWithSpriteFrame(p0);
}

getOutoflineFunctionOf(CCSprite, initWithSpriteFrameName, , 1, char const*) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::initWithSpriteFrameName(p0);
}

getOutoflineFunctionOf(CCSprite, initWithFile, , 1, char const*) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::initWithFile(p0);
}

getOutoflineFunctionOf(CCSprite, initWithFile, , 2, char const*, cocos2d::CCRect const&) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::initWithFile(p0, p1);
}

getOutoflineFunctionOf(CCSprite, setTexture, , 1, cocos2d::CCTexture2D*) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setTexture(p0);
}

getOutoflineFunctionOf(CCSprite, getTexture, , 0) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::getTexture();
}

getOutoflineFunctionOf(CCSprite, setChildColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setChildColor(p0);
}

getOutoflineFunctionOf(CCSprite, setChildOpacity, , 1, unsigned char) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setChildOpacity(p0);
}

getOutoflineFunctionOf(CCSprite, getBatchNode, , 0) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::getBatchNode();
}

getOutoflineFunctionOf(CCSprite, setBatchNode, , 1, cocos2d::CCSpriteBatchNode*) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setBatchNode(p0);
}

getOutoflineFunctionOf(CCSprite, refreshTextureRect, , 0) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::refreshTextureRect();
}

getOutoflineFunctionOf(CCSprite, setTextureRect, , 1, cocos2d::CCRect const&) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setTextureRect(p0);
}

getOutoflineFunctionOf(CCSprite, setTextureRect, , 3, cocos2d::CCRect const&, bool, cocos2d::CCSize const&) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setTextureRect(p0, p1, p2);
}

getOutoflineFunctionOf(CCSprite, setVertexRect, , 1, cocos2d::CCRect const&) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setVertexRect(p0);
}

getOutoflineFunctionOf(CCSprite, setDisplayFrame, , 1, cocos2d::CCSpriteFrame*) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setDisplayFrame(p0);
}

getOutoflineFunctionOf(CCSprite, isFrameDisplayed, , 1, cocos2d::CCSpriteFrame*) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::isFrameDisplayed(p0);
}

getOutoflineFunctionOf(CCSprite, displayFrame, , 0) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::displayFrame();
}

getOutoflineFunctionOf(CCSprite, setDisplayFrameWithAnimationName, , 2, char const*, int) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setDisplayFrameWithAnimationName(p0, p1);
}

getOutoflineFunctionOf(CCSprite, setTextureCoords, , 1, cocos2d::CCRect const&) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setTextureCoords(p0);
}

getOutoflineFunctionOf(CCSprite, updateBlendFunc, , 0) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::updateBlendFunc();
}

getOutoflineFunctionOf(CCSprite, setReorderChildDirtyRecursively, , 0) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setReorderChildDirtyRecursively();
}

getOutoflineFunctionOf(CCSprite, setDirtyRecursively, , 1, bool) {
	return reinterpret_cast<$CCSprite<CCSprite>*>(this)->$CCSprite<CCSprite>::setDirtyRecursively(p0);
}

CCSprite::CCSprite() : CCSprite(*this) {
	reinterpret_cast<$CCSprite<CCSprite>*>(this)->constructor();
}

getOutoflineFunctionOf(CCSprite, create, , 0) {
	return $CCSprite<CCSprite>::create();
}

getOutoflineFunctionOf(CCSprite, create, , 1, char const*) {
	return $CCSprite<CCSprite>::create(p0);
}

getOutoflineFunctionOf(CCSprite, createWithSpriteFrame, , 1, cocos2d::CCSpriteFrame*) {
	return $CCSprite<CCSprite>::createWithSpriteFrame(p0);
}

getOutoflineFunctionOf(CCSprite, createWithSpriteFrameName, , 1, char const*) {
	return $CCSprite<CCSprite>::createWithSpriteFrameName(p0);
}

getOutoflineFunctionOf(CCSprite, createWithTexture, , 1, cocos2d::CCTexture2D*) {
	return $CCSprite<CCSprite>::createWithTexture(p0);
}

getOutoflineFunctionOf(CCSpriteBatchNode, create, , 2, char const*, unsigned int) {
	return $CCSpriteBatchNode<CCSpriteBatchNode>::create(p0, p1);
}

getOutoflineFunctionOf(CCSpriteBatchNode, createWithTexture, , 2, cocos2d::CCTexture2D*, unsigned int) {
	return $CCSpriteBatchNode<CCSpriteBatchNode>::createWithTexture(p0, p1);
}

getOutoflineFunctionOf(CCSpriteBatchNode, getUsedAtlasCapacity, , 0) {
	return reinterpret_cast<$CCSpriteBatchNode<CCSpriteBatchNode>*>(this)->$CCSpriteBatchNode<CCSpriteBatchNode>::getUsedAtlasCapacity();
}

getOutoflineFunctionOf(CCSpriteBatchNode, increaseAtlasCapacity, , 1, unsigned int) {
	return reinterpret_cast<$CCSpriteBatchNode<CCSpriteBatchNode>*>(this)->$CCSpriteBatchNode<CCSpriteBatchNode>::increaseAtlasCapacity(p0);
}

getOutoflineFunctionOf(CCSpriteFrameCache, addSpriteFramesWithFile, , 1, char const*) {
	return reinterpret_cast<$CCSpriteFrameCache<CCSpriteFrameCache>*>(this)->$CCSpriteFrameCache<CCSpriteFrameCache>::addSpriteFramesWithFile(p0);
}

getOutoflineFunctionOf(CCSpriteFrameCache, sharedSpriteFrameCache, , 0) {
	return $CCSpriteFrameCache<CCSpriteFrameCache>::sharedSpriteFrameCache();
}

getOutoflineFunctionOf(CCSpriteFrameCache, spriteFrameByName, , 1, char const*) {
	return reinterpret_cast<$CCSpriteFrameCache<CCSpriteFrameCache>*>(this)->$CCSpriteFrameCache<CCSpriteFrameCache>::spriteFrameByName(p0);
}

getOutoflineFunctionOf(CCStandardTouchHandler, handlerWithDelegate, , 2, cocos2d::CCTouchDelegate*, int) {
	return $CCStandardTouchHandler<CCStandardTouchHandler>::handlerWithDelegate(p0, p1);
}

getOutoflineFunctionOf(CCStandardTouchHandler, initWithDelegate, , 2, cocos2d::CCTouchDelegate*, int) {
	return reinterpret_cast<$CCStandardTouchHandler<CCStandardTouchHandler>*>(this)->$CCStandardTouchHandler<CCStandardTouchHandler>::initWithDelegate(p0, p1);
}

CCStandardTouchHandler::~CCStandardTouchHandler() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCStandardTouchHandler<CCStandardTouchHandler>*>(this)->destructor();
}

CCString::~CCString() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCString<CCString>*>(this)->destructor();
}

getOutoflineFunctionOf(CCString, isEqual, , 1, cocos2d::CCObject const*) {
	return reinterpret_cast<$CCString<CCString>*>(this)->$CCString<CCString>::isEqual(p0);
}

getOutoflineFunctionOf(CCString, acceptVisitor, , 1, cocos2d::CCDataVisitor&) {
	return reinterpret_cast<$CCString<CCString>*>(this)->$CCString<CCString>::acceptVisitor(p0);
}

getOutoflineFunctionOf(CCString, copyWithZone, , 1, cocos2d::CCZone*) {
	return reinterpret_cast<$CCString<CCString>*>(this)->$CCString<CCString>::copyWithZone(p0);
}

getOutoflineFunctionOf(CCString, boolValue, const, 0) {
	return reinterpret_cast<const $CCString<CCString>*>(this)->$CCString<CCString>::boolValue();
}

getOutoflineFunctionOf(CCString, doubleValue, const, 0) {
	return reinterpret_cast<const $CCString<CCString>*>(this)->$CCString<CCString>::doubleValue();
}

getOutoflineFunctionOf(CCString, floatValue, const, 0) {
	return reinterpret_cast<const $CCString<CCString>*>(this)->$CCString<CCString>::floatValue();
}

getOutoflineFunctionOf(CCString, getCString, const, 0) {
	return reinterpret_cast<const $CCString<CCString>*>(this)->$CCString<CCString>::getCString();
}

getOutoflineFunctionOf(CCString, intValue, const, 0) {
	return reinterpret_cast<const $CCString<CCString>*>(this)->$CCString<CCString>::intValue();
}

getOutoflineFunctionOf(CCTargetedTouchHandler, handlerWithDelegate, , 3, cocos2d::CCTouchDelegate*, int, bool) {
	return $CCTargetedTouchHandler<CCTargetedTouchHandler>::handlerWithDelegate(p0, p1, p2);
}

getOutoflineFunctionOf(CCTargetedTouchHandler, initWithDelegate, , 3, cocos2d::CCTouchDelegate*, int, bool) {
	return reinterpret_cast<$CCTargetedTouchHandler<CCTargetedTouchHandler>*>(this)->$CCTargetedTouchHandler<CCTargetedTouchHandler>::initWithDelegate(p0, p1, p2);
}

CCTargetedTouchHandler::~CCTargetedTouchHandler() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCTargetedTouchHandler<CCTargetedTouchHandler>*>(this)->destructor();
}

CCTexture2D::~CCTexture2D() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->destructor();
}

CCTexture2D::CCTexture2D() : CCTexture2D(*this) {
	reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->constructor();
}

getOutoflineFunctionOf(CCTexture2D, getContentSize, , 0) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::getContentSize();
}

getOutoflineFunctionOf(CCTexture2D, getMaxS, , 0) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::getMaxS();
}

getOutoflineFunctionOf(CCTexture2D, getMaxT, , 0) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::getMaxT();
}

getOutoflineFunctionOf(CCTexture2D, getName, , 0) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::getName();
}

getOutoflineFunctionOf(CCTexture2D, getPixelFormat, , 0) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::getPixelFormat();
}

getOutoflineFunctionOf(CCTexture2D, getPixelsHigh, , 0) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::getPixelsHigh();
}

getOutoflineFunctionOf(CCTexture2D, getPixelsWide, , 0) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::getPixelsWide();
}

getOutoflineFunctionOf(CCTexture2D, getShaderProgram, , 0) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::getShaderProgram();
}

getOutoflineFunctionOf(CCTexture2D, initPremultipliedATextureWithImage, , 3, cocos2d::CCImage*, unsigned int, unsigned int) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::initPremultipliedATextureWithImage(p0, p1, p2);
}

getOutoflineFunctionOf(CCTexture2D, initWithData, , 5, void const*, cocos2d::CCTexture2DPixelFormat, unsigned int, unsigned int, cocos2d::CCSize const&) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::initWithData(p0, p1, p2, p3, p4);
}

getOutoflineFunctionOf(CCTexture2D, setAliasTexParameters, , 0) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::setAliasTexParameters();
}

getOutoflineFunctionOf(CCTexture2D, setAntiAliasTexParameters, , 0) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::setAntiAliasTexParameters();
}

getOutoflineFunctionOf(CCTexture2D, setMaxS, , 1, float) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::setMaxS(p0);
}

getOutoflineFunctionOf(CCTexture2D, setMaxT, , 1, float) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::setMaxT(p0);
}

getOutoflineFunctionOf(CCTexture2D, setShaderProgram, , 1, cocos2d::CCGLProgram*) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::setShaderProgram(p0);
}

getOutoflineFunctionOf(CCTexture2D, initWithImage, , 1, cocos2d::CCImage*) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::initWithImage(p0);
}

getOutoflineFunctionOf(CCTexture2D, setTexParameters, , 1, cocos2d::_ccTexParams*) {
	return reinterpret_cast<$CCTexture2D<CCTexture2D>*>(this)->$CCTexture2D<CCTexture2D>::setTexParameters(p0);
}

getOutoflineFunctionOf(CCTextureCache, addImage, , 2, char const*, bool) {
	return reinterpret_cast<$CCTextureCache<CCTextureCache>*>(this)->$CCTextureCache<CCTextureCache>::addImage(p0, p1);
}

getOutoflineFunctionOf(CCTextureCache, sharedTextureCache, , 0) {
	return $CCTextureCache<CCTextureCache>::sharedTextureCache();
}

getOutoflineFunctionOf(CCTintTo, create, , 4, float, unsigned char, unsigned char, unsigned char) {
	return $CCTintTo<CCTintTo>::create(p0, p1, p2, p3);
}

getOutoflineFunctionOf(CCTouch, getDelta, const, 0) {
	return reinterpret_cast<const $CCTouch<CCTouch>*>(this)->$CCTouch<CCTouch>::getDelta();
}

getOutoflineFunctionOf(CCTouch, getLocationInView, const, 0) {
	return reinterpret_cast<const $CCTouch<CCTouch>*>(this)->$CCTouch<CCTouch>::getLocationInView();
}

getOutoflineFunctionOf(CCTouchDispatcher, decrementForcePrio, , 1, int) {
	return reinterpret_cast<$CCTouchDispatcher<CCTouchDispatcher>*>(this)->$CCTouchDispatcher<CCTouchDispatcher>::decrementForcePrio(p0);
}

getOutoflineFunctionOf(CCTouchDispatcher, incrementForcePrio, , 1, int) {
	return reinterpret_cast<$CCTouchDispatcher<CCTouchDispatcher>*>(this)->$CCTouchDispatcher<CCTouchDispatcher>::incrementForcePrio(p0);
}

getOutoflineFunctionOf(CCTouchHandler, initWithDelegate, , 2, cocos2d::CCTouchDelegate*, int) {
	return reinterpret_cast<$CCTouchHandler<CCTouchHandler>*>(this)->$CCTouchHandler<CCTouchHandler>::initWithDelegate(p0, p1);
}

CCTouchHandler::~CCTouchHandler() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCTouchHandler<CCTouchHandler>*>(this)->destructor();
}

getOutoflineFunctionOf(CCTransitionFade, create, , 2, float, cocos2d::CCScene*) {
	return $CCTransitionFade<CCTransitionFade>::create(p0, p1);
}

getOutoflineFunctionOf(ZipUtils, compressString, , 3, gd::string, bool, int) {
	return $ZipUtils<ZipUtils>::compressString(p0, p1, p2);
}

getOutoflineFunctionOf(ZipUtils, decompressString, , 3, gd::string, bool, int) {
	return $ZipUtils<ZipUtils>::decompressString(p0, p1, p2);
}

getOutoflineFunctionOf(CCControlColourPicker, setColorValue, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$CCControlColourPicker<CCControlColourPicker>*>(this)->$CCControlColourPicker<CCControlColourPicker>::setColorValue(p0);
}

getOutoflineFunctionOf(CCControlUtils, HSVfromRGB, , 1, cocos2d::extension::RGBA) {
	return $CCControlUtils<CCControlUtils>::HSVfromRGB(p0);
}

getOutoflineFunctionOf(CCControlUtils, RGBfromHSV, , 1, cocos2d::extension::HSV) {
	return $CCControlUtils<CCControlUtils>::RGBfromHSV(p0);
}

CCScale9Sprite::CCScale9Sprite() : CCScale9Sprite(*this) {
	reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->constructor();
}

getOutoflineFunctionOf(CCScale9Sprite, create, , 1, char const*) {
	return $CCScale9Sprite<CCScale9Sprite>::create(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, create, , 2, char const*, cocos2d::CCRect) {
	return $CCScale9Sprite<CCScale9Sprite>::create(p0, p1);
}

CCScale9Sprite::~CCScale9Sprite() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->destructor();
}

getOutoflineFunctionOf(CCScale9Sprite, init, , 0) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::init();
}

getOutoflineFunctionOf(CCScale9Sprite, setContentSize, , 1, cocos2d::CCSize const&) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::setContentSize(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, visit, , 0) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::visit();
}

getOutoflineFunctionOf(CCScale9Sprite, getOpacity, , 0) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::getOpacity();
}

getOutoflineFunctionOf(CCScale9Sprite, setOpacity, , 1, unsigned char) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::setOpacity(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, updateDisplayedOpacity, , 1, unsigned char) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::updateDisplayedOpacity(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, getColor, , 0) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::getColor();
}

getOutoflineFunctionOf(CCScale9Sprite, setColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::setColor(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, updateDisplayedColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::updateDisplayedColor(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, setOpacityModifyRGB, , 1, bool) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::setOpacityModifyRGB(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, isOpacityModifyRGB, , 0) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::isOpacityModifyRGB();
}

getOutoflineFunctionOf(CCScale9Sprite, getPreferredSize, , 0) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::getPreferredSize();
}

getOutoflineFunctionOf(CCScale9Sprite, setPreferredSize, , 1, cocos2d::CCSize) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::setPreferredSize(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, getCapInsets, , 0) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::getCapInsets();
}

getOutoflineFunctionOf(CCScale9Sprite, setCapInsets, , 1, cocos2d::CCRect) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::setCapInsets(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, getInsetLeft, , 0) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::getInsetLeft();
}

getOutoflineFunctionOf(CCScale9Sprite, setInsetLeft, , 1, float) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::setInsetLeft(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, getInsetTop, , 0) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::getInsetTop();
}

getOutoflineFunctionOf(CCScale9Sprite, setInsetTop, , 1, float) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::setInsetTop(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, getInsetRight, , 0) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::getInsetRight();
}

getOutoflineFunctionOf(CCScale9Sprite, setInsetRight, , 1, float) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::setInsetRight(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, getInsetBottom, , 0) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::getInsetBottom();
}

getOutoflineFunctionOf(CCScale9Sprite, setInsetBottom, , 1, float) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::setInsetBottom(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, initWithBatchNode, , 4, cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, bool, cocos2d::CCRect) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::initWithBatchNode(p0, p1, p2, p3);
}

getOutoflineFunctionOf(CCScale9Sprite, initWithBatchNode, , 3, cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, cocos2d::CCRect) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::initWithBatchNode(p0, p1, p2);
}

getOutoflineFunctionOf(CCScale9Sprite, initWithFile, , 3, char const*, cocos2d::CCRect, cocos2d::CCRect) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::initWithFile(p0, p1, p2);
}

getOutoflineFunctionOf(CCScale9Sprite, initWithFile, , 2, char const*, cocos2d::CCRect) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::initWithFile(p0, p1);
}

getOutoflineFunctionOf(CCScale9Sprite, initWithFile, , 2, cocos2d::CCRect, char const*) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::initWithFile(p0, p1);
}

getOutoflineFunctionOf(CCScale9Sprite, initWithFile, , 1, char const*) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::initWithFile(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, initWithSpriteFrame, , 2, cocos2d::CCSpriteFrame*, cocos2d::CCRect) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::initWithSpriteFrame(p0, p1);
}

getOutoflineFunctionOf(CCScale9Sprite, initWithSpriteFrame, , 1, cocos2d::CCSpriteFrame*) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::initWithSpriteFrame(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, initWithSpriteFrameName, , 2, char const*, cocos2d::CCRect) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::initWithSpriteFrameName(p0, p1);
}

getOutoflineFunctionOf(CCScale9Sprite, initWithSpriteFrameName, , 1, char const*) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::initWithSpriteFrameName(p0);
}

getOutoflineFunctionOf(CCScale9Sprite, updateWithBatchNode, , 4, cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, bool, cocos2d::CCRect) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::updateWithBatchNode(p0, p1, p2, p3);
}

getOutoflineFunctionOf(CCScale9Sprite, setSpriteFrame, , 1, cocos2d::CCSpriteFrame*) {
	return reinterpret_cast<$CCScale9Sprite<CCScale9Sprite>*>(this)->$CCScale9Sprite<CCScale9Sprite>::setSpriteFrame(p0);
}

CCScrollView::CCScrollView() : CCScrollView(*this) {
	reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->constructor();
}

CCScrollView::~CCScrollView() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->destructor();
}

getOutoflineFunctionOf(CCScrollView, init, , 0) {
	return reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->$CCScrollView<CCScrollView>::init();
}

getOutoflineFunctionOf(CCScrollView, setContentSize, , 1, cocos2d::CCSize const&) {
	return reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->$CCScrollView<CCScrollView>::setContentSize(p0);
}

getOutoflineFunctionOf(CCScrollView, getContentSize, const, 0) {
	return reinterpret_cast<const $CCScrollView<CCScrollView>*>(this)->$CCScrollView<CCScrollView>::getContentSize();
}

getOutoflineFunctionOf(CCScrollView, addChild, , 1, cocos2d::CCNode*) {
	return reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->$CCScrollView<CCScrollView>::addChild(p0);
}

getOutoflineFunctionOf(CCScrollView, addChild, , 2, cocos2d::CCNode*, int) {
	return reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->$CCScrollView<CCScrollView>::addChild(p0, p1);
}

getOutoflineFunctionOf(CCScrollView, addChild, , 3, cocos2d::CCNode*, int, int) {
	return reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->$CCScrollView<CCScrollView>::addChild(p0, p1, p2);
}

getOutoflineFunctionOf(CCScrollView, visit, , 0) {
	return reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->$CCScrollView<CCScrollView>::visit();
}

getOutoflineFunctionOf(CCScrollView, ccTouchBegan, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->$CCScrollView<CCScrollView>::ccTouchBegan(p0, p1);
}

getOutoflineFunctionOf(CCScrollView, ccTouchMoved, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->$CCScrollView<CCScrollView>::ccTouchMoved(p0, p1);
}

getOutoflineFunctionOf(CCScrollView, ccTouchEnded, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->$CCScrollView<CCScrollView>::ccTouchEnded(p0, p1);
}

getOutoflineFunctionOf(CCScrollView, ccTouchCancelled, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->$CCScrollView<CCScrollView>::ccTouchCancelled(p0, p1);
}

getOutoflineFunctionOf(CCScrollView, registerWithTouchDispatcher, , 0) {
	return reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->$CCScrollView<CCScrollView>::registerWithTouchDispatcher();
}

getOutoflineFunctionOf(CCScrollView, setTouchEnabled, , 1, bool) {
	return reinterpret_cast<$CCScrollView<CCScrollView>*>(this)->$CCScrollView<CCScrollView>::setTouchEnabled(p0);
}

getOutoflineFunctionOf(AchievementCell, loadFromDict, , 1, cocos2d::CCDictionary*) {
	return reinterpret_cast<$AchievementCell<AchievementCell>*>(this)->$AchievementCell<AchievementCell>::loadFromDict(p0);
}

getOutoflineFunctionOf(AchievementManager, getAllAchievements, , 0) {
	return reinterpret_cast<$AchievementManager<AchievementManager>*>(this)->$AchievementManager<AchievementManager>::getAllAchievements();
}

getOutoflineFunctionOf(AchievementManager, sharedState, , 0) {
	return reinterpret_cast<$AchievementManager<AchievementManager>*>(this)->$AchievementManager<AchievementManager>::sharedState();
}

getOutoflineFunctionOf(AchievementNotifier, sharedState, , 0) {
	return reinterpret_cast<$AchievementNotifier<AchievementNotifier>*>(this)->$AchievementNotifier<AchievementNotifier>::sharedState();
}

getOutoflineFunctionOf(AchievementNotifier, willSwitchToScene, , 1, cocos2d::CCScene*) {
	return reinterpret_cast<$AchievementNotifier<AchievementNotifier>*>(this)->$AchievementNotifier<AchievementNotifier>::willSwitchToScene(p0);
}

getOutoflineFunctionOf(AchievementsLayer, customSetup, , 0) {
	return reinterpret_cast<$AchievementsLayer<AchievementsLayer>*>(this)->$AchievementsLayer<AchievementsLayer>::customSetup();
}

getOutoflineFunctionOf(AchievementsLayer, loadPage, , 1, int) {
	return reinterpret_cast<$AchievementsLayer<AchievementsLayer>*>(this)->$AchievementsLayer<AchievementsLayer>::loadPage(p0);
}

getOutoflineFunctionOf(AnimatedGameObject, playAnimation, , 1, int) {
	return reinterpret_cast<$AnimatedGameObject<AnimatedGameObject>*>(this)->$AnimatedGameObject<AnimatedGameObject>::playAnimation(p0);
}

getOutoflineFunctionOf(AnimatedGameObject, updateChildSpriteColor, , 1, cocos2d::_ccColor3B) {
	return reinterpret_cast<$AnimatedGameObject<AnimatedGameObject>*>(this)->$AnimatedGameObject<AnimatedGameObject>::updateChildSpriteColor(p0);
}

getOutoflineFunctionOf(AppDelegate, bgScale, , 0) {
	return reinterpret_cast<$AppDelegate<AppDelegate>*>(this)->$AppDelegate<AppDelegate>::bgScale();
}

getOutoflineFunctionOf(AppDelegate, applicationDidFinishLaunching, , 0) {
	return reinterpret_cast<$AppDelegate<AppDelegate>*>(this)->$AppDelegate<AppDelegate>::applicationDidFinishLaunching();
}

getOutoflineFunctionOf(AppDelegate, applicationDidEnterBackground, , 0) {
	return reinterpret_cast<$AppDelegate<AppDelegate>*>(this)->$AppDelegate<AppDelegate>::applicationDidEnterBackground();
}

getOutoflineFunctionOf(AppDelegate, applicationWillEnterForeground, , 0) {
	return reinterpret_cast<$AppDelegate<AppDelegate>*>(this)->$AppDelegate<AppDelegate>::applicationWillEnterForeground();
}

getOutoflineFunctionOf(AppDelegate, applicationWillBecomeActive, , 0) {
	return reinterpret_cast<$AppDelegate<AppDelegate>*>(this)->$AppDelegate<AppDelegate>::applicationWillBecomeActive();
}

getOutoflineFunctionOf(AppDelegate, applicationWillResignActive, , 0) {
	return reinterpret_cast<$AppDelegate<AppDelegate>*>(this)->$AppDelegate<AppDelegate>::applicationWillResignActive();
}

getOutoflineFunctionOf(AppDelegate, trySaveGame, , 0) {
	return reinterpret_cast<$AppDelegate<AppDelegate>*>(this)->$AppDelegate<AppDelegate>::trySaveGame();
}

getOutoflineFunctionOf(AppDelegate, willSwitchToScene, , 1, cocos2d::CCScene*) {
	return reinterpret_cast<$AppDelegate<AppDelegate>*>(this)->$AppDelegate<AppDelegate>::willSwitchToScene(p0);
}

getOutoflineFunctionOf(AppDelegate, get, , 0) {
	return $AppDelegate<AppDelegate>::get();
}

getOutoflineFunctionOf(ArtistCell, draw, , 0) {
	return reinterpret_cast<$ArtistCell<ArtistCell>*>(this)->$ArtistCell<ArtistCell>::draw();
}

getOutoflineFunctionOf(ArtistCell, init, , 0) {
	return reinterpret_cast<$ArtistCell<ArtistCell>*>(this)->$ArtistCell<ArtistCell>::init();
}

getOutoflineFunctionOf(ArtistCell, loadFromObject, , 1, SongInfoObject*) {
	return reinterpret_cast<$ArtistCell<ArtistCell>*>(this)->$ArtistCell<ArtistCell>::loadFromObject(p0);
}

getOutoflineFunctionOf(ArtistCell, onNewgrounds, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$ArtistCell<ArtistCell>*>(this)->$ArtistCell<ArtistCell>::onNewgrounds(p0);
}

getOutoflineFunctionOf(ArtistCell, updateBGColor, , 1, int) {
	return reinterpret_cast<$ArtistCell<ArtistCell>*>(this)->$ArtistCell<ArtistCell>::updateBGColor(p0);
}

getOutoflineFunctionOf(AudioEffectsLayer, audioStep, , 1, float) {
	return reinterpret_cast<$AudioEffectsLayer<AudioEffectsLayer>*>(this)->$AudioEffectsLayer<AudioEffectsLayer>::audioStep(p0);
}

getOutoflineFunctionOf(AudioEffectsLayer, create, , 1, gd::string) {
	return $AudioEffectsLayer<AudioEffectsLayer>::create(p0);
}

getOutoflineFunctionOf(AudioEffectsLayer, resetAudioVars, , 0) {
	return reinterpret_cast<$AudioEffectsLayer<AudioEffectsLayer>*>(this)->$AudioEffectsLayer<AudioEffectsLayer>::resetAudioVars();
}

getOutoflineFunctionOf(BoomListView, create, , 5, cocos2d::CCArray*, float, float, int, BoomListType) {
	return $BoomListView<BoomListView>::create(p0, p1, p2, p3, p4);
}

getOutoflineFunctionOf(BoomListView, init, , 5, cocos2d::CCArray*, float, float, int, BoomListType) {
	return reinterpret_cast<$BoomListView<BoomListView>*>(this)->$BoomListView<BoomListView>::init(p0, p1, p2, p3, p4);
}

getOutoflineFunctionOf(BoomListView, draw, , 0) {
	return reinterpret_cast<$BoomListView<BoomListView>*>(this)->$BoomListView<BoomListView>::draw();
}

getOutoflineFunctionOf(BoomListView, setupList, , 0) {
	return reinterpret_cast<$BoomListView<BoomListView>*>(this)->$BoomListView<BoomListView>::setupList();
}

getOutoflineFunctionOf(BoomListView, TableViewWillDisplayCellForRowAtIndexPath, , 3, CCIndexPath&, TableViewCell*, TableView*) {
	return reinterpret_cast<$BoomListView<BoomListView>*>(this)->$BoomListView<BoomListView>::TableViewWillDisplayCellForRowAtIndexPath(p0, p1, p2);
}

getOutoflineFunctionOf(BoomListView, cellHeightForRowAtIndexPath, , 2, CCIndexPath&, TableView*) {
	return reinterpret_cast<$BoomListView<BoomListView>*>(this)->$BoomListView<BoomListView>::cellHeightForRowAtIndexPath(p0, p1);
}

getOutoflineFunctionOf(BoomListView, didSelectRowAtIndexPath, , 2, CCIndexPath&, TableView*) {
	return reinterpret_cast<$BoomListView<BoomListView>*>(this)->$BoomListView<BoomListView>::didSelectRowAtIndexPath(p0, p1);
}

getOutoflineFunctionOf(BoomListView, numberOfRowsInSection, , 2, unsigned int, TableView*) {
	return reinterpret_cast<$BoomListView<BoomListView>*>(this)->$BoomListView<BoomListView>::numberOfRowsInSection(p0, p1);
}

getOutoflineFunctionOf(BoomListView, numberOfSectionsInTableView, , 1, TableView*) {
	return reinterpret_cast<$BoomListView<BoomListView>*>(this)->$BoomListView<BoomListView>::numberOfSectionsInTableView(p0);
}

getOutoflineFunctionOf(BoomListView, cellForRowAtIndexPath, , 2, CCIndexPath&, TableView*) {
	return reinterpret_cast<$BoomListView<BoomListView>*>(this)->$BoomListView<BoomListView>::cellForRowAtIndexPath(p0, p1);
}

getOutoflineFunctionOf(BoomListView, TableViewCommitCellEditingStyleForRowAtIndexPath, , 3, TableView*, TableViewCellEditingStyle, CCIndexPath&) {
	return reinterpret_cast<$BoomListView<BoomListView>*>(this)->$BoomListView<BoomListView>::TableViewCommitCellEditingStyleForRowAtIndexPath(p0, p1, p2);
}

getOutoflineFunctionOf(BoomListView, TableViewWillReloadCellForRowAtIndexPath, , 3, CCIndexPath&, TableViewCell*, TableView*) {
	return reinterpret_cast<$BoomListView<BoomListView>*>(this)->$BoomListView<BoomListView>::TableViewWillReloadCellForRowAtIndexPath(p0, p1, p2);
}

getOutoflineFunctionOf(BoomListView, getListCell, , 1, char const*) {
	return reinterpret_cast<$BoomListView<BoomListView>*>(this)->$BoomListView<BoomListView>::getListCell(p0);
}

getOutoflineFunctionOf(BoomListView, loadCell, , 2, TableViewCell*, int) {
	return reinterpret_cast<$BoomListView<BoomListView>*>(this)->$BoomListView<BoomListView>::loadCell(p0, p1);
}

BoomScrollLayer::BoomScrollLayer() : BoomScrollLayer(*this) {
	reinterpret_cast<$BoomScrollLayer<BoomScrollLayer>*>(this)->constructor();
}

getOutoflineFunctionOf(ButtonSprite, create, , 1, char const*) {
	return $ButtonSprite<ButtonSprite>::create(p0);
}

getOutoflineFunctionOf(ButtonSprite, create, , 5, char const*, int, int, float, bool) {
	return $ButtonSprite<ButtonSprite>::create(p0, p1, p2, p3, p4);
}

getOutoflineFunctionOf(ButtonSprite, updateBGImage, , 1, char const*) {
	return reinterpret_cast<$ButtonSprite<ButtonSprite>*>(this)->$ButtonSprite<ButtonSprite>::updateBGImage(p0);
}

getOutoflineFunctionOf(ButtonSprite, create, , 2, char const*, float) {
	return $ButtonSprite<ButtonSprite>::create(p0, p1);
}

getOutoflineFunctionOf(ButtonSprite, create, , 8, cocos2d::CCSprite*, int, int, float, float, bool, char const*, bool) {
	return $ButtonSprite<ButtonSprite>::create(p0, p1, p2, p3, p4, p5, p6, p7);
}

getOutoflineFunctionOf(CCAnimatedSprite, runAnimation, , 1, gd::string) {
	return reinterpret_cast<$CCAnimatedSprite<CCAnimatedSprite>*>(this)->$CCAnimatedSprite<CCAnimatedSprite>::runAnimation(p0);
}

getOutoflineFunctionOf(CCAnimatedSprite, tweenToAnimation, , 2, gd::string, float) {
	return reinterpret_cast<$CCAnimatedSprite<CCAnimatedSprite>*>(this)->$CCAnimatedSprite<CCAnimatedSprite>::tweenToAnimation(p0, p1);
}

getOutoflineFunctionOf(CCBlockLayer, disableUI, , 0) {
	return reinterpret_cast<$CCBlockLayer<CCBlockLayer>*>(this)->$CCBlockLayer<CCBlockLayer>::disableUI();
}

getOutoflineFunctionOf(CCBlockLayer, draw, , 0) {
	return reinterpret_cast<$CCBlockLayer<CCBlockLayer>*>(this)->$CCBlockLayer<CCBlockLayer>::draw();
}

getOutoflineFunctionOf(CCBlockLayer, enableUI, , 0) {
	return reinterpret_cast<$CCBlockLayer<CCBlockLayer>*>(this)->$CCBlockLayer<CCBlockLayer>::enableUI();
}

getOutoflineFunctionOf(CCBlockLayer, enterAnimFinished, , 0) {
	return reinterpret_cast<$CCBlockLayer<CCBlockLayer>*>(this)->$CCBlockLayer<CCBlockLayer>::enterAnimFinished();
}

getOutoflineFunctionOf(CCBlockLayer, enterLayer, , 0) {
	return reinterpret_cast<$CCBlockLayer<CCBlockLayer>*>(this)->$CCBlockLayer<CCBlockLayer>::enterLayer();
}

getOutoflineFunctionOf(CCBlockLayer, exitLayer, , 0) {
	return reinterpret_cast<$CCBlockLayer<CCBlockLayer>*>(this)->$CCBlockLayer<CCBlockLayer>::exitLayer();
}

getOutoflineFunctionOf(CCBlockLayer, hideLayer, , 1, bool) {
	return reinterpret_cast<$CCBlockLayer<CCBlockLayer>*>(this)->$CCBlockLayer<CCBlockLayer>::hideLayer(p0);
}

getOutoflineFunctionOf(CCBlockLayer, init, , 0) {
	return reinterpret_cast<$CCBlockLayer<CCBlockLayer>*>(this)->$CCBlockLayer<CCBlockLayer>::init();
}

getOutoflineFunctionOf(CCBlockLayer, layerHidden, , 0) {
	return reinterpret_cast<$CCBlockLayer<CCBlockLayer>*>(this)->$CCBlockLayer<CCBlockLayer>::layerHidden();
}

getOutoflineFunctionOf(CCBlockLayer, layerVisible, , 0) {
	return reinterpret_cast<$CCBlockLayer<CCBlockLayer>*>(this)->$CCBlockLayer<CCBlockLayer>::layerVisible();
}

getOutoflineFunctionOf(CCBlockLayer, registerWithTouchDispatcher, , 0) {
	return reinterpret_cast<$CCBlockLayer<CCBlockLayer>*>(this)->$CCBlockLayer<CCBlockLayer>::registerWithTouchDispatcher();
}

getOutoflineFunctionOf(CCBlockLayer, showLayer, , 1, bool) {
	return reinterpret_cast<$CCBlockLayer<CCBlockLayer>*>(this)->$CCBlockLayer<CCBlockLayer>::showLayer(p0);
}

getOutoflineFunctionOf(CCCircleWave, create, , 4, float, float, float, bool) {
	return $CCCircleWave<CCCircleWave>::create(p0, p1, p2, p3);
}

getOutoflineFunctionOf(CCCircleWave, create, , 5, float, float, float, bool, bool) {
	return $CCCircleWave<CCCircleWave>::create(p0, p1, p2, p3, p4);
}

getOutoflineFunctionOf(CCCircleWave, init, , 5, float, float, float, bool, bool) {
	return reinterpret_cast<$CCCircleWave<CCCircleWave>*>(this)->$CCCircleWave<CCCircleWave>::init(p0, p1, p2, p3, p4);
}

getOutoflineFunctionOf(CCCircleWave, followObject, , 2, cocos2d::CCNode*, bool) {
	return reinterpret_cast<$CCCircleWave<CCCircleWave>*>(this)->$CCCircleWave<CCCircleWave>::followObject(p0, p1);
}

getOutoflineFunctionOf(CCCircleWave, updatePosition, , 1, float) {
	return reinterpret_cast<$CCCircleWave<CCCircleWave>*>(this)->$CCCircleWave<CCCircleWave>::updatePosition(p0);
}

getOutoflineFunctionOf(CCLightFlash, create, , 0) {
	return $CCLightFlash<CCLightFlash>::create();
}

getOutoflineFunctionOf(CCLightFlash, playEffect, , 20, cocos2d::CCPoint, cocos2d::_ccColor3B, float, float, float, float, float, float, float, float, float, float, float, float, float, float, int, bool, bool, float) {
	return reinterpret_cast<$CCLightFlash<CCLightFlash>*>(this)->$CCLightFlash<CCLightFlash>::playEffect(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19);
}

getOutoflineFunctionOf(CCMenuItemSpriteExtra, create, , 4, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler) {
	return $CCMenuItemSpriteExtra<CCMenuItemSpriteExtra>::create(p0, p1, p2, p3);
}

getOutoflineFunctionOf(CCMenuItemSpriteExtra, setSizeMult, , 1, float) {
	return reinterpret_cast<$CCMenuItemSpriteExtra<CCMenuItemSpriteExtra>*>(this)->$CCMenuItemSpriteExtra<CCMenuItemSpriteExtra>::setSizeMult(p0);
}

CCMenuItemSpriteExtra::CCMenuItemSpriteExtra() : CCMenuItemSpriteExtra(*this) {
	reinterpret_cast<$CCMenuItemSpriteExtra<CCMenuItemSpriteExtra>*>(this)->constructor();
}

getOutoflineFunctionOf(CCMenuItemSpriteExtra, init, , 4, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler) {
	return reinterpret_cast<$CCMenuItemSpriteExtra<CCMenuItemSpriteExtra>*>(this)->$CCMenuItemSpriteExtra<CCMenuItemSpriteExtra>::init(p0, p1, p2, p3);
}

getOutoflineFunctionOf(CCMenuItemToggler, create, , 4, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler) {
	return $CCMenuItemToggler<CCMenuItemToggler>::create(p0, p1, p2, p3);
}

getOutoflineFunctionOf(CCMenuItemToggler, setSizeMult, , 1, float) {
	return reinterpret_cast<$CCMenuItemToggler<CCMenuItemToggler>*>(this)->$CCMenuItemToggler<CCMenuItemToggler>::setSizeMult(p0);
}

getOutoflineFunctionOf(CCMenuItemToggler, toggle, , 1, bool) {
	return reinterpret_cast<$CCMenuItemToggler<CCMenuItemToggler>*>(this)->$CCMenuItemToggler<CCMenuItemToggler>::toggle(p0);
}

getOutoflineFunctionOf(CCMoveCNode, create, , 0) {
	return $CCMoveCNode<CCMoveCNode>::create();
}

getOutoflineFunctionOf(CCMoveCNode, init, , 0) {
	return reinterpret_cast<$CCMoveCNode<CCMoveCNode>*>(this)->$CCMoveCNode<CCMoveCNode>::init();
}

CCMoveCNode::~CCMoveCNode() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCMoveCNode<CCMoveCNode>*>(this)->destructor();
}

getOutoflineFunctionOf(CCNodeContainer, create, , 0) {
	return $CCNodeContainer<CCNodeContainer>::create();
}

getOutoflineFunctionOf(CCNodeContainer, init, , 0) {
	return reinterpret_cast<$CCNodeContainer<CCNodeContainer>*>(this)->$CCNodeContainer<CCNodeContainer>::init();
}

getOutoflineFunctionOf(CCNodeContainer, visit, , 0) {
	return reinterpret_cast<$CCNodeContainer<CCNodeContainer>*>(this)->$CCNodeContainer<CCNodeContainer>::visit();
}

CCScrollLayerExt::~CCScrollLayerExt() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCScrollLayerExt<CCScrollLayerExt>*>(this)->destructor();
}

getOutoflineFunctionOf(CCScrollLayerExt, visit, , 0) {
	return reinterpret_cast<$CCScrollLayerExt<CCScrollLayerExt>*>(this)->$CCScrollLayerExt<CCScrollLayerExt>::visit();
}

getOutoflineFunctionOf(CCScrollLayerExt, ccTouchBegan, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCScrollLayerExt<CCScrollLayerExt>*>(this)->$CCScrollLayerExt<CCScrollLayerExt>::ccTouchBegan(p0, p1);
}

getOutoflineFunctionOf(CCScrollLayerExt, ccTouchMoved, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCScrollLayerExt<CCScrollLayerExt>*>(this)->$CCScrollLayerExt<CCScrollLayerExt>::ccTouchMoved(p0, p1);
}

getOutoflineFunctionOf(CCScrollLayerExt, ccTouchEnded, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCScrollLayerExt<CCScrollLayerExt>*>(this)->$CCScrollLayerExt<CCScrollLayerExt>::ccTouchEnded(p0, p1);
}

getOutoflineFunctionOf(CCScrollLayerExt, ccTouchCancelled, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCScrollLayerExt<CCScrollLayerExt>*>(this)->$CCScrollLayerExt<CCScrollLayerExt>::ccTouchCancelled(p0, p1);
}

getOutoflineFunctionOf(CCScrollLayerExt, registerWithTouchDispatcher, , 0) {
	return reinterpret_cast<$CCScrollLayerExt<CCScrollLayerExt>*>(this)->$CCScrollLayerExt<CCScrollLayerExt>::registerWithTouchDispatcher();
}

getOutoflineFunctionOf(CCScrollLayerExt, preVisitWithClippingRect, , 1, cocos2d::CCRect) {
	return reinterpret_cast<$CCScrollLayerExt<CCScrollLayerExt>*>(this)->$CCScrollLayerExt<CCScrollLayerExt>::preVisitWithClippingRect(p0);
}

getOutoflineFunctionOf(CCScrollLayerExt, postVisit, , 0) {
	return reinterpret_cast<$CCScrollLayerExt<CCScrollLayerExt>*>(this)->$CCScrollLayerExt<CCScrollLayerExt>::postVisit();
}

getOutoflineFunctionOf(CCScrollLayerExt, moveToTop, , 0) {
	return reinterpret_cast<$CCScrollLayerExt<CCScrollLayerExt>*>(this)->$CCScrollLayerExt<CCScrollLayerExt>::moveToTop();
}

getOutoflineFunctionOf(CCScrollLayerExt, moveToTopWithOffset, , 1, float) {
	return reinterpret_cast<$CCScrollLayerExt<CCScrollLayerExt>*>(this)->$CCScrollLayerExt<CCScrollLayerExt>::moveToTopWithOffset(p0);
}

getOutoflineFunctionOf(CCSpritePlus, initWithSpriteFrameName, , 1, char const*) {
	return reinterpret_cast<$CCSpritePlus<CCSpritePlus>*>(this)->$CCSpritePlus<CCSpritePlus>::initWithSpriteFrameName(p0);
}

getOutoflineFunctionOf(CCTextInputNode, create, , 6, float, float, char const*, char const*, int, char const*) {
	return $CCTextInputNode<CCTextInputNode>::create(p0, p1, p2, p3, p4, p5);
}

getOutoflineFunctionOf(CCTextInputNode, getString, , 0) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::getString();
}

getOutoflineFunctionOf(CCTextInputNode, refreshLabel, , 0) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::refreshLabel();
}

getOutoflineFunctionOf(CCTextInputNode, setAllowedChars, , 1, gd::string) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::setAllowedChars(p0);
}

getOutoflineFunctionOf(CCTextInputNode, setLabelNormalColor, , 1, cocos2d::_ccColor3B) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::setLabelNormalColor(p0);
}

getOutoflineFunctionOf(CCTextInputNode, setLabelPlaceholderColor, , 1, cocos2d::_ccColor3B) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::setLabelPlaceholderColor(p0);
}

getOutoflineFunctionOf(CCTextInputNode, setLabelPlaceholderScale, , 1, float) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::setLabelPlaceholderScale(p0);
}

getOutoflineFunctionOf(CCTextInputNode, setMaxLabelScale, , 1, float) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::setMaxLabelScale(p0);
}

getOutoflineFunctionOf(CCTextInputNode, setMaxLabelWidth, , 1, float) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::setMaxLabelWidth(p0);
}

getOutoflineFunctionOf(CCTextInputNode, setString, , 1, gd::string) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::setString(p0);
}

getOutoflineFunctionOf(CCTextInputNode, updateLabel, , 1, gd::string) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::updateLabel(p0);
}

getOutoflineFunctionOf(CCTextInputNode, forceOffset, , 0) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::forceOffset();
}

getOutoflineFunctionOf(CCTextInputNode, registerWithTouchDispatcher, , 0) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::registerWithTouchDispatcher();
}

getOutoflineFunctionOf(CCTextInputNode, init, , 6, float, float, char const*, char const*, int, char const*) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::init(p0, p1, p2, p3, p4, p5);
}

CCTextInputNode::~CCTextInputNode() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->destructor();
}

getOutoflineFunctionOf(CCTextInputNode, visit, , 0) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::visit();
}

getOutoflineFunctionOf(CCTextInputNode, ccTouchBegan, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::ccTouchBegan(p0, p1);
}

getOutoflineFunctionOf(CCTextInputNode, ccTouchCancelled, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::ccTouchCancelled(p0, p1);
}

getOutoflineFunctionOf(CCTextInputNode, ccTouchEnded, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::ccTouchEnded(p0, p1);
}

getOutoflineFunctionOf(CCTextInputNode, ccTouchMoved, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::ccTouchMoved(p0, p1);
}

getOutoflineFunctionOf(CCTextInputNode, textChanged, , 0) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::textChanged();
}

getOutoflineFunctionOf(CCTextInputNode, onClickTrackNode, , 1, bool) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::onClickTrackNode(p0);
}

getOutoflineFunctionOf(CCTextInputNode, keyboardWillShow, , 1, cocos2d::CCIMEKeyboardNotificationInfo&) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::keyboardWillShow(p0);
}

getOutoflineFunctionOf(CCTextInputNode, keyboardWillHide, , 1, cocos2d::CCIMEKeyboardNotificationInfo&) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::keyboardWillHide(p0);
}

getOutoflineFunctionOf(CCTextInputNode, onTextFieldInsertText, , 3, cocos2d::CCTextFieldTTF*, char const*, int) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::onTextFieldInsertText(p0, p1, p2);
}

getOutoflineFunctionOf(CCTextInputNode, onTextFieldAttachWithIME, , 1, cocos2d::CCTextFieldTTF*) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::onTextFieldAttachWithIME(p0);
}

getOutoflineFunctionOf(CCTextInputNode, onTextFieldDetachWithIME, , 1, cocos2d::CCTextFieldTTF*) {
	return reinterpret_cast<$CCTextInputNode<CCTextInputNode>*>(this)->$CCTextInputNode<CCTextInputNode>::onTextFieldDetachWithIME(p0);
}

getOutoflineFunctionOf(CheckpointObject, create, , 0) {
	return $CheckpointObject<CheckpointObject>::create();
}

getOutoflineFunctionOf(CheckpointObject, getObject, , 0) {
	return reinterpret_cast<$CheckpointObject<CheckpointObject>*>(this)->$CheckpointObject<CheckpointObject>::getObject();
}

getOutoflineFunctionOf(CollisionBlockPopup, create, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return $CollisionBlockPopup<CollisionBlockPopup>::create(p0, p1);
}

getOutoflineFunctionOf(CollisionBlockPopup, onNextItemID, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$CollisionBlockPopup<CollisionBlockPopup>*>(this)->$CollisionBlockPopup<CollisionBlockPopup>::onNextItemID(p0);
}

getOutoflineFunctionOf(CollisionTriggerAction, createFromString, , 1, gd::string) {
	return $CollisionTriggerAction<CollisionTriggerAction>::createFromString(p0);
}

getOutoflineFunctionOf(ColorAction, getSaveString, , 0) {
	return reinterpret_cast<$ColorAction<ColorAction>*>(this)->$ColorAction<ColorAction>::getSaveString();
}

getOutoflineFunctionOf(ColorAction, setupFromDict, , 1, cocos2d::CCDictionary*) {
	return reinterpret_cast<$ColorAction<ColorAction>*>(this)->$ColorAction<ColorAction>::setupFromDict(p0);
}

getOutoflineFunctionOf(ColorAction, setupFromString, , 1, gd::string) {
	return reinterpret_cast<$ColorAction<ColorAction>*>(this)->$ColorAction<ColorAction>::setupFromString(p0);
}

getOutoflineFunctionOf(ColorChannelSprite, updateBlending, , 1, bool) {
	return reinterpret_cast<$ColorChannelSprite<ColorChannelSprite>*>(this)->$ColorChannelSprite<ColorChannelSprite>::updateBlending(p0);
}

getOutoflineFunctionOf(ColorChannelSprite, updateCopyLabel, , 2, int, bool) {
	return reinterpret_cast<$ColorChannelSprite<ColorChannelSprite>*>(this)->$ColorChannelSprite<ColorChannelSprite>::updateCopyLabel(p0, p1);
}

getOutoflineFunctionOf(ColorChannelSprite, updateOpacity, , 1, float) {
	return reinterpret_cast<$ColorChannelSprite<ColorChannelSprite>*>(this)->$ColorChannelSprite<ColorChannelSprite>::updateOpacity(p0);
}

getOutoflineFunctionOf(ColorChannelSprite, updateValues, , 1, ColorAction*) {
	return reinterpret_cast<$ColorChannelSprite<ColorChannelSprite>*>(this)->$ColorChannelSprite<ColorChannelSprite>::updateValues(p0);
}

getOutoflineFunctionOf(CommentCell, loadFromComment, , 1, GJComment*) {
	return reinterpret_cast<$CommentCell<CommentCell>*>(this)->$CommentCell<CommentCell>::loadFromComment(p0);
}

getOutoflineFunctionOf(CountTriggerAction, createFromString, , 1, gd::string) {
	return $CountTriggerAction<CountTriggerAction>::createFromString(p0);
}

getOutoflineFunctionOf(CreateMenuItem, create, , 4, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler) {
	return $CreateMenuItem<CreateMenuItem>::create(p0, p1, p2, p3);
}

getOutoflineFunctionOf(CreatorLayer, onMyLevels, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$CreatorLayer<CreatorLayer>*>(this)->$CreatorLayer<CreatorLayer>::onMyLevels(p0);
}

getOutoflineFunctionOf(CreatorLayer, onSavedLevels, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$CreatorLayer<CreatorLayer>*>(this)->$CreatorLayer<CreatorLayer>::onSavedLevels(p0);
}

CurrencyRewardLayer::~CurrencyRewardLayer() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$CurrencyRewardLayer<CurrencyRewardLayer>*>(this)->destructor();
}

getOutoflineFunctionOf(CurrencyRewardLayer, update, , 1, float) {
	return reinterpret_cast<$CurrencyRewardLayer<CurrencyRewardLayer>*>(this)->$CurrencyRewardLayer<CurrencyRewardLayer>::update(p0);
}

getOutoflineFunctionOf(CustomListView, create, , 5, cocos2d::CCArray*, float, float, int, BoomListType) {
	return $CustomListView<CustomListView>::create(p0, p1, p2, p3, p4);
}

getOutoflineFunctionOf(CustomListView, getListCell, , 1, char const*) {
	return reinterpret_cast<$CustomListView<CustomListView>*>(this)->$CustomListView<CustomListView>::getListCell(p0);
}

getOutoflineFunctionOf(CustomListView, loadCell, , 2, TableViewCell*, int) {
	return reinterpret_cast<$CustomListView<CustomListView>*>(this)->$CustomListView<CustomListView>::loadCell(p0, p1);
}

getOutoflineFunctionOf(CustomListView, setupList, , 0) {
	return reinterpret_cast<$CustomListView<CustomListView>*>(this)->$CustomListView<CustomListView>::setupList();
}

getOutoflineFunctionOf(CustomSongCell, loadFromObject, , 1, SongInfoObject*) {
	return reinterpret_cast<$CustomSongCell<CustomSongCell>*>(this)->$CustomSongCell<CustomSongCell>::loadFromObject(p0);
}

getOutoflineFunctionOf(CustomSongLayer, init, , 1, LevelSettingsObject*) {
	return reinterpret_cast<$CustomSongLayer<CustomSongLayer>*>(this)->$CustomSongLayer<CustomSongLayer>::init(p0);
}

getOutoflineFunctionOf(CustomSongLayer, onArtists, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$CustomSongLayer<CustomSongLayer>*>(this)->$CustomSongLayer<CustomSongLayer>::onArtists(p0);
}

getOutoflineFunctionOf(CustomSongLayer, onSongBrowser, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$CustomSongLayer<CustomSongLayer>*>(this)->$CustomSongLayer<CustomSongLayer>::onSongBrowser(p0);
}

DialogLayer::~DialogLayer() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$DialogLayer<DialogLayer>*>(this)->destructor();
}

getOutoflineFunctionOf(DialogLayer, onEnter, , 0) {
	return reinterpret_cast<$DialogLayer<DialogLayer>*>(this)->$DialogLayer<DialogLayer>::onEnter();
}

getOutoflineFunctionOf(DialogLayer, ccTouchBegan, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$DialogLayer<DialogLayer>*>(this)->$DialogLayer<DialogLayer>::ccTouchBegan(p0, p1);
}

getOutoflineFunctionOf(DialogLayer, ccTouchMoved, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$DialogLayer<DialogLayer>*>(this)->$DialogLayer<DialogLayer>::ccTouchMoved(p0, p1);
}

getOutoflineFunctionOf(DialogLayer, ccTouchEnded, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$DialogLayer<DialogLayer>*>(this)->$DialogLayer<DialogLayer>::ccTouchEnded(p0, p1);
}

getOutoflineFunctionOf(DialogLayer, ccTouchCancelled, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$DialogLayer<DialogLayer>*>(this)->$DialogLayer<DialogLayer>::ccTouchCancelled(p0, p1);
}

getOutoflineFunctionOf(DialogLayer, registerWithTouchDispatcher, , 0) {
	return reinterpret_cast<$DialogLayer<DialogLayer>*>(this)->$DialogLayer<DialogLayer>::registerWithTouchDispatcher();
}

getOutoflineFunctionOf(DialogLayer, keyBackClicked, , 0) {
	return reinterpret_cast<$DialogLayer<DialogLayer>*>(this)->$DialogLayer<DialogLayer>::keyBackClicked();
}

getOutoflineFunctionOf(DialogLayer, keyDown, , 1, cocos2d::enumKeyCodes) {
	return reinterpret_cast<$DialogLayer<DialogLayer>*>(this)->$DialogLayer<DialogLayer>::keyDown(p0);
}

getOutoflineFunctionOf(DialogLayer, fadeInTextFinished, , 1, TextArea*) {
	return reinterpret_cast<$DialogLayer<DialogLayer>*>(this)->$DialogLayer<DialogLayer>::fadeInTextFinished(p0);
}

getOutoflineFunctionOf(EditorOptionsLayer, onButtonsPerRow, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$EditorOptionsLayer<EditorOptionsLayer>*>(this)->$EditorOptionsLayer<EditorOptionsLayer>::onButtonsPerRow(p0);
}

EditorPauseLayer::~EditorPauseLayer() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$EditorPauseLayer<EditorPauseLayer>*>(this)->destructor();
}

getOutoflineFunctionOf(EditorPauseLayer, keyBackClicked, , 0) {
	return reinterpret_cast<$EditorPauseLayer<EditorPauseLayer>*>(this)->$EditorPauseLayer<EditorPauseLayer>::keyBackClicked();
}

getOutoflineFunctionOf(EditorPauseLayer, keyDown, , 1, cocos2d::enumKeyCodes) {
	return reinterpret_cast<$EditorPauseLayer<EditorPauseLayer>*>(this)->$EditorPauseLayer<EditorPauseLayer>::keyDown(p0);
}

getOutoflineFunctionOf(EditorPauseLayer, customSetup, , 0) {
	return reinterpret_cast<$EditorPauseLayer<EditorPauseLayer>*>(this)->$EditorPauseLayer<EditorPauseLayer>::customSetup();
}

getOutoflineFunctionOf(EditorPauseLayer, FLAlert_Clicked, , 2, FLAlertLayer*, bool) {
	return reinterpret_cast<$EditorPauseLayer<EditorPauseLayer>*>(this)->$EditorPauseLayer<EditorPauseLayer>::FLAlert_Clicked(p0, p1);
}

getOutoflineFunctionOf(EditorPauseLayer, create, , 1, LevelEditorLayer*) {
	return $EditorPauseLayer<EditorPauseLayer>::create(p0);
}

getOutoflineFunctionOf(EditorPauseLayer, saveLevel, , 0) {
	return reinterpret_cast<$EditorPauseLayer<EditorPauseLayer>*>(this)->$EditorPauseLayer<EditorPauseLayer>::saveLevel();
}

getOutoflineFunctionOf(EditorPauseLayer, init, , 1, LevelEditorLayer*) {
	return reinterpret_cast<$EditorPauseLayer<EditorPauseLayer>*>(this)->$EditorPauseLayer<EditorPauseLayer>::init(p0);
}

getOutoflineFunctionOf(EditorUI, constrainGameLayerPosition, , 0) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::constrainGameLayerPosition();
}

getOutoflineFunctionOf(EditorUI, create, , 1, LevelEditorLayer*) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::create(p0);
}

getOutoflineFunctionOf(EditorUI, deselectAll, , 0) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::deselectAll();
}

getOutoflineFunctionOf(EditorUI, onDeselectAll, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::onDeselectAll(p0);
}

getOutoflineFunctionOf(EditorUI, disableButton, , 1, CreateMenuItem*) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::disableButton(p0);
}

getOutoflineFunctionOf(EditorUI, editButtonUsable, , 0) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::editButtonUsable();
}

getOutoflineFunctionOf(EditorUI, editObject, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::editObject(p0);
}

getOutoflineFunctionOf(EditorUI, enableButton, , 1, CreateMenuItem*) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::enableButton(p0);
}

getOutoflineFunctionOf(EditorUI, getCreateBtn, , 2, int, int) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::getCreateBtn(p0, p1);
}

getOutoflineFunctionOf(EditorUI, getGroupCenter, , 2, cocos2d::CCArray*, bool) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::getGroupCenter(p0, p1);
}

getOutoflineFunctionOf(EditorUI, getSelectedObjects, , 0) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::getSelectedObjects();
}

getOutoflineFunctionOf(EditorUI, init, , 1, LevelEditorLayer*) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::init(p0);
}

getOutoflineFunctionOf(EditorUI, keyDown, , 1, cocos2d::enumKeyCodes) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::keyDown(p0);
}

getOutoflineFunctionOf(EditorUI, moveObject, , 2, GameObject*, cocos2d::CCPoint) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::moveObject(p0, p1);
}

getOutoflineFunctionOf(EditorUI, onDuplicate, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::onDuplicate(p0);
}

getOutoflineFunctionOf(EditorUI, pasteObjects, , 1, gd::string) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::pasteObjects(p0);
}

getOutoflineFunctionOf(EditorUI, playerTouchBegan, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::playerTouchBegan(p0, p1);
}

getOutoflineFunctionOf(EditorUI, playtestStopped, , 0) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::playtestStopped();
}

getOutoflineFunctionOf(EditorUI, redoLastAction, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::redoLastAction(p0);
}

getOutoflineFunctionOf(EditorUI, replaceGroupID, , 3, GameObject*, int, int) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::replaceGroupID(p0, p1, p2);
}

getOutoflineFunctionOf(EditorUI, scaleChanged, , 1, float) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::scaleChanged(p0);
}

getOutoflineFunctionOf(EditorUI, scaleObjects, , 3, cocos2d::CCArray*, float, cocos2d::CCPoint) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::scaleObjects(p0, p1, p2);
}

getOutoflineFunctionOf(EditorUI, selectObjects, , 2, cocos2d::CCArray*, bool) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::selectObjects(p0, p1);
}

getOutoflineFunctionOf(EditorUI, setupCreateMenu, , 0) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::setupCreateMenu();
}

getOutoflineFunctionOf(EditorUI, undoLastAction, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::undoLastAction(p0);
}

getOutoflineFunctionOf(EditorUI, updateButtons, , 0) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::updateButtons();
}

getOutoflineFunctionOf(EditorUI, updateObjectInfoLabel, , 0) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::updateObjectInfoLabel();
}

getOutoflineFunctionOf(EditorUI, updateSlider, , 0) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::updateSlider();
}

getOutoflineFunctionOf(EditorUI, updateZoom, , 1, float) {
	return reinterpret_cast<$EditorUI<EditorUI>*>(this)->$EditorUI<EditorUI>::updateZoom(p0);
}

getOutoflineFunctionOf(EffectGameObject, create, , 1, char const*) {
	return $EffectGameObject<EffectGameObject>::create(p0);
}

getOutoflineFunctionOf(EffectGameObject, getTargetColorIndex, , 0) {
	return reinterpret_cast<$EffectGameObject<EffectGameObject>*>(this)->$EffectGameObject<EffectGameObject>::getTargetColorIndex();
}

getOutoflineFunctionOf(EffectGameObject, triggerObject, , 1, GJBaseGameLayer*) {
	return reinterpret_cast<$EffectGameObject<EffectGameObject>*>(this)->$EffectGameObject<EffectGameObject>::triggerObject(p0);
}

getOutoflineFunctionOf(EndLevelLayer, create, , 0) {
	return $EndLevelLayer<EndLevelLayer>::create();
}

getOutoflineFunctionOf(EndPortalObject, create, , 0) {
	return $EndPortalObject<EndPortalObject>::create();
}

getOutoflineFunctionOf(EndPortalObject, updateColors, , 1, cocos2d::_ccColor3B) {
	return reinterpret_cast<$EndPortalObject<EndPortalObject>*>(this)->$EndPortalObject<EndPortalObject>::updateColors(p0);
}

FLAlertLayer::~FLAlertLayer() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$FLAlertLayer<FLAlertLayer>*>(this)->destructor();
}

getOutoflineFunctionOf(FLAlertLayer, onEnter, , 0) {
	return reinterpret_cast<$FLAlertLayer<FLAlertLayer>*>(this)->$FLAlertLayer<FLAlertLayer>::onEnter();
}

getOutoflineFunctionOf(FLAlertLayer, ccTouchBegan, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$FLAlertLayer<FLAlertLayer>*>(this)->$FLAlertLayer<FLAlertLayer>::ccTouchBegan(p0, p1);
}

getOutoflineFunctionOf(FLAlertLayer, ccTouchMoved, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$FLAlertLayer<FLAlertLayer>*>(this)->$FLAlertLayer<FLAlertLayer>::ccTouchMoved(p0, p1);
}

getOutoflineFunctionOf(FLAlertLayer, ccTouchEnded, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$FLAlertLayer<FLAlertLayer>*>(this)->$FLAlertLayer<FLAlertLayer>::ccTouchEnded(p0, p1);
}

getOutoflineFunctionOf(FLAlertLayer, ccTouchCancelled, , 2, cocos2d::CCTouch*, cocos2d::CCEvent*) {
	return reinterpret_cast<$FLAlertLayer<FLAlertLayer>*>(this)->$FLAlertLayer<FLAlertLayer>::ccTouchCancelled(p0, p1);
}

getOutoflineFunctionOf(FLAlertLayer, registerWithTouchDispatcher, , 0) {
	return reinterpret_cast<$FLAlertLayer<FLAlertLayer>*>(this)->$FLAlertLayer<FLAlertLayer>::registerWithTouchDispatcher();
}

getOutoflineFunctionOf(FLAlertLayer, keyBackClicked, , 0) {
	return reinterpret_cast<$FLAlertLayer<FLAlertLayer>*>(this)->$FLAlertLayer<FLAlertLayer>::keyBackClicked();
}

getOutoflineFunctionOf(FLAlertLayer, keyDown, , 1, cocos2d::enumKeyCodes) {
	return reinterpret_cast<$FLAlertLayer<FLAlertLayer>*>(this)->$FLAlertLayer<FLAlertLayer>::keyDown(p0);
}

getOutoflineFunctionOf(FLAlertLayer, show, , 0) {
	return reinterpret_cast<$FLAlertLayer<FLAlertLayer>*>(this)->$FLAlertLayer<FLAlertLayer>::show();
}

getOutoflineFunctionOf(FLAlertLayer, init, , 8, FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float, bool, float) {
	return reinterpret_cast<$FLAlertLayer<FLAlertLayer>*>(this)->$FLAlertLayer<FLAlertLayer>::init(p0, p1, p2, p3, p4, p5, p6, p7);
}

getOutoflineFunctionOf(FLAlertLayer, create, , 6, FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float) {
	return $FLAlertLayer<FLAlertLayer>::create(p0, p1, p2, p3, p4, p5);
}

getOutoflineFunctionOf(FLAlertLayer, create, , 8, FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float, bool, float) {
	return $FLAlertLayer<FLAlertLayer>::create(p0, p1, p2, p3, p4, p5, p6, p7);
}

getOutoflineFunctionOf(GameToolbox, createToggleButton, , 8, gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCArray*) {
	return $GameToolbox<GameToolbox>::createToggleButton(p0, p1, p2, p3, p4, p5, p6, p7);
}

getOutoflineFunctionOf(GameToolbox, createToggleButton, , 15, gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCNode*, cocos2d::CCNode*, float, float, float, cocos2d::CCPoint, char const*, bool, int, cocos2d::CCArray*) {
	return $GameToolbox<GameToolbox>::createToggleButton(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
}

getOutoflineFunctionOf(GJRotationControl, init, , 0) {
	return reinterpret_cast<$GJRotationControl<GJRotationControl>*>(this)->$GJRotationControl<GJRotationControl>::init();
}

getOutoflineFunctionOf(GJRotationControl, updateSliderPosition, , 1, cocos2d::CCPoint) {
	return reinterpret_cast<$GJRotationControl<GJRotationControl>*>(this)->$GJRotationControl<GJRotationControl>::updateSliderPosition(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, objectsCollided, , 2, int, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::objectsCollided(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, createMoveCommand, , 8, cocos2d::CCPoint, int, float, int, float, bool, bool, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::createMoveCommand(p0, p1, p2, p3, p4, p5, p6, p7);
}

getOutoflineFunctionOf(GJBaseGameLayer, updateColor, , 10, cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::updateColor(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}

getOutoflineFunctionOf(GJBaseGameLayer, flipGravity, , 3, PlayerObject*, bool, bool) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::flipGravity(p0, p1, p2);
}

getOutoflineFunctionOf(GJBaseGameLayer, calculateColorValues, , 6, EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::calculateColorValues(p0, p1, p2, p3, p4, p5);
}

getOutoflineFunctionOf(GJBaseGameLayer, toggleGroupTriggered, , 2, int, bool) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::toggleGroupTriggered(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, spawnGroup, , 1, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::spawnGroup(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, addToSection, , 1, GameObject*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::addToSection(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, addToGroup, , 3, GameObject*, int, bool) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::addToGroup(p0, p1, p2);
}

getOutoflineFunctionOf(GJBaseGameLayer, removeFromGroup, , 2, GameObject*, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::removeFromGroup(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, init, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::init();
}

getOutoflineFunctionOf(GJBaseGameLayer, addObjectCounter, , 2, LabelGameObject*, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::addObjectCounter(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, addToGroups, , 2, GameObject*, bool) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::addToGroups(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, atlasValue, , 1, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::atlasValue(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, bumpPlayer, , 2, PlayerObject*, GameObject*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::bumpPlayer(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, calculateOpacityValues, , 4, EffectGameObject*, EffectGameObject*, float, GJEffectManager*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::calculateOpacityValues(p0, p1, p2, p3);
}

getOutoflineFunctionOf(GJBaseGameLayer, checkSpawnObjects, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::checkSpawnObjects();
}

getOutoflineFunctionOf(GJBaseGameLayer, collectItem, , 2, int, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::collectItem(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, collectedObject, , 1, EffectGameObject*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::collectedObject(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, createTextLayers, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::createTextLayers();
}

getOutoflineFunctionOf(GJBaseGameLayer, damagingObjectsInRect, , 1, cocos2d::CCRect) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::damagingObjectsInRect(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, enableHighCapacityMode, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::enableHighCapacityMode();
}

getOutoflineFunctionOf(GJBaseGameLayer, getCapacityString, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::getCapacityString();
}

getOutoflineFunctionOf(GJBaseGameLayer, getGroundHeightForMode, , 1, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::getGroundHeightForMode(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, getGroup, , 1, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::getGroup(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, getMoveDeltaForObjects, , 2, int, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::getMoveDeltaForObjects(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, getOptimizedGroup, , 1, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::getOptimizedGroup(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, getStaticGroup, , 1, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::getStaticGroup(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, isGroupDisabledForObject, , 1, GameObject*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::isGroupDisabledForObject(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, isGroupDisabledForObjectFull, , 2, GameObject*, cocos2d::CCArray*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::isGroupDisabledForObjectFull(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, loadUpToPosition, , 1, float) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::loadUpToPosition(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, objectIntersectsCircle, , 2, GameObject*, GameObject*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::objectIntersectsCircle(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, objectTriggered, , 1, EffectGameObject*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::objectTriggered(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, optimizeMoveGroups, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::optimizeMoveGroups();
}

getOutoflineFunctionOf(GJBaseGameLayer, parentForZLayer, , 3, int, bool, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::parentForZLayer(p0, p1, p2);
}

getOutoflineFunctionOf(GJBaseGameLayer, playerTouchedRing, , 2, PlayerObject*, GameObject*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::playerTouchedRing(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, processColorObject, , 5, EffectGameObject*, int, cocos2d::CCDictionary*, float, GJEffectManager*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::processColorObject(p0, p1, p2, p3, p4);
}

getOutoflineFunctionOf(GJBaseGameLayer, processFollowActions, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::processFollowActions();
}

getOutoflineFunctionOf(GJBaseGameLayer, processMoveActions, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::processMoveActions();
}

getOutoflineFunctionOf(GJBaseGameLayer, processMoveActionsStep, , 1, float) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::processMoveActionsStep(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, processOpacityObject, , 4, EffectGameObject*, cocos2d::CCDictionary*, float, GJEffectManager*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::processOpacityObject(p0, p1, p2, p3);
}

getOutoflineFunctionOf(GJBaseGameLayer, processPlayerFollowActions, , 1, float) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::processPlayerFollowActions(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, processRotationActions, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::processRotationActions();
}

getOutoflineFunctionOf(GJBaseGameLayer, pushButton, , 2, int, bool) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::pushButton(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, rectIntersectsCircle, , 3, cocos2d::CCRect, cocos2d::CCPoint, float) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::rectIntersectsCircle(p0, p1, p2);
}

getOutoflineFunctionOf(GJBaseGameLayer, refreshCounterLabels, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::refreshCounterLabels();
}

getOutoflineFunctionOf(GJBaseGameLayer, releaseButton, , 2, int, bool) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::releaseButton(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, removeFromGroups, , 1, GameObject*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::removeFromGroups(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, removeObjectFromSection, , 1, GameObject*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::removeObjectFromSection(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, reorderObjectSection, , 1, GameObject*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::reorderObjectSection(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, resetGroupCounters, , 1, bool) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::resetGroupCounters(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, resetMoveOptimizedValue, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::resetMoveOptimizedValue();
}

getOutoflineFunctionOf(GJBaseGameLayer, sectionForPos, , 1, float) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::sectionForPos(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, setupLayers, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::setupLayers();
}

getOutoflineFunctionOf(GJBaseGameLayer, shouldExitHackedLevel, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::shouldExitHackedLevel();
}

getOutoflineFunctionOf(GJBaseGameLayer, spawnGroupTriggered, , 3, int, float, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::spawnGroupTriggered(p0, p1, p2);
}

getOutoflineFunctionOf(GJBaseGameLayer, staticObjectsInRect, , 1, cocos2d::CCRect) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::staticObjectsInRect(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, testInstantCountTrigger, , 5, int, int, int, bool, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::testInstantCountTrigger(p0, p1, p2, p3, p4);
}

getOutoflineFunctionOf(GJBaseGameLayer, toggleGroup, , 2, int, bool) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::toggleGroup(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, togglePlayerVisibility, , 1, bool) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::togglePlayerVisibility(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, triggerMoveCommand, , 1, EffectGameObject*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::triggerMoveCommand(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, updateCollisionBlocks, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::updateCollisionBlocks();
}

getOutoflineFunctionOf(GJBaseGameLayer, updateCounters, , 2, int, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::updateCounters(p0, p1);
}

getOutoflineFunctionOf(GJBaseGameLayer, updateDisabledObjectsLastPos, , 1, cocos2d::CCArray*) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::updateDisabledObjectsLastPos(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, updateLayerCapacity, , 1, gd::string) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::updateLayerCapacity(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, updateLegacyLayerCapacity, , 4, int, int, int, int) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::updateLegacyLayerCapacity(p0, p1, p2, p3);
}

getOutoflineFunctionOf(GJBaseGameLayer, updateOBB2, , 1, cocos2d::CCRect) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::updateOBB2(p0);
}

getOutoflineFunctionOf(GJBaseGameLayer, updateQueuedLabels, , 0) {
	return reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->$GJBaseGameLayer<GJBaseGameLayer>::updateQueuedLabels();
}

GJBaseGameLayer::~GJBaseGameLayer() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$GJBaseGameLayer<GJBaseGameLayer>*>(this)->destructor();
}

GJComment::~GJComment() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$GJComment<GJComment>*>(this)->destructor();
}

getOutoflineFunctionOf(GJComment, init, , 0) {
	return reinterpret_cast<$GJComment<GJComment>*>(this)->$GJComment<GJComment>::init();
}

GJCommentListLayer::~GJCommentListLayer() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$GJCommentListLayer<GJCommentListLayer>*>(this)->destructor();
}

getOutoflineFunctionOf(GJCommentListLayer, create, , 6, BoomListView*, char const*, cocos2d::_ccColor4B, float, float, bool) {
	return $GJCommentListLayer<GJCommentListLayer>::create(p0, p1, p2, p3, p4, p5);
}

getOutoflineFunctionOf(GJDropDownLayer, customSetup, , 0) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::customSetup();
}

getOutoflineFunctionOf(GJDropDownLayer, enterLayer, , 0) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::enterLayer();
}

getOutoflineFunctionOf(GJDropDownLayer, exitLayer, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::exitLayer(p0);
}

getOutoflineFunctionOf(GJDropDownLayer, showLayer, , 1, bool) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::showLayer(p0);
}

getOutoflineFunctionOf(GJDropDownLayer, hideLayer, , 1, bool) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::hideLayer(p0);
}

getOutoflineFunctionOf(GJDropDownLayer, layerVisible, , 0) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::layerVisible();
}

getOutoflineFunctionOf(GJDropDownLayer, layerHidden, , 0) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::layerHidden();
}

getOutoflineFunctionOf(GJDropDownLayer, enterAnimFinished, , 0) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::enterAnimFinished();
}

getOutoflineFunctionOf(GJDropDownLayer, disableUI, , 0) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::disableUI();
}

getOutoflineFunctionOf(GJDropDownLayer, enableUI, , 0) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::enableUI();
}

getOutoflineFunctionOf(GJDropDownLayer, draw, , 0) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::draw();
}

getOutoflineFunctionOf(GJDropDownLayer, init, , 2, char const*, float) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::init(p0, p1);
}

getOutoflineFunctionOf(GJDropDownLayer, registerWithTouchDispatcher, , 0) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::registerWithTouchDispatcher();
}

getOutoflineFunctionOf(GJDropDownLayer, keyBackClicked, , 0) {
	return reinterpret_cast<$GJDropDownLayer<GJDropDownLayer>*>(this)->$GJDropDownLayer<GJDropDownLayer>::keyBackClicked();
}

getOutoflineFunctionOf(GJDropDownLayer, create, , 1, char const*) {
	return $GJDropDownLayer<GJDropDownLayer>::create(p0);
}

getOutoflineFunctionOf(GJEffectManager, init, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::init();
}

getOutoflineFunctionOf(GJEffectManager, activeColorForIndex, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::activeColorForIndex(p0);
}

getOutoflineFunctionOf(GJEffectManager, activeOpacityForIndex, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::activeOpacityForIndex(p0);
}

getOutoflineFunctionOf(GJEffectManager, addAllInheritedColorActions, , 1, cocos2d::CCArray*) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::addAllInheritedColorActions(p0);
}

getOutoflineFunctionOf(GJEffectManager, addGroupPulseEffect, , 1, PulseEffectAction*) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::addGroupPulseEffect(p0);
}

getOutoflineFunctionOf(GJEffectManager, calculateBaseActiveColors, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::calculateBaseActiveColors();
}

getOutoflineFunctionOf(GJEffectManager, calculateInheritedColor, , 2, int, ColorAction*) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::calculateInheritedColor(p0, p1);
}

getOutoflineFunctionOf(GJEffectManager, calculateLightBGColor, , 1, cocos2d::_ccColor3B) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::calculateLightBGColor(p0);
}

getOutoflineFunctionOf(GJEffectManager, colorActionChanged, , 1, ColorAction*) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::colorActionChanged(p0);
}

getOutoflineFunctionOf(GJEffectManager, colorExists, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::colorExists(p0);
}

getOutoflineFunctionOf(GJEffectManager, colorForEffect, , 2, cocos2d::_ccColor3B, cocos2d::_ccHSVValue) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::colorForEffect(p0, p1);
}

getOutoflineFunctionOf(GJEffectManager, colorForGroupID, , 3, int, cocos2d::_ccColor3B const&, bool) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::colorForGroupID(p0, p1, p2);
}

getOutoflineFunctionOf(GJEffectManager, colorForIndex, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::colorForIndex(p0);
}

getOutoflineFunctionOf(GJEffectManager, colorForPulseEffect, , 2, cocos2d::_ccColor3B const&, PulseEffectAction*) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::colorForPulseEffect(p0, p1);
}

getOutoflineFunctionOf(GJEffectManager, countChangedForItem, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::countChangedForItem(p0);
}

getOutoflineFunctionOf(GJEffectManager, countForItem, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::countForItem(p0);
}

getOutoflineFunctionOf(GJEffectManager, create, , 0) {
	return $GJEffectManager<GJEffectManager>::create();
}

getOutoflineFunctionOf(GJEffectManager, createFollowCommand, , 7, float, float, float, int, int, bool, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::createFollowCommand(p0, p1, p2, p3, p4, p5, p6);
}

getOutoflineFunctionOf(GJEffectManager, createMoveCommand, , 8, cocos2d::CCPoint, int, float, int, float, bool, bool, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::createMoveCommand(p0, p1, p2, p3, p4, p5, p6, p7);
}

getOutoflineFunctionOf(GJEffectManager, createPlayerFollowCommand, , 7, float, float, int, float, float, int, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::createPlayerFollowCommand(p0, p1, p2, p3, p4, p5, p6);
}

getOutoflineFunctionOf(GJEffectManager, createRotateCommand, , 8, int, float, int, int, int, float, bool, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::createRotateCommand(p0, p1, p2, p3, p4, p5, p6, p7);
}

getOutoflineFunctionOf(GJEffectManager, getAllColorActions, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::getAllColorActions();
}

getOutoflineFunctionOf(GJEffectManager, getAllColorSprites, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::getAllColorSprites();
}

getOutoflineFunctionOf(GJEffectManager, getColorAction, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::getColorAction(p0);
}

getOutoflineFunctionOf(GJEffectManager, getColorSprite, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::getColorSprite(p0);
}

getOutoflineFunctionOf(GJEffectManager, getCurrentStateString, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::getCurrentStateString();
}

getOutoflineFunctionOf(GJEffectManager, getLoadedMoveOffset, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::getLoadedMoveOffset();
}

getOutoflineFunctionOf(GJEffectManager, getMixedColor, , 3, cocos2d::_ccColor3B, cocos2d::_ccColor3B, float) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::getMixedColor(p0, p1, p2);
}

getOutoflineFunctionOf(GJEffectManager, getOpacityActionForGroup, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::getOpacityActionForGroup(p0);
}

getOutoflineFunctionOf(GJEffectManager, getSaveString, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::getSaveString();
}

getOutoflineFunctionOf(GJEffectManager, handleObjectCollision, , 3, bool, int, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::handleObjectCollision(p0, p1, p2);
}

getOutoflineFunctionOf(GJEffectManager, hasActiveDualTouch, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::hasActiveDualTouch();
}

getOutoflineFunctionOf(GJEffectManager, hasBeenTriggered, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::hasBeenTriggered(p0);
}

getOutoflineFunctionOf(GJEffectManager, hasPulseEffectForGroupID, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::hasPulseEffectForGroupID(p0);
}

getOutoflineFunctionOf(GJEffectManager, isGroupEnabled, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::isGroupEnabled(p0);
}

getOutoflineFunctionOf(GJEffectManager, keyForGroupIDColor, , 3, int, cocos2d::_ccColor3B const&, bool) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::keyForGroupIDColor(p0, p1, p2);
}

getOutoflineFunctionOf(GJEffectManager, loadState, , 1, gd::string) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::loadState(p0);
}

getOutoflineFunctionOf(GJEffectManager, objectsCollided, , 2, int, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::objectsCollided(p0, p1);
}

getOutoflineFunctionOf(GJEffectManager, opacityForIndex, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::opacityForIndex(p0);
}

getOutoflineFunctionOf(GJEffectManager, opacityModForGroup, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::opacityModForGroup(p0);
}

getOutoflineFunctionOf(GJEffectManager, playerButton, , 2, bool, bool) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::playerButton(p0, p1);
}

getOutoflineFunctionOf(GJEffectManager, playerDied, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::playerDied();
}

getOutoflineFunctionOf(GJEffectManager, postCollisionCheck, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::postCollisionCheck();
}

getOutoflineFunctionOf(GJEffectManager, preCollisionCheck, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::preCollisionCheck();
}

getOutoflineFunctionOf(GJEffectManager, prepareMoveActions, , 2, float, bool) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::prepareMoveActions(p0, p1);
}

getOutoflineFunctionOf(GJEffectManager, processColors, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::processColors();
}

getOutoflineFunctionOf(GJEffectManager, processCopyColorPulseActions, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::processCopyColorPulseActions();
}

getOutoflineFunctionOf(GJEffectManager, processInheritedColors, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::processInheritedColors();
}

getOutoflineFunctionOf(GJEffectManager, processPulseActions, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::processPulseActions();
}

getOutoflineFunctionOf(GJEffectManager, registerCollisionTrigger, , 6, int, int, int, bool, bool, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::registerCollisionTrigger(p0, p1, p2, p3, p4, p5);
}

getOutoflineFunctionOf(GJEffectManager, removeAllPulseActions, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::removeAllPulseActions();
}

getOutoflineFunctionOf(GJEffectManager, removeColorAction, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::removeColorAction(p0);
}

getOutoflineFunctionOf(GJEffectManager, reset, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::reset();
}

getOutoflineFunctionOf(GJEffectManager, resetColorCache, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::resetColorCache();
}

getOutoflineFunctionOf(GJEffectManager, resetEffects, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::resetEffects();
}

getOutoflineFunctionOf(GJEffectManager, resetMoveActions, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::resetMoveActions();
}

getOutoflineFunctionOf(GJEffectManager, resetToggledGroups, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::resetToggledGroups();
}

getOutoflineFunctionOf(GJEffectManager, resetTriggeredIDs, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::resetTriggeredIDs();
}

getOutoflineFunctionOf(GJEffectManager, runCountTrigger, , 6, int, int, bool, int, bool, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::runCountTrigger(p0, p1, p2, p3, p4, p5);
}

getOutoflineFunctionOf(GJEffectManager, runDeathTrigger, , 3, int, bool, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::runDeathTrigger(p0, p1, p2);
}

getOutoflineFunctionOf(GJEffectManager, runOpacityActionOnGroup, , 4, int, float, float, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::runOpacityActionOnGroup(p0, p1, p2, p3);
}

getOutoflineFunctionOf(GJEffectManager, runPulseEffect, , 13, int, bool, float, float, float, PulseEffectType, cocos2d::_ccColor3B, cocos2d::_ccHSVValue, int, bool, bool, bool, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::runPulseEffect(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
}

getOutoflineFunctionOf(GJEffectManager, runTouchTriggerCommand, , 5, int, bool, TouchTriggerType, bool, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::runTouchTriggerCommand(p0, p1, p2, p3, p4);
}

getOutoflineFunctionOf(GJEffectManager, setColorAction, , 2, ColorAction*, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::setColorAction(p0, p1);
}

getOutoflineFunctionOf(GJEffectManager, setFollowing, , 3, int, int, bool) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::setFollowing(p0, p1, p2);
}

getOutoflineFunctionOf(GJEffectManager, setupFromString, , 1, gd::string) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::setupFromString(p0);
}

getOutoflineFunctionOf(GJEffectManager, shouldBlend, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::shouldBlend(p0);
}

getOutoflineFunctionOf(GJEffectManager, spawnGroup, , 3, int, float, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::spawnGroup(p0, p1, p2);
}

getOutoflineFunctionOf(GJEffectManager, stopActionsForTrigger, , 1, EffectGameObject*) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::stopActionsForTrigger(p0);
}

getOutoflineFunctionOf(GJEffectManager, stopMoveActionsForGroup, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::stopMoveActionsForGroup(p0);
}

getOutoflineFunctionOf(GJEffectManager, storeTriggeredID, , 1, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::storeTriggeredID(p0);
}

getOutoflineFunctionOf(GJEffectManager, toggleGroup, , 2, int, bool) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::toggleGroup(p0, p1);
}

getOutoflineFunctionOf(GJEffectManager, traverseInheritanceChain, , 1, InheritanceNode*) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::traverseInheritanceChain(p0);
}

getOutoflineFunctionOf(GJEffectManager, updateActiveOpacityEffects, , 0) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::updateActiveOpacityEffects();
}

getOutoflineFunctionOf(GJEffectManager, updateColorAction, , 1, ColorAction*) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::updateColorAction(p0);
}

getOutoflineFunctionOf(GJEffectManager, updateColorEffects, , 1, float) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::updateColorEffects(p0);
}

getOutoflineFunctionOf(GJEffectManager, updateColors, , 2, cocos2d::_ccColor3B, cocos2d::_ccColor3B) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::updateColors(p0, p1);
}

getOutoflineFunctionOf(GJEffectManager, updateEffects, , 1, float) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::updateEffects(p0);
}

getOutoflineFunctionOf(GJEffectManager, updateOpacityAction, , 1, OpacityEffectAction*) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::updateOpacityAction(p0);
}

getOutoflineFunctionOf(GJEffectManager, updateOpacityEffects, , 1, float) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::updateOpacityEffects(p0);
}

getOutoflineFunctionOf(GJEffectManager, updatePulseEffects, , 1, float) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::updatePulseEffects(p0);
}

getOutoflineFunctionOf(GJEffectManager, updateSpawnTriggers, , 1, float) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::updateSpawnTriggers(p0);
}

getOutoflineFunctionOf(GJEffectManager, wasFollowing, , 2, int, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::wasFollowing(p0, p1);
}

getOutoflineFunctionOf(GJEffectManager, wouldCreateLoop, , 2, InheritanceNode*, int) {
	return reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->$GJEffectManager<GJEffectManager>::wouldCreateLoop(p0, p1);
}

GJEffectManager::~GJEffectManager() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$GJEffectManager<GJEffectManager>*>(this)->destructor();
}

GJGameLevel::~GJGameLevel() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$GJGameLevel<GJGameLevel>*>(this)->destructor();
}

getOutoflineFunctionOf(GJGameLevel, encodeWithCoder, , 1, DS_Dictionary*) {
	return reinterpret_cast<$GJGameLevel<GJGameLevel>*>(this)->$GJGameLevel<GJGameLevel>::encodeWithCoder(p0);
}

getOutoflineFunctionOf(GJGameLevel, canEncode, , 0) {
	return reinterpret_cast<$GJGameLevel<GJGameLevel>*>(this)->$GJGameLevel<GJGameLevel>::canEncode();
}

getOutoflineFunctionOf(GJGameLevel, init, , 0) {
	return reinterpret_cast<$GJGameLevel<GJGameLevel>*>(this)->$GJGameLevel<GJGameLevel>::init();
}

getOutoflineFunctionOf(GJGameLevel, create, , 0) {
	return $GJGameLevel<GJGameLevel>::create();
}

getOutoflineFunctionOf(GJGameLevel, getAudioFileName, , 0) {
	return reinterpret_cast<$GJGameLevel<GJGameLevel>*>(this)->$GJGameLevel<GJGameLevel>::getAudioFileName();
}

getOutoflineFunctionOf(GJGameLevel, getCoinKey, , 1, int) {
	return reinterpret_cast<$GJGameLevel<GJGameLevel>*>(this)->$GJGameLevel<GJGameLevel>::getCoinKey(p0);
}

getOutoflineFunctionOf(GJGameLevel, getLengthKey, , 1, int) {
	return reinterpret_cast<$GJGameLevel<GJGameLevel>*>(this)->$GJGameLevel<GJGameLevel>::getLengthKey(p0);
}

getOutoflineFunctionOf(GJGameLevel, getNormalPercent, , 0) {
	return reinterpret_cast<$GJGameLevel<GJGameLevel>*>(this)->$GJGameLevel<GJGameLevel>::getNormalPercent();
}

getOutoflineFunctionOf(GJGameLevel, levelWasAltered, , 0) {
	return reinterpret_cast<$GJGameLevel<GJGameLevel>*>(this)->$GJGameLevel<GJGameLevel>::levelWasAltered();
}

getOutoflineFunctionOf(GJGameLevel, savePercentage, , 5, int, bool, int, int, bool) {
	return reinterpret_cast<$GJGameLevel<GJGameLevel>*>(this)->$GJGameLevel<GJGameLevel>::savePercentage(p0, p1, p2, p3, p4);
}

GJListLayer::~GJListLayer() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$GJListLayer<GJListLayer>*>(this)->destructor();
}

GJRobotSprite::~GJRobotSprite() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$GJRobotSprite<GJRobotSprite>*>(this)->destructor();
}

getOutoflineFunctionOf(GJRobotSprite, init, , 0) {
	return reinterpret_cast<$GJRobotSprite<GJRobotSprite>*>(this)->$GJRobotSprite<GJRobotSprite>::init();
}

getOutoflineFunctionOf(GJRobotSprite, setOpacity, , 1, unsigned char) {
	return reinterpret_cast<$GJRobotSprite<GJRobotSprite>*>(this)->$GJRobotSprite<GJRobotSprite>::setOpacity(p0);
}

getOutoflineFunctionOf(GJRobotSprite, hideSecondary, , 0) {
	return reinterpret_cast<$GJRobotSprite<GJRobotSprite>*>(this)->$GJRobotSprite<GJRobotSprite>::hideSecondary();
}

getOutoflineFunctionOf(GJRobotSprite, create, , 0) {
	return $GJRobotSprite<GJRobotSprite>::create();
}

getOutoflineFunctionOf(GJRobotSprite, updateColor02, , 1, cocos2d::_ccColor3B) {
	return reinterpret_cast<$GJRobotSprite<GJRobotSprite>*>(this)->$GJRobotSprite<GJRobotSprite>::updateColor02(p0);
}

getOutoflineFunctionOf(GJRobotSprite, updateFrame, , 1, int) {
	return reinterpret_cast<$GJRobotSprite<GJRobotSprite>*>(this)->$GJRobotSprite<GJRobotSprite>::updateFrame(p0);
}

GJSpiderSprite::~GJSpiderSprite() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$GJSpiderSprite<GJSpiderSprite>*>(this)->destructor();
}

getOutoflineFunctionOf(GJSpiderSprite, init, , 0) {
	return reinterpret_cast<$GJSpiderSprite<GJSpiderSprite>*>(this)->$GJSpiderSprite<GJSpiderSprite>::init();
}

getOutoflineFunctionOf(GJSpiderSprite, create, , 0) {
	return $GJSpiderSprite<GJSpiderSprite>::create();
}

getOutoflineFunctionOf(GManager, save, , 0) {
	return reinterpret_cast<$GManager<GManager>*>(this)->$GManager<GManager>::save();
}

getOutoflineFunctionOf(GManager, saveData, , 2, DS_Dictionary*, gd::string) {
	return reinterpret_cast<$GManager<GManager>*>(this)->$GManager<GManager>::saveData(p0, p1);
}

getOutoflineFunctionOf(GManager, saveGMTo, , 1, gd::string) {
	return reinterpret_cast<$GManager<GManager>*>(this)->$GManager<GManager>::saveGMTo(p0);
}

getOutoflineFunctionOf(GameLevelManager, createNewLevel, , 0) {
	return reinterpret_cast<$GameLevelManager<GameLevelManager>*>(this)->$GameLevelManager<GameLevelManager>::createNewLevel();
}

getOutoflineFunctionOf(GameLevelManager, sharedState, , 0) {
	return $GameLevelManager<GameLevelManager>::sharedState();
}

getOutoflineFunctionOf(GameLevelManager, getPageInfo, , 1, char const*) {
	return reinterpret_cast<$GameLevelManager<GameLevelManager>*>(this)->$GameLevelManager<GameLevelManager>::getPageInfo(p0);
}

getOutoflineFunctionOf(GameLevelManager, getStoredOnlineLevels, , 1, char const*) {
	return reinterpret_cast<$GameLevelManager<GameLevelManager>*>(this)->$GameLevelManager<GameLevelManager>::getStoredOnlineLevels(p0);
}

getOutoflineFunctionOf(GameLevelManager, getTopArtists, , 2, int, int) {
	return reinterpret_cast<$GameLevelManager<GameLevelManager>*>(this)->$GameLevelManager<GameLevelManager>::getTopArtists(p0, p1);
}

getOutoflineFunctionOf(GameLevelManager, getTopArtistsKey, , 1, int) {
	return reinterpret_cast<$GameLevelManager<GameLevelManager>*>(this)->$GameLevelManager<GameLevelManager>::getTopArtistsKey(p0);
}

getOutoflineFunctionOf(GameLevelManager, makeTimeStamp, , 1, char const*) {
	return reinterpret_cast<$GameLevelManager<GameLevelManager>*>(this)->$GameLevelManager<GameLevelManager>::makeTimeStamp(p0);
}

getOutoflineFunctionOf(GameManager, accountStatusChanged, , 0) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::accountStatusChanged();
}

getOutoflineFunctionOf(GameManager, colorForIdx, , 1, int) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::colorForIdx(p0);
}

getOutoflineFunctionOf(GameManager, didExitPlayscene, , 0) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::didExitPlayscene();
}

getOutoflineFunctionOf(GameManager, doQuickSave, , 0) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::doQuickSave();
}

getOutoflineFunctionOf(GameManager, fadeInMusic, , 1, char const*) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::fadeInMusic(p0);
}

getOutoflineFunctionOf(GameManager, getBGTexture, , 1, int) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::getBGTexture(p0);
}

getOutoflineFunctionOf(GameManager, getFontFile, , 1, int) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::getFontFile(p0);
}

getOutoflineFunctionOf(GameManager, getGameVariable, , 1, char const*) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::getGameVariable(p0);
}

getOutoflineFunctionOf(GameManager, getIntGameVariable, , 1, char const*) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::getIntGameVariable(p0);
}

getOutoflineFunctionOf(GameManager, getUGV, , 1, char const*) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::getUGV(p0);
}

getOutoflineFunctionOf(GameManager, loadDeathEffect, , 1, int) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::loadDeathEffect(p0);
}

getOutoflineFunctionOf(GameManager, loadFont, , 1, int) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::loadFont(p0);
}

getOutoflineFunctionOf(GameManager, reloadAll, , 3, bool, bool, bool) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::reloadAll(p0, p1, p2);
}

getOutoflineFunctionOf(GameManager, reloadAllStep5, , 0) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::reloadAllStep5();
}

getOutoflineFunctionOf(GameManager, reportPercentageForLevel, , 3, int, int, bool) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::reportPercentageForLevel(p0, p1, p2);
}

getOutoflineFunctionOf(GameManager, setGameVariable, , 2, char const*, bool) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::setGameVariable(p0, p1);
}

getOutoflineFunctionOf(GameManager, setIntGameVariable, , 2, char const*, int) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::setIntGameVariable(p0, p1);
}

getOutoflineFunctionOf(GameManager, setUGV, , 2, char const*, bool) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::setUGV(p0, p1);
}

getOutoflineFunctionOf(GameManager, sharedState, , 0) {
	return $GameManager<GameManager>::sharedState();
}

GameManager::~GameManager() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$GameManager<GameManager>*>(this)->destructor();
}

getOutoflineFunctionOf(GameManager, getGTexture, , 1, int) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::getGTexture(p0);
}

getOutoflineFunctionOf(GameManager, init, , 0) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::init();
}

getOutoflineFunctionOf(GameManager, reportAchievementWithID, , 3, char const*, int, bool) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::reportAchievementWithID(p0, p1, p2);
}

getOutoflineFunctionOf(GameManager, resolutionForKey, , 1, int) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::resolutionForKey(p0);
}

getOutoflineFunctionOf(GameManager, update, , 1, float) {
	return reinterpret_cast<$GameManager<GameManager>*>(this)->$GameManager<GameManager>::update(p0);
}

GameObject::~GameObject() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$GameObject<GameObject>*>(this)->destructor();
}

getOutoflineFunctionOf(GameObject, update, , 1, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::update(p0);
}

getOutoflineFunctionOf(GameObject, setScaleX, , 1, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setScaleX(p0);
}

getOutoflineFunctionOf(GameObject, setScaleY, , 1, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setScaleY(p0);
}

getOutoflineFunctionOf(GameObject, setScale, , 1, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setScale(p0);
}

getOutoflineFunctionOf(GameObject, setPosition, , 1, cocos2d::CCPoint const&) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setPosition(p0);
}

getOutoflineFunctionOf(GameObject, setVisible, , 1, bool) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setVisible(p0);
}

getOutoflineFunctionOf(GameObject, setRotation, , 1, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setRotation(p0);
}

getOutoflineFunctionOf(GameObject, setOpacity, , 1, unsigned char) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setOpacity(p0);
}

getOutoflineFunctionOf(GameObject, initWithTexture, , 1, cocos2d::CCTexture2D*) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::initWithTexture(p0);
}

getOutoflineFunctionOf(GameObject, setChildColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setChildColor(p0);
}

getOutoflineFunctionOf(GameObject, setFlipX, , 1, bool) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setFlipX(p0);
}

getOutoflineFunctionOf(GameObject, setFlipY, , 1, bool) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setFlipY(p0);
}

getOutoflineFunctionOf(GameObject, customSetup, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::customSetup();
}

getOutoflineFunctionOf(GameObject, setupCustomSprites, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setupCustomSprites();
}

getOutoflineFunctionOf(GameObject, addMainSpriteToParent, , 1, bool) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::addMainSpriteToParent(p0);
}

getOutoflineFunctionOf(GameObject, resetObject, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::resetObject();
}

getOutoflineFunctionOf(GameObject, triggerObject, , 1, GJBaseGameLayer*) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::triggerObject(p0);
}

getOutoflineFunctionOf(GameObject, activateObject, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::activateObject();
}

getOutoflineFunctionOf(GameObject, deactivateObject, , 1, bool) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::deactivateObject(p0);
}

getOutoflineFunctionOf(GameObject, getObjectRect, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getObjectRect();
}

getOutoflineFunctionOf(GameObject, getObjectRect, , 2, float, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getObjectRect(p0, p1);
}

getOutoflineFunctionOf(GameObject, getObjectRect2, , 2, float, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getObjectRect2(p0, p1);
}

getOutoflineFunctionOf(GameObject, getObjectTextureRect, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getObjectTextureRect();
}

getOutoflineFunctionOf(GameObject, getRealPosition, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getRealPosition();
}

getOutoflineFunctionOf(GameObject, setStartPos, , 1, cocos2d::CCPoint) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setStartPos(p0);
}

getOutoflineFunctionOf(GameObject, updateStartValues, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::updateStartValues();
}

getOutoflineFunctionOf(GameObject, customObjectSetup, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::customObjectSetup();
}

getOutoflineFunctionOf(GameObject, getSaveString, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getSaveString();
}

getOutoflineFunctionOf(GameObject, isFlipX, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::isFlipX();
}

getOutoflineFunctionOf(GameObject, isFlipY, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::isFlipY();
}

getOutoflineFunctionOf(GameObject, setRScaleX, , 1, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setRScaleX(p0);
}

getOutoflineFunctionOf(GameObject, setRScaleY, , 1, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setRScaleY(p0);
}

getOutoflineFunctionOf(GameObject, setRScale, , 1, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setRScale(p0);
}

getOutoflineFunctionOf(GameObject, getRScaleX, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getRScaleX();
}

getOutoflineFunctionOf(GameObject, getRScaleY, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getRScaleY();
}

getOutoflineFunctionOf(GameObject, calculateSpawnXPos, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::calculateSpawnXPos();
}

getOutoflineFunctionOf(GameObject, triggerActivated, , 1, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::triggerActivated(p0);
}

getOutoflineFunctionOf(GameObject, powerOnObject, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::powerOnObject();
}

getOutoflineFunctionOf(GameObject, powerOffObject, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::powerOffObject();
}

getOutoflineFunctionOf(GameObject, setObjectColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setObjectColor(p0);
}

getOutoflineFunctionOf(GameObject, setGlowColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setGlowColor(p0);
}

getOutoflineFunctionOf(GameObject, getOrientedBox, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getOrientedBox();
}

getOutoflineFunctionOf(GameObject, addToGroup, , 1, int) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::addToGroup(p0);
}

getOutoflineFunctionOf(GameObject, removeFromGroup, , 1, int) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::removeFromGroup(p0);
}

getOutoflineFunctionOf(GameObject, spawnXPosition, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::spawnXPosition();
}

getOutoflineFunctionOf(GameObject, getObjectRectDirty, const, 0) {
	return reinterpret_cast<const $GameObject<GameObject>*>(this)->$GameObject<GameObject>::getObjectRectDirty();
}

getOutoflineFunctionOf(GameObject, setObjectRectDirty, , 1, bool) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setObjectRectDirty(p0);
}

getOutoflineFunctionOf(GameObject, getOrientedRectDirty, const, 0) {
	return reinterpret_cast<const $GameObject<GameObject>*>(this)->$GameObject<GameObject>::getOrientedRectDirty();
}

getOutoflineFunctionOf(GameObject, setOrientedRectDirty, , 1, bool) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setOrientedRectDirty(p0);
}

getOutoflineFunctionOf(GameObject, getType, const, 0) {
	return reinterpret_cast<const $GameObject<GameObject>*>(this)->$GameObject<GameObject>::getType();
}

getOutoflineFunctionOf(GameObject, setType, , 1, GameObjectType) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setType(p0);
}

getOutoflineFunctionOf(GameObject, getStartPos, const, 0) {
	return reinterpret_cast<const $GameObject<GameObject>*>(this)->$GameObject<GameObject>::getStartPos();
}

getOutoflineFunctionOf(GameObject, activatedByPlayer, , 1, GameObject*) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::activatedByPlayer(p0);
}

getOutoflineFunctionOf(GameObject, addColorSprite, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::addColorSprite();
}

getOutoflineFunctionOf(GameObject, addColorSpriteToParent, , 1, bool) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::addColorSpriteToParent(p0);
}

getOutoflineFunctionOf(GameObject, addToTempOffset, , 2, float, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::addToTempOffset(p0, p1);
}

getOutoflineFunctionOf(GameObject, calculateOrientedBox, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::calculateOrientedBox();
}

getOutoflineFunctionOf(GameObject, canChangeCustomColor, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::canChangeCustomColor();
}

getOutoflineFunctionOf(GameObject, colorForMode, , 2, int, bool) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::colorForMode(p0, p1);
}

getOutoflineFunctionOf(GameObject, commonSetup, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::commonSetup();
}

getOutoflineFunctionOf(GameObject, copyGroups, , 1, GameObject*) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::copyGroups(p0);
}

getOutoflineFunctionOf(GameObject, createWithFrame, , 1, char const*) {
	return $GameObject<GameObject>::createWithFrame(p0);
}

getOutoflineFunctionOf(GameObject, createWithKey, , 1, int) {
	return $GameObject<GameObject>::createWithKey(p0);
}

getOutoflineFunctionOf(GameObject, destroyObject, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::destroyObject();
}

getOutoflineFunctionOf(GameObject, determineSlopeDirection, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::determineSlopeDirection();
}

getOutoflineFunctionOf(GameObject, getActiveColorForMode, , 2, int, bool) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getActiveColorForMode(p0, p1);
}

getOutoflineFunctionOf(GameObject, getBallFrame, , 1, int) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getBallFrame(p0);
}

getOutoflineFunctionOf(GameObject, getBoxOffset, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getBoxOffset();
}

getOutoflineFunctionOf(GameObject, getColorIndex, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getColorIndex();
}

getOutoflineFunctionOf(GameObject, getDidUpdateLastPosition, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getDidUpdateLastPosition();
}

getOutoflineFunctionOf(GameObject, getGroupID, , 1, int) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getGroupID(p0);
}

getOutoflineFunctionOf(GameObject, getLastPosition, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getLastPosition();
}

getOutoflineFunctionOf(GameObject, getMainColorMode, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getMainColorMode();
}

getOutoflineFunctionOf(GameObject, getObjectZOrder, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getObjectZOrder();
}

getOutoflineFunctionOf(GameObject, getObjectRadius, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getObjectRadius();
}

getOutoflineFunctionOf(GameObject, getSecondaryColorMode, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getSecondaryColorMode();
}

getOutoflineFunctionOf(GameObject, getSectionIdx, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::getSectionIdx();
}

getOutoflineFunctionOf(GameObject, groupWasDisabled, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::groupWasDisabled();
}

getOutoflineFunctionOf(GameObject, groupWasEnabled, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::groupWasEnabled();
}

getOutoflineFunctionOf(GameObject, hasBeenActivated, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::hasBeenActivated();
}

getOutoflineFunctionOf(GameObject, hasBeenActivatedByPlayer, , 1, GameObject*) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::hasBeenActivatedByPlayer(p0);
}

getOutoflineFunctionOf(GameObject, hasSecondaryColor, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::hasSecondaryColor();
}

getOutoflineFunctionOf(GameObject, ignoreEnter, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::ignoreEnter();
}

getOutoflineFunctionOf(GameObject, ignoreFade, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::ignoreFade();
}

getOutoflineFunctionOf(GameObject, isBasicTrigger, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::isBasicTrigger();
}

getOutoflineFunctionOf(GameObject, isColorTrigger, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::isColorTrigger();
}

getOutoflineFunctionOf(GameObject, isSpawnableTrigger, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::isSpawnableTrigger();
}

getOutoflineFunctionOf(GameObject, isSpecialObject, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::isSpecialObject();
}

getOutoflineFunctionOf(GameObject, objectFromString, , 2, gd::string, bool) {
	return $GameObject<GameObject>::objectFromString(p0, p1);
}

getOutoflineFunctionOf(GameObject, playShineEffect, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::playShineEffect();
}

getOutoflineFunctionOf(GameObject, quickUpdatePosition, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::quickUpdatePosition();
}

getOutoflineFunctionOf(GameObject, removeGlow, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::removeGlow();
}

getOutoflineFunctionOf(GameObject, resetGroupDisabled, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::resetGroupDisabled();
}

getOutoflineFunctionOf(GameObject, saveActiveColors, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::saveActiveColors();
}

getOutoflineFunctionOf(GameObject, selectObject, , 1, cocos2d::_ccColor3B) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::selectObject(p0);
}

getOutoflineFunctionOf(GameObject, setDefaultMainColorMode, , 1, int) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setDefaultMainColorMode(p0);
}

getOutoflineFunctionOf(GameObject, setDidUpdateLastPosition, , 1, bool const&) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setDidUpdateLastPosition(p0);
}

getOutoflineFunctionOf(GameObject, setGlowOpacity, , 1, unsigned char) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setGlowOpacity(p0);
}

getOutoflineFunctionOf(GameObject, setLastPosition, , 1, cocos2d::CCPoint const&) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setLastPosition(p0);
}

getOutoflineFunctionOf(GameObject, setMainColorMode, , 1, int) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setMainColorMode(p0);
}

getOutoflineFunctionOf(GameObject, setSectionIdx, , 1, int const&) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setSectionIdx(p0);
}

getOutoflineFunctionOf(GameObject, setupCoinArt, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::setupCoinArt();
}

getOutoflineFunctionOf(GameObject, slopeFloorTop, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::slopeFloorTop();
}

getOutoflineFunctionOf(GameObject, slopeWallLeft, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::slopeWallLeft();
}

getOutoflineFunctionOf(GameObject, updateCustomScale, , 1, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::updateCustomScale(p0);
}

getOutoflineFunctionOf(GameObject, updateMainColor, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::updateMainColor();
}

getOutoflineFunctionOf(GameObject, updateOrientedBox, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::updateOrientedBox();
}

getOutoflineFunctionOf(GameObject, updateSecondaryColor, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::updateSecondaryColor();
}

getOutoflineFunctionOf(GameObject, updateStartPos, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::updateStartPos();
}

getOutoflineFunctionOf(GameObject, updateState, , 0) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::updateState();
}

getOutoflineFunctionOf(GameObject, updateSyncedAnimation, , 1, float) {
	return reinterpret_cast<$GameObject<GameObject>*>(this)->$GameObject<GameObject>::updateSyncedAnimation(p0);
}

GameObjectCopy::~GameObjectCopy() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$GameObjectCopy<GameObjectCopy>*>(this)->destructor();
}

getOutoflineFunctionOf(GameObjectCopy, create, , 1, GameObject*) {
	return $GameObjectCopy<GameObjectCopy>::create(p0);
}

getOutoflineFunctionOf(GameObjectCopy, resetObject, , 0) {
	return reinterpret_cast<$GameObjectCopy<GameObjectCopy>*>(this)->$GameObjectCopy<GameObjectCopy>::resetObject();
}

getOutoflineFunctionOf(GameSoundManager, disableMetering, , 0) {
	return reinterpret_cast<$GameSoundManager<GameSoundManager>*>(this)->$GameSoundManager<GameSoundManager>::disableMetering();
}

getOutoflineFunctionOf(GameSoundManager, enableMetering, , 0) {
	return reinterpret_cast<$GameSoundManager<GameSoundManager>*>(this)->$GameSoundManager<GameSoundManager>::enableMetering();
}

getOutoflineFunctionOf(GameSoundManager, getMeteringValue, , 0) {
	return reinterpret_cast<$GameSoundManager<GameSoundManager>*>(this)->$GameSoundManager<GameSoundManager>::getMeteringValue();
}

getOutoflineFunctionOf(GameSoundManager, playBackgroundMusic, , 3, gd::string, bool, bool) {
	return reinterpret_cast<$GameSoundManager<GameSoundManager>*>(this)->$GameSoundManager<GameSoundManager>::playBackgroundMusic(p0, p1, p2);
}

getOutoflineFunctionOf(GameSoundManager, playEffect, , 4, gd::string, float, float, float) {
	return reinterpret_cast<$GameSoundManager<GameSoundManager>*>(this)->$GameSoundManager<GameSoundManager>::playEffect(p0, p1, p2, p3);
}

getOutoflineFunctionOf(GameSoundManager, sharedManager, , 0) {
	return reinterpret_cast<$GameSoundManager<GameSoundManager>*>(this)->$GameSoundManager<GameSoundManager>::sharedManager();
}

getOutoflineFunctionOf(GameSoundManager, stopBackgroundMusic, , 0) {
	return reinterpret_cast<$GameSoundManager<GameSoundManager>*>(this)->$GameSoundManager<GameSoundManager>::stopBackgroundMusic();
}

GameSoundManager::~GameSoundManager() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$GameSoundManager<GameSoundManager>*>(this)->destructor();
}

getOutoflineFunctionOf(GameStatsManager, awardCurrencyForLevel, , 1, GJGameLevel*) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::awardCurrencyForLevel(p0);
}

getOutoflineFunctionOf(GameStatsManager, awardDiamondsForLevel, , 1, GJGameLevel*) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::awardDiamondsForLevel(p0);
}

getOutoflineFunctionOf(GameStatsManager, awardSecretKey, , 0) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::awardSecretKey();
}

getOutoflineFunctionOf(GameStatsManager, getSecretCoinKey, , 1, char const*) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::getSecretCoinKey(p0);
}

getOutoflineFunctionOf(GameStatsManager, getStat, , 1, char const*) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::getStat(p0);
}

getOutoflineFunctionOf(GameStatsManager, hasPendingUserCoin, , 1, char const*) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::hasPendingUserCoin(p0);
}

getOutoflineFunctionOf(GameStatsManager, hasSecretCoin, , 1, char const*) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::hasSecretCoin(p0);
}

getOutoflineFunctionOf(GameStatsManager, hasUserCoin, , 1, char const*) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::hasUserCoin(p0);
}

getOutoflineFunctionOf(GameStatsManager, incrementStat, , 1, char const*) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::incrementStat(p0);
}

getOutoflineFunctionOf(GameStatsManager, incrementStat, , 2, char const*, int) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::incrementStat(p0, p1);
}

getOutoflineFunctionOf(GameStatsManager, sharedState, , 0) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::sharedState();
}

getOutoflineFunctionOf(GameStatsManager, storePendingUserCoin, , 1, char const*) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::storePendingUserCoin(p0);
}

getOutoflineFunctionOf(GameStatsManager, storeSecretCoin, , 1, char const*) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::storeSecretCoin(p0);
}

getOutoflineFunctionOf(GameStatsManager, storeUserCoin, , 1, char const*) {
	return reinterpret_cast<$GameStatsManager<GameStatsManager>*>(this)->$GameStatsManager<GameStatsManager>::storeUserCoin(p0);
}

HardStreak::~HardStreak() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$HardStreak<HardStreak>*>(this)->destructor();
}

getOutoflineFunctionOf(HardStreak, init, , 0) {
	return reinterpret_cast<$HardStreak<HardStreak>*>(this)->$HardStreak<HardStreak>::init();
}

getOutoflineFunctionOf(HardStreak, addPoint, , 1, cocos2d::CCPoint) {
	return reinterpret_cast<$HardStreak<HardStreak>*>(this)->$HardStreak<HardStreak>::addPoint(p0);
}

getOutoflineFunctionOf(HardStreak, reset, , 0) {
	return reinterpret_cast<$HardStreak<HardStreak>*>(this)->$HardStreak<HardStreak>::reset();
}

getOutoflineFunctionOf(HardStreak, resumeStroke, , 0) {
	return reinterpret_cast<$HardStreak<HardStreak>*>(this)->$HardStreak<HardStreak>::resumeStroke();
}

getOutoflineFunctionOf(HardStreak, stopStroke, , 0) {
	return reinterpret_cast<$HardStreak<HardStreak>*>(this)->$HardStreak<HardStreak>::stopStroke();
}

getOutoflineFunctionOf(LabelGameObject, init, , 0) {
	return reinterpret_cast<$LabelGameObject<LabelGameObject>*>(this)->$LabelGameObject<LabelGameObject>::init();
}

getOutoflineFunctionOf(LabelGameObject, setObjectColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$LabelGameObject<LabelGameObject>*>(this)->$LabelGameObject<LabelGameObject>::setObjectColor(p0);
}

LevelEditorLayer::~LevelEditorLayer() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->destructor();
}

getOutoflineFunctionOf(LevelEditorLayer, update, , 1, float) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::update(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, draw, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::draw();
}

getOutoflineFunctionOf(LevelEditorLayer, updateColor, , 10, cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::updateColor(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}

getOutoflineFunctionOf(LevelEditorLayer, flipGravity, , 3, PlayerObject*, bool, bool) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::flipGravity(p0, p1, p2);
}

getOutoflineFunctionOf(LevelEditorLayer, calculateColorValues, , 6, EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::calculateColorValues(p0, p1, p2, p3, p4, p5);
}

getOutoflineFunctionOf(LevelEditorLayer, addToGroup, , 3, GameObject*, int, bool) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::addToGroup(p0, p1, p2);
}

getOutoflineFunctionOf(LevelEditorLayer, removeFromGroup, , 2, GameObject*, int) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::removeFromGroup(p0, p1);
}

getOutoflineFunctionOf(LevelEditorLayer, timeForXPos, , 1, float) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::timeForXPos(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, xPosForTime, , 1, float) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::xPosForTime(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, levelSettingsUpdated, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::levelSettingsUpdated();
}

getOutoflineFunctionOf(LevelEditorLayer, activateTriggerEffect, , 4, EffectGameObject*, float, float, float) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::activateTriggerEffect(p0, p1, p2, p3);
}

getOutoflineFunctionOf(LevelEditorLayer, addObjectFromString, , 1, gd::string) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::addObjectFromString(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, addSpecial, , 1, GameObject*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::addSpecial(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, addToRedoList, , 1, UndoObject*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::addToRedoList(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, addToUndoList, , 2, UndoObject*, bool) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::addToUndoList(p0, p1);
}

getOutoflineFunctionOf(LevelEditorLayer, animateInDualGround, , 3, GameObject*, float, bool) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::animateInDualGround(p0, p1, p2);
}

getOutoflineFunctionOf(LevelEditorLayer, checkCollisions, , 2, PlayerObject*, float) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::checkCollisions(p0, p1);
}

getOutoflineFunctionOf(LevelEditorLayer, create, , 1, GJGameLevel*) {
	return $LevelEditorLayer<LevelEditorLayer>::create(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, createBackground, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::createBackground();
}

getOutoflineFunctionOf(LevelEditorLayer, createGroundLayer, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::createGroundLayer();
}

getOutoflineFunctionOf(LevelEditorLayer, createObject, , 3, int, cocos2d::CCPoint, bool) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::createObject(p0, p1, p2);
}

getOutoflineFunctionOf(LevelEditorLayer, createObjectsFromSetup, , 1, gd::string) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::createObjectsFromSetup(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, createObjectsFromString, , 2, gd::string, bool) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::createObjectsFromString(p0, p1);
}

getOutoflineFunctionOf(LevelEditorLayer, getLastObjectX, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::getLastObjectX();
}

getOutoflineFunctionOf(LevelEditorLayer, getLevelString, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::getLevelString();
}

getOutoflineFunctionOf(LevelEditorLayer, getNextColorChannel, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::getNextColorChannel();
}

getOutoflineFunctionOf(LevelEditorLayer, getNextFreeBlockID, , 1, cocos2d::CCArray*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::getNextFreeBlockID(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, getNextFreeGroupID, , 1, cocos2d::CCArray*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::getNextFreeGroupID(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, getNextFreeItemID, , 1, cocos2d::CCArray*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::getNextFreeItemID(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, getObjectRect, , 2, GameObject*, bool) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::getObjectRect(p0, p1);
}

getOutoflineFunctionOf(LevelEditorLayer, getRelativeOffset, , 1, GameObject*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::getRelativeOffset(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, handleAction, , 2, bool, cocos2d::CCArray*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::handleAction(p0, p1);
}

getOutoflineFunctionOf(LevelEditorLayer, init, , 1, GJGameLevel*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::init(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, objectAtPosition, , 1, cocos2d::CCPoint) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::objectAtPosition(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, objectMoved, , 1, GameObject*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::objectMoved(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, objectsInRect, , 2, cocos2d::CCRect, bool) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::objectsInRect(p0, p1);
}

getOutoflineFunctionOf(LevelEditorLayer, onPlaytest, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::onPlaytest();
}

getOutoflineFunctionOf(LevelEditorLayer, onStopPlaytest, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::onStopPlaytest();
}

getOutoflineFunctionOf(LevelEditorLayer, playMusic, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::playMusic();
}

getOutoflineFunctionOf(LevelEditorLayer, recreateGroups, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::recreateGroups();
}

getOutoflineFunctionOf(LevelEditorLayer, redoLastAction, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::redoLastAction();
}

getOutoflineFunctionOf(LevelEditorLayer, removeAllObjects, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::removeAllObjects();
}

getOutoflineFunctionOf(LevelEditorLayer, removeAllObjectsOfType, , 1, int) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::removeAllObjectsOfType(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, removeObject, , 2, GameObject*, bool) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::removeObject(p0, p1);
}

getOutoflineFunctionOf(LevelEditorLayer, removeSpecial, , 1, GameObject*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::removeSpecial(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, resetMovingObjects, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::resetMovingObjects();
}

getOutoflineFunctionOf(LevelEditorLayer, resetObjectVector, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::resetObjectVector();
}

getOutoflineFunctionOf(LevelEditorLayer, resetToggledGroups, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::resetToggledGroups();
}

getOutoflineFunctionOf(LevelEditorLayer, resetToggledGroupsAndObjects, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::resetToggledGroupsAndObjects();
}

getOutoflineFunctionOf(LevelEditorLayer, resetUnusedColorChannels, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::resetUnusedColorChannels();
}

getOutoflineFunctionOf(LevelEditorLayer, rotationForSlopeNearObject, , 1, GameObject*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::rotationForSlopeNearObject(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, runColorEffect, , 5, EffectGameObject*, int, float, float, bool) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::runColorEffect(p0, p1, p2, p3, p4);
}

getOutoflineFunctionOf(LevelEditorLayer, scene, , 1, GJGameLevel*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::scene(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, setupLevelStart, , 1, LevelSettingsObject*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::setupLevelStart(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, sortStickyGroups, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::sortStickyGroups();
}

getOutoflineFunctionOf(LevelEditorLayer, stopTriggersInGroup, , 2, int, float) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::stopTriggersInGroup(p0, p1);
}

getOutoflineFunctionOf(LevelEditorLayer, toggleDualMode, , 4, GameObject*, bool, PlayerObject*, bool) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::toggleDualMode(p0, p1, p2, p3);
}

getOutoflineFunctionOf(LevelEditorLayer, toggleGroupPreview, , 2, int, bool) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::toggleGroupPreview(p0, p1);
}

getOutoflineFunctionOf(LevelEditorLayer, transferDefaultColors, , 2, GJEffectManager*, GJEffectManager*) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::transferDefaultColors(p0, p1);
}

getOutoflineFunctionOf(LevelEditorLayer, undoLastAction, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::undoLastAction();
}

getOutoflineFunctionOf(LevelEditorLayer, updateBGAndGColors, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::updateBGAndGColors();
}

getOutoflineFunctionOf(LevelEditorLayer, updateBlendValues, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::updateBlendValues();
}

getOutoflineFunctionOf(LevelEditorLayer, updateDualGround, , 3, PlayerObject*, int, bool) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::updateDualGround(p0, p1, p2);
}

getOutoflineFunctionOf(LevelEditorLayer, updateEditorMode, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::updateEditorMode();
}

getOutoflineFunctionOf(LevelEditorLayer, updateGameObjectsNew, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::updateGameObjectsNew();
}

getOutoflineFunctionOf(LevelEditorLayer, updateGround, , 1, float) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::updateGround(p0);
}

getOutoflineFunctionOf(LevelEditorLayer, updateGroundWidth, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::updateGroundWidth();
}

getOutoflineFunctionOf(LevelEditorLayer, updateOptions, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::updateOptions();
}

getOutoflineFunctionOf(LevelEditorLayer, updateToggledGroups, , 0) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::updateToggledGroups();
}

getOutoflineFunctionOf(LevelEditorLayer, updateVisibility, , 1, float) {
	return reinterpret_cast<$LevelEditorLayer<LevelEditorLayer>*>(this)->$LevelEditorLayer<LevelEditorLayer>::updateVisibility(p0);
}

LevelSettingsObject::~LevelSettingsObject() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$LevelSettingsObject<LevelSettingsObject>*>(this)->destructor();
}

getOutoflineFunctionOf(LevelSettingsObject, init, , 0) {
	return reinterpret_cast<$LevelSettingsObject<LevelSettingsObject>*>(this)->$LevelSettingsObject<LevelSettingsObject>::init();
}

getOutoflineFunctionOf(LevelSettingsObject, create, , 0) {
	return $LevelSettingsObject<LevelSettingsObject>::create();
}

getOutoflineFunctionOf(LevelSettingsObject, objectFromDict, , 1, cocos2d::CCDictionary*) {
	return reinterpret_cast<$LevelSettingsObject<LevelSettingsObject>*>(this)->$LevelSettingsObject<LevelSettingsObject>::objectFromDict(p0);
}

getOutoflineFunctionOf(LevelSettingsObject, objectFromString, , 1, gd::string) {
	return $LevelSettingsObject<LevelSettingsObject>::objectFromString(p0);
}

getOutoflineFunctionOf(LevelSettingsObject, setupColorsFromLegacyMode, , 1, cocos2d::CCDictionary*) {
	return reinterpret_cast<$LevelSettingsObject<LevelSettingsObject>*>(this)->$LevelSettingsObject<LevelSettingsObject>::setupColorsFromLegacyMode(p0);
}

getOutoflineFunctionOf(LocalLevelManager, sharedState, , 0) {
	return $LocalLevelManager<LocalLevelManager>::sharedState();
}

getOutoflineFunctionOf(MenuGameLayer, resetPlayer, , 0) {
	return reinterpret_cast<$MenuGameLayer<MenuGameLayer>*>(this)->$MenuGameLayer<MenuGameLayer>::resetPlayer();
}

getOutoflineFunctionOf(MenuGameLayer, update, , 1, float) {
	return reinterpret_cast<$MenuGameLayer<MenuGameLayer>*>(this)->$MenuGameLayer<MenuGameLayer>::update(p0);
}

MenuLayer::~MenuLayer() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$MenuLayer<MenuLayer>*>(this)->destructor();
}

getOutoflineFunctionOf(MenuLayer, init, , 0) {
	return reinterpret_cast<$MenuLayer<MenuLayer>*>(this)->$MenuLayer<MenuLayer>::init();
}

getOutoflineFunctionOf(MenuLayer, keyBackClicked, , 0) {
	return reinterpret_cast<$MenuLayer<MenuLayer>*>(this)->$MenuLayer<MenuLayer>::keyBackClicked();
}

getOutoflineFunctionOf(MenuLayer, keyDown, , 1, cocos2d::enumKeyCodes) {
	return reinterpret_cast<$MenuLayer<MenuLayer>*>(this)->$MenuLayer<MenuLayer>::keyDown(p0);
}

getOutoflineFunctionOf(MenuLayer, googlePlaySignedIn, , 0) {
	return reinterpret_cast<$MenuLayer<MenuLayer>*>(this)->$MenuLayer<MenuLayer>::googlePlaySignedIn();
}

getOutoflineFunctionOf(MenuLayer, FLAlert_Clicked, , 2, FLAlertLayer*, bool) {
	return reinterpret_cast<$MenuLayer<MenuLayer>*>(this)->$MenuLayer<MenuLayer>::FLAlert_Clicked(p0, p1);
}

getOutoflineFunctionOf(MenuLayer, onMoreGames, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$MenuLayer<MenuLayer>*>(this)->$MenuLayer<MenuLayer>::onMoreGames(p0);
}

getOutoflineFunctionOf(MenuLayer, onQuit, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$MenuLayer<MenuLayer>*>(this)->$MenuLayer<MenuLayer>::onQuit(p0);
}

getOutoflineFunctionOf(MenuLayer, scene, , 1, bool) {
	return $MenuLayer<MenuLayer>::scene(p0);
}

getOutoflineFunctionOf(MoreVideoOptionsLayer, create, , 0) {
	return $MoreVideoOptionsLayer<MoreVideoOptionsLayer>::create();
}

getOutoflineFunctionOf(MoreVideoOptionsLayer, init, , 0) {
	return reinterpret_cast<$MoreVideoOptionsLayer<MoreVideoOptionsLayer>*>(this)->$MoreVideoOptionsLayer<MoreVideoOptionsLayer>::init();
}

getOutoflineFunctionOf(MusicDownloadManager, incrementPriorityForSong, , 1, int) {
	return reinterpret_cast<$MusicDownloadManager<MusicDownloadManager>*>(this)->$MusicDownloadManager<MusicDownloadManager>::incrementPriorityForSong(p0);
}

getOutoflineFunctionOf(MusicDownloadManager, sharedState, , 0) {
	return $MusicDownloadManager<MusicDownloadManager>::sharedState();
}

getOutoflineFunctionOf(OBB2D, calculateWithCenter, , 4, cocos2d::CCPoint, float, float, float) {
	return reinterpret_cast<$OBB2D<OBB2D>*>(this)->$OBB2D<OBB2D>::calculateWithCenter(p0, p1, p2, p3);
}

getOutoflineFunctionOf(OBB2D, create, , 4, cocos2d::CCPoint, float, float, float) {
	return $OBB2D<OBB2D>::create(p0, p1, p2, p3);
}

getOutoflineFunctionOf(OBB2D, getBoundingRect, , 0) {
	return reinterpret_cast<$OBB2D<OBB2D>*>(this)->$OBB2D<OBB2D>::getBoundingRect();
}

getOutoflineFunctionOf(OBB2D, overlaps, , 1, OBB2D*) {
	return reinterpret_cast<$OBB2D<OBB2D>*>(this)->$OBB2D<OBB2D>::overlaps(p0);
}

getOutoflineFunctionOf(OBB2D, overlaps1Way, , 1, OBB2D*) {
	return reinterpret_cast<$OBB2D<OBB2D>*>(this)->$OBB2D<OBB2D>::overlaps1Way(p0);
}

getOutoflineFunctionOf(ObjectToolbox, init, , 0) {
	return reinterpret_cast<$ObjectToolbox<ObjectToolbox>*>(this)->$ObjectToolbox<ObjectToolbox>::init();
}

getOutoflineFunctionOf(ObjectToolbox, intKeyToFrame, , 1, int) {
	return reinterpret_cast<$ObjectToolbox<ObjectToolbox>*>(this)->$ObjectToolbox<ObjectToolbox>::intKeyToFrame(p0);
}

getOutoflineFunctionOf(ObjectToolbox, sharedState, , 0) {
	return $ObjectToolbox<ObjectToolbox>::sharedState();
}

getOutoflineFunctionOf(OpacityEffectAction, create, , 4, float, float, float, int) {
	return $OpacityEffectAction<OpacityEffectAction>::create(p0, p1, p2, p3);
}

getOutoflineFunctionOf(OpacityEffectAction, createFromString, , 1, gd::string) {
	return $OpacityEffectAction<OpacityEffectAction>::createFromString(p0);
}

getOutoflineFunctionOf(OpacityEffectAction, init, , 4, float, float, float, int) {
	return reinterpret_cast<$OpacityEffectAction<OpacityEffectAction>*>(this)->$OpacityEffectAction<OpacityEffectAction>::init(p0, p1, p2, p3);
}

getOutoflineFunctionOf(OpacityEffectAction, step, , 1, float) {
	return reinterpret_cast<$OpacityEffectAction<OpacityEffectAction>*>(this)->$OpacityEffectAction<OpacityEffectAction>::step(p0);
}

getOutoflineFunctionOf(PauseLayer, create, , 1, bool) {
	return $PauseLayer<PauseLayer>::create(p0);
}

getOutoflineFunctionOf(PauseLayer, onEdit, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$PauseLayer<PauseLayer>*>(this)->$PauseLayer<PauseLayer>::onEdit(p0);
}

getOutoflineFunctionOf(PlatformToolbox, hideCursor, , 0) {
	return reinterpret_cast<$PlatformToolbox<PlatformToolbox>*>(this)->$PlatformToolbox<PlatformToolbox>::hideCursor();
}

getOutoflineFunctionOf(PlatformToolbox, showCursor, , 0) {
	return reinterpret_cast<$PlatformToolbox<PlatformToolbox>*>(this)->$PlatformToolbox<PlatformToolbox>::showCursor();
}

getOutoflineFunctionOf(PlayLayer, addCircle, , 1, CCCircleWave*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::addCircle(p0);
}

getOutoflineFunctionOf(PlayLayer, addObject, , 1, GameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::addObject(p0);
}

getOutoflineFunctionOf(PlayLayer, addToGroupOld, , 1, GameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::addToGroupOld(p0);
}

getOutoflineFunctionOf(PlayLayer, addToSpeedObjects, , 1, GameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::addToSpeedObjects(p0);
}

getOutoflineFunctionOf(PlayLayer, animateInDualGround, , 3, GameObject*, float, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::animateInDualGround(p0, p1, p2);
}

getOutoflineFunctionOf(PlayLayer, animateInGround, , 1, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::animateInGround(p0);
}

getOutoflineFunctionOf(PlayLayer, animateOutGround, , 1, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::animateOutGround(p0);
}

getOutoflineFunctionOf(PlayLayer, animateOutGroundFinished, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::animateOutGroundFinished();
}

getOutoflineFunctionOf(PlayLayer, applyEnterEffect, , 1, GameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::applyEnterEffect(p0);
}

getOutoflineFunctionOf(PlayLayer, calculateColorValues, , 6, EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::calculateColorValues(p0, p1, p2, p3, p4, p5);
}

getOutoflineFunctionOf(PlayLayer, cameraMoveX, , 3, float, float, float) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::cameraMoveX(p0, p1, p2);
}

getOutoflineFunctionOf(PlayLayer, cameraMoveY, , 3, float, float, float) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::cameraMoveY(p0, p1, p2);
}

getOutoflineFunctionOf(PlayLayer, checkCollisions, , 2, PlayerObject*, float) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::checkCollisions(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, circleWaveWillBeRemoved, , 1, CCCircleWave*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::circleWaveWillBeRemoved(p0);
}

getOutoflineFunctionOf(PlayLayer, claimParticle, , 1, gd::string) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::claimParticle(p0);
}

getOutoflineFunctionOf(PlayLayer, clearPickedUpItems, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::clearPickedUpItems();
}

getOutoflineFunctionOf(PlayLayer, colorObject, , 2, int, cocos2d::_ccColor3B) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::colorObject(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, commitJumps, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::commitJumps();
}

getOutoflineFunctionOf(PlayLayer, create, , 1, GJGameLevel*) {
	return $PlayLayer<PlayLayer>::create(p0);
}

getOutoflineFunctionOf(PlayLayer, createCheckpoint, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::createCheckpoint();
}

getOutoflineFunctionOf(PlayLayer, createObjectsFromSetup, , 1, gd::string) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::createObjectsFromSetup(p0);
}

getOutoflineFunctionOf(PlayLayer, createParticle, , 4, int, char const*, int, cocos2d::tCCPositionType) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::createParticle(p0, p1, p2, p3);
}

getOutoflineFunctionOf(PlayLayer, currencyWillExit, , 1, CurrencyRewardLayer*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::currencyWillExit(p0);
}

getOutoflineFunctionOf(PlayLayer, delayedResetLevel, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::delayedResetLevel();
}

getOutoflineFunctionOf(PlayLayer, destroyPlayer, , 2, PlayerObject*, GameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::destroyPlayer(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, dialogClosed, , 1, DialogLayer*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::dialogClosed(p0);
}

getOutoflineFunctionOf(PlayLayer, draw, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::draw();
}

getOutoflineFunctionOf(PlayLayer, enterDualMode, , 2, GameObject*, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::enterDualMode(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, exitAirMode, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::exitAirMode();
}

getOutoflineFunctionOf(PlayLayer, exitBirdMode, , 1, PlayerObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::exitBirdMode(p0);
}

getOutoflineFunctionOf(PlayLayer, exitDartMode, , 1, PlayerObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::exitDartMode(p0);
}

getOutoflineFunctionOf(PlayLayer, exitFlyMode, , 1, PlayerObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::exitFlyMode(p0);
}

getOutoflineFunctionOf(PlayLayer, exitRobotMode, , 1, PlayerObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::exitRobotMode(p0);
}

getOutoflineFunctionOf(PlayLayer, exitRollMode, , 1, PlayerObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::exitRollMode(p0);
}

getOutoflineFunctionOf(PlayLayer, exitSpiderMode, , 1, PlayerObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::exitSpiderMode(p0);
}

getOutoflineFunctionOf(PlayLayer, flipFinished, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::flipFinished();
}

getOutoflineFunctionOf(PlayLayer, flipGravity, , 3, PlayerObject*, bool, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::flipGravity(p0, p1, p2);
}

getOutoflineFunctionOf(PlayLayer, flipObjects, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::flipObjects();
}

getOutoflineFunctionOf(PlayLayer, fullReset, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::fullReset();
}

getOutoflineFunctionOf(PlayLayer, getLastCheckpoint, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::getLastCheckpoint();
}

getOutoflineFunctionOf(PlayLayer, getMaxPortalY, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::getMaxPortalY();
}

getOutoflineFunctionOf(PlayLayer, getMinPortalY, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::getMinPortalY();
}

getOutoflineFunctionOf(PlayLayer, getObjectsState, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::getObjectsState();
}

getOutoflineFunctionOf(PlayLayer, getOtherPlayer, , 1, PlayerObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::getOtherPlayer(p0);
}

getOutoflineFunctionOf(PlayLayer, getParticleKey, , 4, int, char const*, int, cocos2d::tCCPositionType) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::getParticleKey(p0, p1, p2, p3);
}

getOutoflineFunctionOf(PlayLayer, getParticleKey2, , 1, gd::string) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::getParticleKey2(p0);
}

getOutoflineFunctionOf(PlayLayer, getRelativeMod, , 4, cocos2d::CCPoint, float, float, float) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::getRelativeMod(p0, p1, p2, p3);
}

getOutoflineFunctionOf(PlayLayer, getTempMilliTime, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::getTempMilliTime();
}

getOutoflineFunctionOf(PlayLayer, gravityEffectFinished, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::gravityEffectFinished();
}

getOutoflineFunctionOf(PlayLayer, hasItem, , 1, int) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::hasItem(p0);
}

getOutoflineFunctionOf(PlayLayer, hasUniqueCoin, , 1, GameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::hasUniqueCoin(p0);
}

getOutoflineFunctionOf(PlayLayer, incrementJumps, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::incrementJumps();
}

getOutoflineFunctionOf(PlayLayer, init, , 1, GJGameLevel*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::init(p0);
}

getOutoflineFunctionOf(PlayLayer, isFlipping, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::isFlipping();
}

getOutoflineFunctionOf(PlayLayer, levelComplete, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::levelComplete();
}

getOutoflineFunctionOf(PlayLayer, lightningFlash, , 8, cocos2d::CCPoint, cocos2d::CCPoint, cocos2d::_ccColor3B, float, float, int, bool, float) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::lightningFlash(p0, p1, p2, p3, p4, p5, p6, p7);
}

getOutoflineFunctionOf(PlayLayer, lightningFlash, , 2, cocos2d::CCPoint, cocos2d::_ccColor3B) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::lightningFlash(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, loadDefaultColors, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::loadDefaultColors();
}

getOutoflineFunctionOf(PlayLayer, loadFromCheckpoint, , 1, CheckpointObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::loadFromCheckpoint(p0);
}

getOutoflineFunctionOf(PlayLayer, loadLastCheckpoint, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::loadLastCheckpoint();
}

getOutoflineFunctionOf(PlayLayer, loadSavedObjectsState, , 1, gd::string) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::loadSavedObjectsState(p0);
}

getOutoflineFunctionOf(PlayLayer, markCheckpoint, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::markCheckpoint();
}

getOutoflineFunctionOf(PlayLayer, moveCameraToPos, , 1, cocos2d::CCPoint) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::moveCameraToPos(p0);
}

getOutoflineFunctionOf(PlayLayer, onEnterTransitionDidFinish, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::onEnterTransitionDidFinish();
}

getOutoflineFunctionOf(PlayLayer, onExit, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::onExit();
}

getOutoflineFunctionOf(PlayLayer, onQuit, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::onQuit();
}

getOutoflineFunctionOf(PlayLayer, optimizeColorGroups, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::optimizeColorGroups();
}

getOutoflineFunctionOf(PlayLayer, optimizeOpacityGroups, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::optimizeOpacityGroups();
}

getOutoflineFunctionOf(PlayLayer, optimizeSaveRequiredGroups, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::optimizeSaveRequiredGroups();
}

getOutoflineFunctionOf(PlayLayer, pauseGame, , 1, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::pauseGame(p0);
}

getOutoflineFunctionOf(PlayLayer, pickupItem, , 1, GameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::pickupItem(p0);
}

getOutoflineFunctionOf(PlayLayer, playAnimationCommand, , 2, int, int) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::playAnimationCommand(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, playEndAnimationToPos, , 1, cocos2d::CCPoint) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::playEndAnimationToPos(p0);
}

getOutoflineFunctionOf(PlayLayer, playExitDualEffect, , 1, PlayerObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::playExitDualEffect(p0);
}

getOutoflineFunctionOf(PlayLayer, playFlashEffect, , 3, float, int, float) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::playFlashEffect(p0, p1, p2);
}

getOutoflineFunctionOf(PlayLayer, playGravityEffect, , 1, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::playGravityEffect(p0);
}

getOutoflineFunctionOf(PlayLayer, playSpeedParticle, , 1, float) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::playSpeedParticle(p0);
}

getOutoflineFunctionOf(PlayLayer, playerWillSwitchMode, , 2, PlayerObject*, GameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::playerWillSwitchMode(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, prepareSpawnObjects, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::prepareSpawnObjects();
}

getOutoflineFunctionOf(PlayLayer, processItems, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::processItems();
}

getOutoflineFunctionOf(PlayLayer, processLoadedMoveActions, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::processLoadedMoveActions();
}

getOutoflineFunctionOf(PlayLayer, recordAction, , 2, bool, PlayerObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::recordAction(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, registerActiveObject, , 1, GameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::registerActiveObject(p0);
}

getOutoflineFunctionOf(PlayLayer, registerStateObject, , 1, GameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::registerStateObject(p0);
}

getOutoflineFunctionOf(PlayLayer, removeAllObjects, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::removeAllObjects();
}

getOutoflineFunctionOf(PlayLayer, removeFromGroupOld, , 1, GameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::removeFromGroupOld(p0);
}

getOutoflineFunctionOf(PlayLayer, removeLastCheckpoint, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::removeLastCheckpoint();
}

getOutoflineFunctionOf(PlayLayer, removePlayer2, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::removePlayer2();
}

getOutoflineFunctionOf(PlayLayer, resetLevel, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::resetLevel();
}

getOutoflineFunctionOf(PlayLayer, resume, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::resume();
}

getOutoflineFunctionOf(PlayLayer, resumeAndRestart, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::resumeAndRestart();
}

getOutoflineFunctionOf(PlayLayer, saveRecordAction, , 2, bool, PlayerObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::saveRecordAction(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, scene, , 1, GJGameLevel*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::scene(p0);
}

getOutoflineFunctionOf(PlayLayer, setupLevelStart, , 1, LevelSettingsObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::setupLevelStart(p0);
}

getOutoflineFunctionOf(PlayLayer, setupReplay, , 1, gd::string) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::setupReplay(p0);
}

getOutoflineFunctionOf(PlayLayer, shakeCamera, , 3, float, float, float) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::shakeCamera(p0, p1, p2);
}

getOutoflineFunctionOf(PlayLayer, shouldBlend, , 1, int) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::shouldBlend(p0);
}

getOutoflineFunctionOf(PlayLayer, showCompleteEffect, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::showCompleteEffect();
}

getOutoflineFunctionOf(PlayLayer, showCompleteText, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::showCompleteText();
}

getOutoflineFunctionOf(PlayLayer, showEndLayer, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::showEndLayer();
}

getOutoflineFunctionOf(PlayLayer, showHint, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::showHint();
}

getOutoflineFunctionOf(PlayLayer, showNewBest, , 6, bool, int, int, bool, bool, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::showNewBest(p0, p1, p2, p3, p4, p5);
}

getOutoflineFunctionOf(PlayLayer, showRetryLayer, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::showRetryLayer();
}

getOutoflineFunctionOf(PlayLayer, showTwoPlayerGuide, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::showTwoPlayerGuide();
}

getOutoflineFunctionOf(PlayLayer, sortGroups, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::sortGroups();
}

getOutoflineFunctionOf(PlayLayer, spawnCircle, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::spawnCircle();
}

getOutoflineFunctionOf(PlayLayer, spawnFirework, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::spawnFirework();
}

getOutoflineFunctionOf(PlayLayer, spawnParticle, , 4, char const*, int, cocos2d::tCCPositionType, cocos2d::CCPoint) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::spawnParticle(p0, p1, p2, p3);
}

getOutoflineFunctionOf(PlayLayer, spawnPlayer2, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::spawnPlayer2();
}

getOutoflineFunctionOf(PlayLayer, startGame, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::startGame();
}

getOutoflineFunctionOf(PlayLayer, startMusic, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::startMusic();
}

getOutoflineFunctionOf(PlayLayer, startRecording, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::startRecording();
}

getOutoflineFunctionOf(PlayLayer, startRecordingDelayed, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::startRecordingDelayed();
}

getOutoflineFunctionOf(PlayLayer, stopCameraShake, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::stopCameraShake();
}

getOutoflineFunctionOf(PlayLayer, stopRecording, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::stopRecording();
}

getOutoflineFunctionOf(PlayLayer, storeCheckpoint, , 1, CheckpointObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::storeCheckpoint(p0);
}

getOutoflineFunctionOf(PlayLayer, switchToFlyMode, , 4, PlayerObject*, GameObject*, bool, int) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::switchToFlyMode(p0, p1, p2, p3);
}

getOutoflineFunctionOf(PlayLayer, switchToRobotMode, , 3, PlayerObject*, GameObject*, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::switchToRobotMode(p0, p1, p2);
}

getOutoflineFunctionOf(PlayLayer, switchToRollMode, , 3, PlayerObject*, GameObject*, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::switchToRollMode(p0, p1, p2);
}

getOutoflineFunctionOf(PlayLayer, switchToSpiderMode, , 3, PlayerObject*, GameObject*, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::switchToSpiderMode(p0, p1, p2);
}

getOutoflineFunctionOf(PlayLayer, timeForXPos, , 1, float) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::timeForXPos(p0);
}

getOutoflineFunctionOf(PlayLayer, timeForXPos2, , 2, float, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::timeForXPos2(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, toggleBGEffectVisibility, , 1, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::toggleBGEffectVisibility(p0);
}

getOutoflineFunctionOf(PlayLayer, toggleDualMode, , 4, GameObject*, bool, PlayerObject*, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::toggleDualMode(p0, p1, p2, p3);
}

getOutoflineFunctionOf(PlayLayer, toggleFlipped, , 2, bool, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::toggleFlipped(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, toggleGhostEffect, , 1, int) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::toggleGhostEffect(p0);
}

getOutoflineFunctionOf(PlayLayer, toggleGlitter, , 1, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::toggleGlitter(p0);
}

getOutoflineFunctionOf(PlayLayer, togglePracticeMode, , 1, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::togglePracticeMode(p0);
}

getOutoflineFunctionOf(PlayLayer, toggleProgressbar, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::toggleProgressbar();
}

getOutoflineFunctionOf(PlayLayer, tryStartRecord, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::tryStartRecord();
}

getOutoflineFunctionOf(PlayLayer, unclaimParticle, , 2, char const*, cocos2d::CCParticleSystemQuad*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::unclaimParticle(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, unregisterActiveObject, , 1, GameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::unregisterActiveObject(p0);
}

getOutoflineFunctionOf(PlayLayer, unregisterStateObject, , 1, GameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::unregisterStateObject(p0);
}

getOutoflineFunctionOf(PlayLayer, update, , 1, float) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::update(p0);
}

getOutoflineFunctionOf(PlayLayer, updateAttempts, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::updateAttempts();
}

getOutoflineFunctionOf(PlayLayer, updateCamera, , 1, float) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::updateCamera(p0);
}

getOutoflineFunctionOf(PlayLayer, updateColor, , 10, cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::updateColor(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}

getOutoflineFunctionOf(PlayLayer, updateDualGround, , 3, PlayerObject*, int, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::updateDualGround(p0, p1, p2);
}

getOutoflineFunctionOf(PlayLayer, updateEffectPositions, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::updateEffectPositions();
}

getOutoflineFunctionOf(PlayLayer, updateLevelColors, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::updateLevelColors();
}

getOutoflineFunctionOf(PlayLayer, updateMoveObjectsLastPosition, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::updateMoveObjectsLastPosition();
}

getOutoflineFunctionOf(PlayLayer, updateProgressbar, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::updateProgressbar();
}

getOutoflineFunctionOf(PlayLayer, updateReplay, , 1, float) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::updateReplay(p0);
}

getOutoflineFunctionOf(PlayLayer, updateTimeMod, , 2, float, bool) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::updateTimeMod(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, updateTweenAction, , 2, float, char const*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::updateTweenAction(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, updateVisibility, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::updateVisibility();
}

getOutoflineFunctionOf(PlayLayer, vfDChk, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::vfDChk();
}

getOutoflineFunctionOf(PlayLayer, visit, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::visit();
}

getOutoflineFunctionOf(PlayLayer, visitWithColorFlash, , 0) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::visitWithColorFlash();
}

getOutoflineFunctionOf(PlayLayer, willSwitchToMode, , 2, int, PlayerObject*) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::willSwitchToMode(p0, p1);
}

getOutoflineFunctionOf(PlayLayer, xPosForTime, , 1, float) {
	return reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->$PlayLayer<PlayLayer>::xPosForTime(p0);
}

PlayLayer::~PlayLayer() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$PlayLayer<PlayLayer>*>(this)->destructor();
}

PlayerCheckpoint::~PlayerCheckpoint() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$PlayerCheckpoint<PlayerCheckpoint>*>(this)->destructor();
}

getOutoflineFunctionOf(PlayerCheckpoint, init, , 0) {
	return reinterpret_cast<$PlayerCheckpoint<PlayerCheckpoint>*>(this)->$PlayerCheckpoint<PlayerCheckpoint>::init();
}

getOutoflineFunctionOf(PlayerCheckpoint, create, , 0) {
	return $PlayerCheckpoint<PlayerCheckpoint>::create();
}

PlayerObject::~PlayerObject() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->destructor();
}

getOutoflineFunctionOf(PlayerObject, update, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::update(p0);
}

getOutoflineFunctionOf(PlayerObject, setScaleX, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::setScaleX(p0);
}

getOutoflineFunctionOf(PlayerObject, setScaleY, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::setScaleY(p0);
}

getOutoflineFunctionOf(PlayerObject, setScale, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::setScale(p0);
}

getOutoflineFunctionOf(PlayerObject, setPosition, , 1, cocos2d::CCPoint const&) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::setPosition(p0);
}

getOutoflineFunctionOf(PlayerObject, setVisible, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::setVisible(p0);
}

getOutoflineFunctionOf(PlayerObject, setRotation, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::setRotation(p0);
}

getOutoflineFunctionOf(PlayerObject, setOpacity, , 1, unsigned char) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::setOpacity(p0);
}

getOutoflineFunctionOf(PlayerObject, setColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::setColor(p0);
}

getOutoflineFunctionOf(PlayerObject, setFlipX, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::setFlipX(p0);
}

getOutoflineFunctionOf(PlayerObject, setFlipY, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::setFlipY(p0);
}

getOutoflineFunctionOf(PlayerObject, resetObject, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::resetObject();
}

getOutoflineFunctionOf(PlayerObject, getRealPosition, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::getRealPosition();
}

getOutoflineFunctionOf(PlayerObject, getOrientedBox, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::getOrientedBox();
}

getOutoflineFunctionOf(PlayerObject, animationFinished, , 1, char const*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::animationFinished(p0);
}

getOutoflineFunctionOf(PlayerObject, activateStreak, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::activateStreak();
}

getOutoflineFunctionOf(PlayerObject, addAllParticles, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::addAllParticles();
}

getOutoflineFunctionOf(PlayerObject, addToTouchedRings, , 1, GameObject*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::addToTouchedRings(p0);
}

getOutoflineFunctionOf(PlayerObject, boostPlayer, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::boostPlayer(p0);
}

getOutoflineFunctionOf(PlayerObject, bumpPlayer, , 2, float, int) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::bumpPlayer(p0, p1);
}

getOutoflineFunctionOf(PlayerObject, buttonDown, , 1, PlayerButton) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::buttonDown(p0);
}

getOutoflineFunctionOf(PlayerObject, checkSnapJumpToObject, , 1, GameObject*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::checkSnapJumpToObject(p0);
}

getOutoflineFunctionOf(PlayerObject, collidedWithObject, , 2, float, GameObject*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::collidedWithObject(p0, p1);
}

getOutoflineFunctionOf(PlayerObject, collidedWithObject, , 3, float, GameObject*, cocos2d::CCRect) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::collidedWithObject(p0, p1, p2);
}

getOutoflineFunctionOf(PlayerObject, collidedWithSlope, , 3, float, GameObject*, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::collidedWithSlope(p0, p1, p2);
}

getOutoflineFunctionOf(PlayerObject, convertToClosestRotation, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::convertToClosestRotation(p0);
}

getOutoflineFunctionOf(PlayerObject, copyAttributes, , 1, PlayerObject*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::copyAttributes(p0);
}

getOutoflineFunctionOf(PlayerObject, create, , 3, int, int, cocos2d::CCLayer*) {
	return $PlayerObject<PlayerObject>::create(p0, p1, p2);
}

getOutoflineFunctionOf(PlayerObject, deactivateParticle, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::deactivateParticle();
}

getOutoflineFunctionOf(PlayerObject, deactivateStreak, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::deactivateStreak(p0);
}

getOutoflineFunctionOf(PlayerObject, fadeOutStreak2, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::fadeOutStreak2(p0);
}

getOutoflineFunctionOf(PlayerObject, flashPlayer, , 4, float, float, cocos2d::_ccColor3B, cocos2d::_ccColor3B) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::flashPlayer(p0, p1, p2, p3);
}

getOutoflineFunctionOf(PlayerObject, flipGravity, , 2, bool, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::flipGravity(p0, p1);
}

getOutoflineFunctionOf(PlayerObject, flipMod, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::flipMod();
}

getOutoflineFunctionOf(PlayerObject, getActiveMode, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::getActiveMode();
}

getOutoflineFunctionOf(PlayerObject, getModifiedSlopeYVel, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::getModifiedSlopeYVel();
}

getOutoflineFunctionOf(PlayerObject, getOldPosition, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::getOldPosition(p0);
}

getOutoflineFunctionOf(PlayerObject, getSecondColor, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::getSecondColor();
}

getOutoflineFunctionOf(PlayerObject, gravityDown, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::gravityDown();
}

getOutoflineFunctionOf(PlayerObject, gravityUp, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::gravityUp();
}

getOutoflineFunctionOf(PlayerObject, hardFlipGravity, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::hardFlipGravity();
}

getOutoflineFunctionOf(PlayerObject, hitGround, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::hitGround(p0);
}

getOutoflineFunctionOf(PlayerObject, incrementJumps, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::incrementJumps();
}

getOutoflineFunctionOf(PlayerObject, init, , 3, int, int, cocos2d::CCLayer*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::init(p0, p1, p2);
}

getOutoflineFunctionOf(PlayerObject, isBoostValid, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::isBoostValid(p0);
}

getOutoflineFunctionOf(PlayerObject, isFlying, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::isFlying();
}

getOutoflineFunctionOf(PlayerObject, isSafeFlip, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::isSafeFlip(p0);
}

getOutoflineFunctionOf(PlayerObject, isSafeMode, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::isSafeMode(p0);
}

getOutoflineFunctionOf(PlayerObject, isSafeSpiderFlip, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::isSafeSpiderFlip(p0);
}

getOutoflineFunctionOf(PlayerObject, levelFlipFinished, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::levelFlipFinished();
}

getOutoflineFunctionOf(PlayerObject, levelFlipping, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::levelFlipping();
}

getOutoflineFunctionOf(PlayerObject, levelWillFlip, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::levelWillFlip();
}

getOutoflineFunctionOf(PlayerObject, loadFromCheckpoint, , 1, PlayerCheckpoint*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::loadFromCheckpoint(p0);
}

getOutoflineFunctionOf(PlayerObject, lockPlayer, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::lockPlayer();
}

getOutoflineFunctionOf(PlayerObject, logValues, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::logValues();
}

getOutoflineFunctionOf(PlayerObject, modeDidChange, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::modeDidChange();
}

getOutoflineFunctionOf(PlayerObject, placeStreakPoint, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::placeStreakPoint();
}

getOutoflineFunctionOf(PlayerObject, playBurstEffect, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::playBurstEffect();
}

getOutoflineFunctionOf(PlayerObject, playDeathEffect, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::playDeathEffect();
}

getOutoflineFunctionOf(PlayerObject, playDynamicSpiderRun, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::playDynamicSpiderRun();
}

getOutoflineFunctionOf(PlayerObject, playerDestroyed, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::playerDestroyed(p0);
}

getOutoflineFunctionOf(PlayerObject, playerIsFalling, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::playerIsFalling();
}

getOutoflineFunctionOf(PlayerObject, playerTeleported, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::playerTeleported();
}

getOutoflineFunctionOf(PlayerObject, playingEndEffect, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::playingEndEffect();
}

getOutoflineFunctionOf(PlayerObject, postCollision, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::postCollision(p0);
}

getOutoflineFunctionOf(PlayerObject, preCollision, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::preCollision();
}

getOutoflineFunctionOf(PlayerObject, preSlopeCollision, , 2, float, GameObject*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::preSlopeCollision(p0, p1);
}

getOutoflineFunctionOf(PlayerObject, propellPlayer, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::propellPlayer(p0);
}

getOutoflineFunctionOf(PlayerObject, pushButton, , 1, PlayerButton) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::pushButton(p0);
}

getOutoflineFunctionOf(PlayerObject, pushDown, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::pushDown();
}

getOutoflineFunctionOf(PlayerObject, pushPlayer, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::pushPlayer(p0);
}

getOutoflineFunctionOf(PlayerObject, releaseButton, , 1, PlayerButton) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::releaseButton(p0);
}

getOutoflineFunctionOf(PlayerObject, removeAllParticles, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::removeAllParticles();
}

getOutoflineFunctionOf(PlayerObject, removePendingCheckpoint, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::removePendingCheckpoint();
}

getOutoflineFunctionOf(PlayerObject, resetAllParticles, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::resetAllParticles();
}

getOutoflineFunctionOf(PlayerObject, resetCollisionLog, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::resetCollisionLog();
}

getOutoflineFunctionOf(PlayerObject, resetPlayerIcon, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::resetPlayerIcon();
}

getOutoflineFunctionOf(PlayerObject, resetStateVariables, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::resetStateVariables();
}

getOutoflineFunctionOf(PlayerObject, resetStreak, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::resetStreak();
}

getOutoflineFunctionOf(PlayerObject, ringJump, , 1, GameObject*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::ringJump(p0);
}

getOutoflineFunctionOf(PlayerObject, runBallRotation, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::runBallRotation(p0);
}

getOutoflineFunctionOf(PlayerObject, runBallRotation2, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::runBallRotation2();
}

getOutoflineFunctionOf(PlayerObject, runNormalRotation, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::runNormalRotation();
}

getOutoflineFunctionOf(PlayerObject, runRotateAction, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::runRotateAction(p0);
}

getOutoflineFunctionOf(PlayerObject, saveToCheckpoint, , 1, PlayerCheckpoint*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::saveToCheckpoint(p0);
}

getOutoflineFunctionOf(PlayerObject, setSecondColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::setSecondColor(p0);
}

getOutoflineFunctionOf(PlayerObject, setupStreak, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::setupStreak();
}

getOutoflineFunctionOf(PlayerObject, spawnCircle, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::spawnCircle();
}

getOutoflineFunctionOf(PlayerObject, spawnCircle2, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::spawnCircle2();
}

getOutoflineFunctionOf(PlayerObject, spawnDualCircle, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::spawnDualCircle();
}

getOutoflineFunctionOf(PlayerObject, spawnFromPlayer, , 1, PlayerObject*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::spawnFromPlayer(p0);
}

getOutoflineFunctionOf(PlayerObject, spawnPortalCircle, , 2, cocos2d::_ccColor3B, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::spawnPortalCircle(p0, p1);
}

getOutoflineFunctionOf(PlayerObject, spawnScaleCircle, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::spawnScaleCircle();
}

getOutoflineFunctionOf(PlayerObject, specialGroundHit, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::specialGroundHit();
}

getOutoflineFunctionOf(PlayerObject, speedDown, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::speedDown();
}

getOutoflineFunctionOf(PlayerObject, speedUp, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::speedUp();
}

getOutoflineFunctionOf(PlayerObject, spiderTestJump, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::spiderTestJump(p0);
}

getOutoflineFunctionOf(PlayerObject, startDashing, , 1, GameObject*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::startDashing(p0);
}

getOutoflineFunctionOf(PlayerObject, stopBurstEffect, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::stopBurstEffect();
}

getOutoflineFunctionOf(PlayerObject, stopDashing, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::stopDashing();
}

getOutoflineFunctionOf(PlayerObject, stopRotation, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::stopRotation(p0);
}

getOutoflineFunctionOf(PlayerObject, storeCollision, , 2, bool, int) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::storeCollision(p0, p1);
}

getOutoflineFunctionOf(PlayerObject, switchedToMode, , 1, GameObjectType) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::switchedToMode(p0);
}

getOutoflineFunctionOf(PlayerObject, testForMoving, , 2, float, GameObject*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::testForMoving(p0, p1);
}

getOutoflineFunctionOf(PlayerObject, toggleBirdMode, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::toggleBirdMode(p0);
}

getOutoflineFunctionOf(PlayerObject, toggleDartMode, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::toggleDartMode(p0);
}

getOutoflineFunctionOf(PlayerObject, toggleFlyMode, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::toggleFlyMode(p0);
}

getOutoflineFunctionOf(PlayerObject, toggleGhostEffect, , 1, GhostType) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::toggleGhostEffect(p0);
}

getOutoflineFunctionOf(PlayerObject, togglePlayerScale, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::togglePlayerScale(p0);
}

getOutoflineFunctionOf(PlayerObject, toggleRobotMode, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::toggleRobotMode(p0);
}

getOutoflineFunctionOf(PlayerObject, toggleRollMode, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::toggleRollMode(p0);
}

getOutoflineFunctionOf(PlayerObject, toggleSpiderMode, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::toggleSpiderMode(p0);
}

getOutoflineFunctionOf(PlayerObject, toggleVisibility, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::toggleVisibility(p0);
}

getOutoflineFunctionOf(PlayerObject, touchedObject, , 1, GameObject*) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::touchedObject(p0);
}

getOutoflineFunctionOf(PlayerObject, tryPlaceCheckpoint, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::tryPlaceCheckpoint();
}

getOutoflineFunctionOf(PlayerObject, updateCheckpointMode, , 1, bool) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateCheckpointMode(p0);
}

getOutoflineFunctionOf(PlayerObject, updateCheckpointTest, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateCheckpointTest();
}

getOutoflineFunctionOf(PlayerObject, updateCollide, , 2, bool, int) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateCollide(p0, p1);
}

getOutoflineFunctionOf(PlayerObject, updateCollideBottom, , 2, float, int) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateCollideBottom(p0, p1);
}

getOutoflineFunctionOf(PlayerObject, updateCollideTop, , 2, float, int) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateCollideTop(p0, p1);
}

getOutoflineFunctionOf(PlayerObject, updateDashAnimation, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateDashAnimation();
}

getOutoflineFunctionOf(PlayerObject, updateDashArt, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateDashArt();
}

getOutoflineFunctionOf(PlayerObject, updateGlowColor, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateGlowColor();
}

getOutoflineFunctionOf(PlayerObject, updateJump, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateJump(p0);
}

getOutoflineFunctionOf(PlayerObject, updateJumpVariables, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateJumpVariables();
}

getOutoflineFunctionOf(PlayerObject, updatePlayerBirdFrame, , 1, int) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updatePlayerBirdFrame(p0);
}

getOutoflineFunctionOf(PlayerObject, updatePlayerDartFrame, , 1, int) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updatePlayerDartFrame(p0);
}

getOutoflineFunctionOf(PlayerObject, updatePlayerFrame, , 1, int) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updatePlayerFrame(p0);
}

getOutoflineFunctionOf(PlayerObject, updatePlayerGlow, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updatePlayerGlow();
}

getOutoflineFunctionOf(PlayerObject, updatePlayerRobotFrame, , 1, int) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updatePlayerRobotFrame(p0);
}

getOutoflineFunctionOf(PlayerObject, updatePlayerRollFrame, , 1, int) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updatePlayerRollFrame(p0);
}

getOutoflineFunctionOf(PlayerObject, updatePlayerScale, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updatePlayerScale();
}

getOutoflineFunctionOf(PlayerObject, updatePlayerShipFrame, , 1, int) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updatePlayerShipFrame(p0);
}

getOutoflineFunctionOf(PlayerObject, updatePlayerSpiderFrame, , 1, int) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updatePlayerSpiderFrame(p0);
}

getOutoflineFunctionOf(PlayerObject, updatePlayerSpriteExtra, , 1, gd::string) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updatePlayerSpriteExtra(p0);
}

getOutoflineFunctionOf(PlayerObject, updateRobotAnimationSpeed, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateRobotAnimationSpeed();
}

getOutoflineFunctionOf(PlayerObject, updateRotation, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateRotation(p0);
}

getOutoflineFunctionOf(PlayerObject, updateRotation, , 2, float, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateRotation(p0, p1);
}

getOutoflineFunctionOf(PlayerObject, updateShipRotation, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateShipRotation(p0);
}

getOutoflineFunctionOf(PlayerObject, updateShipSpriteExtra, , 1, gd::string) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateShipSpriteExtra(p0);
}

getOutoflineFunctionOf(PlayerObject, updateSlopeRotation, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateSlopeRotation(p0);
}

getOutoflineFunctionOf(PlayerObject, updateSlopeYVelocity, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateSlopeYVelocity(p0);
}

getOutoflineFunctionOf(PlayerObject, updateSpecial, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateSpecial(p0);
}

getOutoflineFunctionOf(PlayerObject, updateStateVariables, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateStateVariables();
}

getOutoflineFunctionOf(PlayerObject, updateTimeMod, , 1, float) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::updateTimeMod(p0);
}

getOutoflineFunctionOf(PlayerObject, usingWallLimitedMode, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::usingWallLimitedMode();
}

getOutoflineFunctionOf(PlayerObject, yStartDown, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::yStartDown();
}

getOutoflineFunctionOf(PlayerObject, yStartUp, , 0) {
	return reinterpret_cast<$PlayerObject<PlayerObject>*>(this)->$PlayerObject<PlayerObject>::yStartUp();
}

getOutoflineFunctionOf(PulseEffectAction, createFromString, , 1, gd::string) {
	return $PulseEffectAction<PulseEffectAction>::createFromString(p0);
}

getOutoflineFunctionOf(PulseEffectAction, getSaveString, , 0) {
	return reinterpret_cast<$PulseEffectAction<PulseEffectAction>*>(this)->$PulseEffectAction<PulseEffectAction>::getSaveString();
}

getOutoflineFunctionOf(RetryLevelLayer, create, , 0) {
	return $RetryLevelLayer<RetryLevelLayer>::create();
}

getOutoflineFunctionOf(ScrollingLayer, create, , 3, cocos2d::CCSize, cocos2d::CCPoint, float) {
	return $ScrollingLayer<ScrollingLayer>::create(p0, p1, p2);
}

getOutoflineFunctionOf(SetGroupIDLayer, onNextGroupID1, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$SetGroupIDLayer<SetGroupIDLayer>*>(this)->$SetGroupIDLayer<SetGroupIDLayer>::onNextGroupID1(p0);
}

getOutoflineFunctionOf(SetGroupIDLayer, textChanged, , 1, CCTextInputNode*) {
	return reinterpret_cast<$SetGroupIDLayer<SetGroupIDLayer>*>(this)->$SetGroupIDLayer<SetGroupIDLayer>::textChanged(p0);
}

getOutoflineFunctionOf(SetGroupIDLayer, updateGroupIDLabel, , 0) {
	return reinterpret_cast<$SetGroupIDLayer<SetGroupIDLayer>*>(this)->$SetGroupIDLayer<SetGroupIDLayer>::updateGroupIDLabel();
}

SetGroupIDLayer::~SetGroupIDLayer() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$SetGroupIDLayer<SetGroupIDLayer>*>(this)->destructor();
}

getOutoflineFunctionOf(SetIDLayer, create, , 1, GameObject*) {
	return $SetIDLayer<SetIDLayer>::create(p0);
}

getOutoflineFunctionOf(SetItemIDLayer, create, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return $SetItemIDLayer<SetItemIDLayer>::create(p0, p1);
}

getOutoflineFunctionOf(SetTargetIDLayer, create, , 3, EffectGameObject*, cocos2d::CCArray*, gd::string) {
	return $SetTargetIDLayer<SetTargetIDLayer>::create(p0, p1, p2);
}

getOutoflineFunctionOf(SetTargetIDLayer, onTargetIDArrow, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$SetTargetIDLayer<SetTargetIDLayer>*>(this)->$SetTargetIDLayer<SetTargetIDLayer>::onTargetIDArrow(p0);
}

getOutoflineFunctionOf(SetTargetIDLayer, textChanged, , 1, CCTextInputNode*) {
	return reinterpret_cast<$SetTargetIDLayer<SetTargetIDLayer>*>(this)->$SetTargetIDLayer<SetTargetIDLayer>::textChanged(p0);
}

getOutoflineFunctionOf(SetTargetIDLayer, updateTargetID, , 0) {
	return reinterpret_cast<$SetTargetIDLayer<SetTargetIDLayer>*>(this)->$SetTargetIDLayer<SetTargetIDLayer>::updateTargetID();
}

getOutoflineFunctionOf(SetupAnimationPopup, create, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return $SetupAnimationPopup<SetupAnimationPopup>::create(p0, p1);
}

getOutoflineFunctionOf(SetupAnimationPopup, onTargetIDArrow, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$SetupAnimationPopup<SetupAnimationPopup>*>(this)->$SetupAnimationPopup<SetupAnimationPopup>::onTargetIDArrow(p0);
}

getOutoflineFunctionOf(SetupAnimationPopup, textChanged, , 1, CCTextInputNode*) {
	return reinterpret_cast<$SetupAnimationPopup<SetupAnimationPopup>*>(this)->$SetupAnimationPopup<SetupAnimationPopup>::textChanged(p0);
}

getOutoflineFunctionOf(SetupAnimationPopup, updateTargetID, , 0) {
	return reinterpret_cast<$SetupAnimationPopup<SetupAnimationPopup>*>(this)->$SetupAnimationPopup<SetupAnimationPopup>::updateTargetID();
}

getOutoflineFunctionOf(SetupCollisionTriggerPopup, create, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return $SetupCollisionTriggerPopup<SetupCollisionTriggerPopup>::create(p0, p1);
}

getOutoflineFunctionOf(SetupCollisionTriggerPopup, onTargetIDArrow, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$SetupCollisionTriggerPopup<SetupCollisionTriggerPopup>*>(this)->$SetupCollisionTriggerPopup<SetupCollisionTriggerPopup>::onTargetIDArrow(p0);
}

getOutoflineFunctionOf(SetupCollisionTriggerPopup, textChanged, , 1, CCTextInputNode*) {
	return reinterpret_cast<$SetupCollisionTriggerPopup<SetupCollisionTriggerPopup>*>(this)->$SetupCollisionTriggerPopup<SetupCollisionTriggerPopup>::textChanged(p0);
}

getOutoflineFunctionOf(SetupCollisionTriggerPopup, updateTargetID, , 0) {
	return reinterpret_cast<$SetupCollisionTriggerPopup<SetupCollisionTriggerPopup>*>(this)->$SetupCollisionTriggerPopup<SetupCollisionTriggerPopup>::updateTargetID();
}

getOutoflineFunctionOf(SetupCountTriggerPopup, create, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return $SetupCountTriggerPopup<SetupCountTriggerPopup>::create(p0, p1);
}

getOutoflineFunctionOf(SetupCountTriggerPopup, onTargetIDArrow, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$SetupCountTriggerPopup<SetupCountTriggerPopup>*>(this)->$SetupCountTriggerPopup<SetupCountTriggerPopup>::onTargetIDArrow(p0);
}

getOutoflineFunctionOf(SetupCountTriggerPopup, textChanged, , 1, CCTextInputNode*) {
	return reinterpret_cast<$SetupCountTriggerPopup<SetupCountTriggerPopup>*>(this)->$SetupCountTriggerPopup<SetupCountTriggerPopup>::textChanged(p0);
}

getOutoflineFunctionOf(SetupCountTriggerPopup, updateTargetID, , 0) {
	return reinterpret_cast<$SetupCountTriggerPopup<SetupCountTriggerPopup>*>(this)->$SetupCountTriggerPopup<SetupCountTriggerPopup>::updateTargetID();
}

getOutoflineFunctionOf(SetupInstantCountPopup, create, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return $SetupInstantCountPopup<SetupInstantCountPopup>::create(p0, p1);
}

getOutoflineFunctionOf(SetupInstantCountPopup, onTargetIDArrow, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$SetupInstantCountPopup<SetupInstantCountPopup>*>(this)->$SetupInstantCountPopup<SetupInstantCountPopup>::onTargetIDArrow(p0);
}

getOutoflineFunctionOf(SetupInstantCountPopup, textChanged, , 1, CCTextInputNode*) {
	return reinterpret_cast<$SetupInstantCountPopup<SetupInstantCountPopup>*>(this)->$SetupInstantCountPopup<SetupInstantCountPopup>::textChanged(p0);
}

getOutoflineFunctionOf(SetupInstantCountPopup, updateTargetID, , 0) {
	return reinterpret_cast<$SetupInstantCountPopup<SetupInstantCountPopup>*>(this)->$SetupInstantCountPopup<SetupInstantCountPopup>::updateTargetID();
}

getOutoflineFunctionOf(SetupInteractObjectPopup, create, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return $SetupInteractObjectPopup<SetupInteractObjectPopup>::create(p0, p1);
}

getOutoflineFunctionOf(SetupInteractObjectPopup, onTargetIDArrow, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$SetupInteractObjectPopup<SetupInteractObjectPopup>*>(this)->$SetupInteractObjectPopup<SetupInteractObjectPopup>::onTargetIDArrow(p0);
}

getOutoflineFunctionOf(SetupInteractObjectPopup, textChanged, , 1, CCTextInputNode*) {
	return reinterpret_cast<$SetupInteractObjectPopup<SetupInteractObjectPopup>*>(this)->$SetupInteractObjectPopup<SetupInteractObjectPopup>::textChanged(p0);
}

getOutoflineFunctionOf(SetupInteractObjectPopup, updateTargetID, , 0) {
	return reinterpret_cast<$SetupInteractObjectPopup<SetupInteractObjectPopup>*>(this)->$SetupInteractObjectPopup<SetupInteractObjectPopup>::updateTargetID();
}

getOutoflineFunctionOf(SetupObjectTogglePopup, create, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return $SetupObjectTogglePopup<SetupObjectTogglePopup>::create(p0, p1);
}

getOutoflineFunctionOf(SetupObjectTogglePopup, init, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return reinterpret_cast<$SetupObjectTogglePopup<SetupObjectTogglePopup>*>(this)->$SetupObjectTogglePopup<SetupObjectTogglePopup>::init(p0, p1);
}

getOutoflineFunctionOf(SetupObjectTogglePopup, onTargetIDArrow, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$SetupObjectTogglePopup<SetupObjectTogglePopup>*>(this)->$SetupObjectTogglePopup<SetupObjectTogglePopup>::onTargetIDArrow(p0);
}

getOutoflineFunctionOf(SetupObjectTogglePopup, textChanged, , 1, CCTextInputNode*) {
	return reinterpret_cast<$SetupObjectTogglePopup<SetupObjectTogglePopup>*>(this)->$SetupObjectTogglePopup<SetupObjectTogglePopup>::textChanged(p0);
}

getOutoflineFunctionOf(SetupObjectTogglePopup, updateTargetID, , 0) {
	return reinterpret_cast<$SetupObjectTogglePopup<SetupObjectTogglePopup>*>(this)->$SetupObjectTogglePopup<SetupObjectTogglePopup>::updateTargetID();
}

getOutoflineFunctionOf(SetupOpacityPopup, create, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return $SetupOpacityPopup<SetupOpacityPopup>::create(p0, p1);
}

getOutoflineFunctionOf(SetupOpacityPopup, onTargetIDArrow, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$SetupOpacityPopup<SetupOpacityPopup>*>(this)->$SetupOpacityPopup<SetupOpacityPopup>::onTargetIDArrow(p0);
}

getOutoflineFunctionOf(SetupOpacityPopup, textChanged, , 1, CCTextInputNode*) {
	return reinterpret_cast<$SetupOpacityPopup<SetupOpacityPopup>*>(this)->$SetupOpacityPopup<SetupOpacityPopup>::textChanged(p0);
}

getOutoflineFunctionOf(SetupOpacityPopup, updateTargetID, , 0) {
	return reinterpret_cast<$SetupOpacityPopup<SetupOpacityPopup>*>(this)->$SetupOpacityPopup<SetupOpacityPopup>::updateTargetID();
}

getOutoflineFunctionOf(SetupPickupTriggerPopup, create, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return $SetupPickupTriggerPopup<SetupPickupTriggerPopup>::create(p0, p1);
}

getOutoflineFunctionOf(SetupPickupTriggerPopup, onItemIDArrow, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$SetupPickupTriggerPopup<SetupPickupTriggerPopup>*>(this)->$SetupPickupTriggerPopup<SetupPickupTriggerPopup>::onItemIDArrow(p0);
}

getOutoflineFunctionOf(SetupPickupTriggerPopup, onNextItemID, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$SetupPickupTriggerPopup<SetupPickupTriggerPopup>*>(this)->$SetupPickupTriggerPopup<SetupPickupTriggerPopup>::onNextItemID(p0);
}

getOutoflineFunctionOf(SetupPickupTriggerPopup, textChanged, , 1, CCTextInputNode*) {
	return reinterpret_cast<$SetupPickupTriggerPopup<SetupPickupTriggerPopup>*>(this)->$SetupPickupTriggerPopup<SetupPickupTriggerPopup>::textChanged(p0);
}

getOutoflineFunctionOf(SetupPickupTriggerPopup, updateItemID, , 0) {
	return reinterpret_cast<$SetupPickupTriggerPopup<SetupPickupTriggerPopup>*>(this)->$SetupPickupTriggerPopup<SetupPickupTriggerPopup>::updateItemID();
}

getOutoflineFunctionOf(SetupShakePopup, create, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return $SetupShakePopup<SetupShakePopup>::create(p0, p1);
}

getOutoflineFunctionOf(SetupSpawnPopup, create, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return $SetupSpawnPopup<SetupSpawnPopup>::create(p0, p1);
}

getOutoflineFunctionOf(SetupSpawnPopup, createToggleButton, , 6, gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*) {
	return reinterpret_cast<$SetupSpawnPopup<SetupSpawnPopup>*>(this)->$SetupSpawnPopup<SetupSpawnPopup>::createToggleButton(p0, p1, p2, p3, p4, p5);
}

getOutoflineFunctionOf(SetupSpawnPopup, onTargetIDArrow, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$SetupSpawnPopup<SetupSpawnPopup>*>(this)->$SetupSpawnPopup<SetupSpawnPopup>::onTargetIDArrow(p0);
}

getOutoflineFunctionOf(SetupSpawnPopup, textChanged, , 1, CCTextInputNode*) {
	return reinterpret_cast<$SetupSpawnPopup<SetupSpawnPopup>*>(this)->$SetupSpawnPopup<SetupSpawnPopup>::textChanged(p0);
}

getOutoflineFunctionOf(SetupSpawnPopup, updateTargetID, , 0) {
	return reinterpret_cast<$SetupSpawnPopup<SetupSpawnPopup>*>(this)->$SetupSpawnPopup<SetupSpawnPopup>::updateTargetID();
}

getOutoflineFunctionOf(SetupTouchTogglePopup, create, , 2, EffectGameObject*, cocos2d::CCArray*) {
	return $SetupTouchTogglePopup<SetupTouchTogglePopup>::create(p0, p1);
}

getOutoflineFunctionOf(SetupTouchTogglePopup, onTargetIDArrow, , 1, cocos2d::CCObject*) {
	return reinterpret_cast<$SetupTouchTogglePopup<SetupTouchTogglePopup>*>(this)->$SetupTouchTogglePopup<SetupTouchTogglePopup>::onTargetIDArrow(p0);
}

getOutoflineFunctionOf(SetupTouchTogglePopup, textChanged, , 1, CCTextInputNode*) {
	return reinterpret_cast<$SetupTouchTogglePopup<SetupTouchTogglePopup>*>(this)->$SetupTouchTogglePopup<SetupTouchTogglePopup>::textChanged(p0);
}

getOutoflineFunctionOf(SetupTouchTogglePopup, updateTargetID, , 0) {
	return reinterpret_cast<$SetupTouchTogglePopup<SetupTouchTogglePopup>*>(this)->$SetupTouchTogglePopup<SetupTouchTogglePopup>::updateTargetID();
}

getOutoflineFunctionOf(SimplePlayer, create, , 1, int) {
	return $SimplePlayer<SimplePlayer>::create(p0);
}

getOutoflineFunctionOf(SimplePlayer, setSecondColor, , 1, cocos2d::_ccColor3B const&) {
	return reinterpret_cast<$SimplePlayer<SimplePlayer>*>(this)->$SimplePlayer<SimplePlayer>::setSecondColor(p0);
}

getOutoflineFunctionOf(SimplePlayer, updateColors, , 0) {
	return reinterpret_cast<$SimplePlayer<SimplePlayer>*>(this)->$SimplePlayer<SimplePlayer>::updateColors();
}

getOutoflineFunctionOf(SimplePlayer, updatePlayerFrame, , 2, int, IconType) {
	return reinterpret_cast<$SimplePlayer<SimplePlayer>*>(this)->$SimplePlayer<SimplePlayer>::updatePlayerFrame(p0, p1);
}

getOutoflineFunctionOf(Slider, create, , 7, cocos2d::CCNode*, cocos2d::SEL_MenuHandler, char const*, char const*, char const*, char const*, float) {
	return $Slider<Slider>::create(p0, p1, p2, p3, p4, p5, p6);
}

getOutoflineFunctionOf(Slider, create, , 3, cocos2d::CCNode*, cocos2d::SEL_MenuHandler, float) {
	return $Slider<Slider>::create(p0, p1, p2);
}

getOutoflineFunctionOf(Slider, getValue, , 0) {
	return reinterpret_cast<$Slider<Slider>*>(this)->$Slider<Slider>::getValue();
}

getOutoflineFunctionOf(Slider, setBarVisibility, , 1, bool) {
	return reinterpret_cast<$Slider<Slider>*>(this)->$Slider<Slider>::setBarVisibility(p0);
}

getOutoflineFunctionOf(Slider, setValue, , 1, float) {
	return reinterpret_cast<$Slider<Slider>*>(this)->$Slider<Slider>::setValue(p0);
}

getOutoflineFunctionOf(SliderThumb, getValue, , 0) {
	return reinterpret_cast<$SliderThumb<SliderThumb>*>(this)->$SliderThumb<SliderThumb>::getValue();
}

SongInfoObject::~SongInfoObject() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$SongInfoObject<SongInfoObject>*>(this)->destructor();
}

getOutoflineFunctionOf(SongInfoObject, encodeWithCoder, , 1, DS_Dictionary*) {
	return reinterpret_cast<$SongInfoObject<SongInfoObject>*>(this)->$SongInfoObject<SongInfoObject>::encodeWithCoder(p0);
}

getOutoflineFunctionOf(SongInfoObject, canEncode, , 0) {
	return reinterpret_cast<$SongInfoObject<SongInfoObject>*>(this)->$SongInfoObject<SongInfoObject>::canEncode();
}

getOutoflineFunctionOf(SpawnTriggerAction, createFromString, , 1, gd::string) {
	return $SpawnTriggerAction<SpawnTriggerAction>::createFromString(p0);
}

getOutoflineFunctionOf(TableView, create, , 3, TableViewDelegate*, TableViewDataSource*, cocos2d::CCRect) {
	return $TableView<TableView>::create(p0, p1, p2);
}

getOutoflineFunctionOf(TableView, reloadData, , 0) {
	return reinterpret_cast<$TableView<TableView>*>(this)->$TableView<TableView>::reloadData();
}

TableViewCell::TableViewCell(char const* p0, float p1, float p2) : TableViewCell(*this) {
	reinterpret_cast<$TableViewCell<TableViewCell>*>(this)->constructor(p0, p1, p2);
}

TextArea::~TextArea() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$TextArea<TextArea>*>(this)->destructor();
}

getOutoflineFunctionOf(TextArea, draw, , 0) {
	return reinterpret_cast<$TextArea<TextArea>*>(this)->$TextArea<TextArea>::draw();
}

getOutoflineFunctionOf(TextArea, setOpacity, , 1, unsigned char) {
	return reinterpret_cast<$TextArea<TextArea>*>(this)->$TextArea<TextArea>::setOpacity(p0);
}

getOutoflineFunctionOf(TextArea, create, , 7, gd::string, char const*, float, float, cocos2d::CCPoint, float, bool) {
	return $TextArea<TextArea>::create(p0, p1, p2, p3, p4, p5, p6);
}

getOutoflineFunctionOf(ToggleTriggerAction, createFromString, , 1, gd::string) {
	return $ToggleTriggerAction<ToggleTriggerAction>::createFromString(p0);
}

getOutoflineFunctionOf(TopArtistsLayer, create, , 0) {
	return $TopArtistsLayer<TopArtistsLayer>::create();
}

getOutoflineFunctionOf(TopArtistsLayer, setupLeaderboard, , 1, cocos2d::CCArray*) {
	return reinterpret_cast<$TopArtistsLayer<TopArtistsLayer>*>(this)->$TopArtistsLayer<TopArtistsLayer>::setupLeaderboard(p0);
}

getOutoflineFunctionOf(TopArtistsLayer, init, , 0) {
	return reinterpret_cast<$TopArtistsLayer<TopArtistsLayer>*>(this)->$TopArtistsLayer<TopArtistsLayer>::init();
}

getOutoflineFunctionOf(TopArtistsLayer, loadPage, , 1, int) {
	return reinterpret_cast<$TopArtistsLayer<TopArtistsLayer>*>(this)->$TopArtistsLayer<TopArtistsLayer>::loadPage(p0);
}

getOutoflineFunctionOf(TopArtistsLayer, setupPageInfo, , 2, gd::string, char const*) {
	return reinterpret_cast<$TopArtistsLayer<TopArtistsLayer>*>(this)->$TopArtistsLayer<TopArtistsLayer>::setupPageInfo(p0, p1);
}

getOutoflineFunctionOf(TouchToggleAction, createFromString, , 1, gd::string) {
	return $TouchToggleAction<TouchToggleAction>::createFromString(p0);
}

getOutoflineFunctionOf(UILayer, create, , 0) {
	return $UILayer<UILayer>::create();
}

getOutoflineFunctionOf(UILayer, disableMenu, , 0) {
	return reinterpret_cast<$UILayer<UILayer>*>(this)->$UILayer<UILayer>::disableMenu();
}

getOutoflineFunctionOf(UILayer, enableMenu, , 0) {
	return reinterpret_cast<$UILayer<UILayer>*>(this)->$UILayer<UILayer>::enableMenu();
}

getOutoflineFunctionOf(UILayer, pCommand, , 1, cocos2d::CCNode*) {
	return reinterpret_cast<$UILayer<UILayer>*>(this)->$UILayer<UILayer>::pCommand(p0);
}

getOutoflineFunctionOf(UILayer, toggleCheckpointsMenu, , 1, bool) {
	return reinterpret_cast<$UILayer<UILayer>*>(this)->$UILayer<UILayer>::toggleCheckpointsMenu(p0);
}

UndoObject::~UndoObject() {
	if (destructorLock[this]) return;
	destructorLock[this] = true;
	reinterpret_cast<$UndoObject<UndoObject>*>(this)->destructor();
}

getOutoflineFunctionOf(UndoObject, create, , 2, GameObject*, UndoCommand) {
	return $UndoObject<UndoObject>::create(p0, p1);
}

getOutoflineFunctionOf(UndoObject, createWithArray, , 2, cocos2d::CCArray*, UndoCommand) {
	return $UndoObject<UndoObject>::createWithArray(p0, p1);
}
