// 
// Copyright camila314 & alk1m123 2021. 
// Autogenerated using a python script
//
#include <Header.hpp>

    cocos2d::CCObject::CCObject() {
        using r0 = cocos2d::CCObject*;
        using f0 = r0(*)(cocos2d::CCObject*);
        reinterpret_cast<f0>(base+0x250ca0)(this);
    }

    decltype(std::declval<cocos2d::CCObject>().acceptVisitor(std::declval<cocos2d::CCDataVisitor&>())) cocos2d::CCObject::acceptVisitor(cocos2d::CCDataVisitor& p0) {
        using r1 = decltype(std::declval<cocos2d::CCObject>().acceptVisitor(std::declval<cocos2d::CCDataVisitor&>()));
        using f1 = r1(*)(cocos2d::CCObject*, cocos2d::CCDataVisitor&);
        return reinterpret_cast<f1>(base+0x250f30)(this, p0);
    }

    decltype(std::declval<cocos2d::CCObject>().autorelease()) cocos2d::CCObject::autorelease() {
        using r2 = decltype(std::declval<cocos2d::CCObject>().autorelease());
        using f2 = r2(*)(cocos2d::CCObject*);
        return reinterpret_cast<f2>(base+0x250ed0)(this);
    }

    decltype(std::declval<cocos2d::CCObject>().canEncode()) cocos2d::CCObject::canEncode() {
        using r3 = decltype(std::declval<cocos2d::CCObject>().canEncode());
        using f3 = r3(*)(cocos2d::CCObject*);
        return reinterpret_cast<f3>(base+0x250f90)(this);
    }

    decltype(std::declval<cocos2d::CCObject>().encodeWithCoder(std::declval<DS_Dictionary*>())) cocos2d::CCObject::encodeWithCoder(DS_Dictionary* p0) {
        using r4 = decltype(std::declval<cocos2d::CCObject>().encodeWithCoder(std::declval<DS_Dictionary*>()));
        using f4 = r4(*)(cocos2d::CCObject*, DS_Dictionary*);
        return reinterpret_cast<f4>(base+0x250f70)(this, p0);
    }

    decltype(std::declval<cocos2d::CCObject>().getTag()) cocos2d::CCObject::getTag() const {
        using r5 = decltype(std::declval<cocos2d::CCObject>().getTag());
        using f5 = r5(*)(const cocos2d::CCObject*);
        return reinterpret_cast<f5>(base+0x250f50)(this);
    }

    decltype(std::declval<cocos2d::CCObject>().isEqual(std::declval<cocos2d::CCObject const*>())) cocos2d::CCObject::isEqual(cocos2d::CCObject const* p0) {
        using r6 = decltype(std::declval<cocos2d::CCObject>().isEqual(std::declval<cocos2d::CCObject const*>()));
        using f6 = r6(*)(cocos2d::CCObject*, cocos2d::CCObject const*);
        return reinterpret_cast<f6>(base+0x250f20)(this, p0);
    }

    decltype(std::declval<cocos2d::CCObject>().release()) cocos2d::CCObject::release() {
        using r7 = decltype(std::declval<cocos2d::CCObject>().release());
        using f7 = r7(*)(cocos2d::CCObject*);
        return reinterpret_cast<f7>(base+0x250ea0)(this);
    }

    decltype(std::declval<cocos2d::CCObject>().retain()) cocos2d::CCObject::retain() {
        using r8 = decltype(std::declval<cocos2d::CCObject>().retain());
        using f8 = r8(*)(cocos2d::CCObject*);
        return reinterpret_cast<f8>(base+0x250ec0)(this);
    }

    decltype(std::declval<cocos2d::CCObject>().setTag(std::declval<int>())) cocos2d::CCObject::setTag(int p0) {
        using r9 = decltype(std::declval<cocos2d::CCObject>().setTag(std::declval<int>()));
        using f9 = r9(*)(cocos2d::CCObject*, int);
        return reinterpret_cast<f9>(base+0x250f60)(this, p0);
    }

    cocos2d::CCObject::~CCObject() {
        jumpDestructor(0x250d90)
    }

cocos2d::CCObject* cocos2d::CCCopying::copyWithZone(cocos2d::CCZone*) {
    // 2 people complimented my hair today i feel happy
    //
    // add 3 to that c:
    return 0;
};

    cocos2d::CCNode::CCNode() {
        using r11 = cocos2d::CCNode*;
        using f11 = r11(*)(cocos2d::CCNode*);
        reinterpret_cast<f11>(base+0x122550)(this);
    }

    decltype(std::declval<cocos2d::CCNode>()._setZOrder(std::declval<int>())) cocos2d::CCNode::_setZOrder(int p0) {
        using r12 = decltype(std::declval<cocos2d::CCNode>()._setZOrder(std::declval<int>()));
        using f12 = r12(*)(cocos2d::CCNode*, int);
        return reinterpret_cast<f12>(base+0x122990)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().addChild(std::declval<cocos2d::CCNode*>())) cocos2d::CCNode::addChild(cocos2d::CCNode* p0) {
        using r13 = decltype(std::declval<cocos2d::CCNode>().addChild(std::declval<cocos2d::CCNode*>()));
        using f13 = r13(*)(cocos2d::CCNode*, cocos2d::CCNode*);
        return reinterpret_cast<f13>(base+0x1233d0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().addChild(std::declval<cocos2d::CCNode*>(), std::declval<int>())) cocos2d::CCNode::addChild(cocos2d::CCNode* p0, int p1) {
        using r14 = decltype(std::declval<cocos2d::CCNode>().addChild(std::declval<cocos2d::CCNode*>(), std::declval<int>()));
        using f14 = r14(*)(cocos2d::CCNode*, cocos2d::CCNode*, int);
        return reinterpret_cast<f14>(base+0x1233b0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCNode>().addChild(std::declval<cocos2d::CCNode*>(), std::declval<int>(), std::declval<int>())) cocos2d::CCNode::addChild(cocos2d::CCNode* p0, int p1, int p2) {
        using r15 = decltype(std::declval<cocos2d::CCNode>().addChild(std::declval<cocos2d::CCNode*>(), std::declval<int>(), std::declval<int>()));
        using f15 = r15(*)(cocos2d::CCNode*, cocos2d::CCNode*, int, int);
        return reinterpret_cast<f15>(base+0x1232a0)(this, p0, p1, p2);
    }

    decltype(std::declval<cocos2d::CCNode>().addComponent(std::declval<cocos2d::CCComponent*>())) cocos2d::CCNode::addComponent(cocos2d::CCComponent* p0) {
        using r16 = decltype(std::declval<cocos2d::CCNode>().addComponent(std::declval<cocos2d::CCComponent*>()));
        using f16 = r16(*)(cocos2d::CCNode*, cocos2d::CCComponent*);
        return reinterpret_cast<f16>(base+0x124a40)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().cleanup()) cocos2d::CCNode::cleanup() {
        using r17 = decltype(std::declval<cocos2d::CCNode>().cleanup());
        using f17 = r17(*)(cocos2d::CCNode*);
        return reinterpret_cast<f17>(base+0x123100)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().convertToNodeSpace(std::declval<cocos2d::CCPoint const&>())) cocos2d::CCNode::convertToNodeSpace(cocos2d::CCPoint const& p0) {
        using r18 = decltype(std::declval<cocos2d::CCNode>().convertToNodeSpace(std::declval<cocos2d::CCPoint const&>()));
        using f18 = r18(*)(cocos2d::CCNode*, cocos2d::CCPoint const&);
        return reinterpret_cast<f18>(base+0x124750)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().convertToWorldSpace(std::declval<cocos2d::CCPoint const&>())) cocos2d::CCNode::convertToWorldSpace(cocos2d::CCPoint const& p0) {
        using r19 = decltype(std::declval<cocos2d::CCNode>().convertToWorldSpace(std::declval<cocos2d::CCPoint const&>()));
        using f19 = r19(*)(cocos2d::CCNode*, cocos2d::CCPoint const&);
        return reinterpret_cast<f19>(base+0x124790)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().create()) cocos2d::CCNode::create() {
        using r20 = decltype(std::declval<cocos2d::CCNode>().create());
        using f20 = r20(*)();
        return reinterpret_cast<f20>(base+0x1230a0)();

    }

    decltype(std::declval<cocos2d::CCNode>().draw()) cocos2d::CCNode::draw() {
        using r21 = decltype(std::declval<cocos2d::CCNode>().draw());
        using f21 = r21(*)(cocos2d::CCNode*);
        return reinterpret_cast<f21>(base+0x123840)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getActionByTag(std::declval<int>())) cocos2d::CCNode::getActionByTag(int p0) {
        using r22 = decltype(std::declval<cocos2d::CCNode>().getActionByTag(std::declval<int>()));
        using f22 = r22(*)(cocos2d::CCNode*, int);
        return reinterpret_cast<f22>(base+0x123ee0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().getActionManager()) cocos2d::CCNode::getActionManager() {
        using r23 = decltype(std::declval<cocos2d::CCNode>().getActionManager());
        using f23 = r23(*)(cocos2d::CCNode*);
        return reinterpret_cast<f23>(base+0x123e50)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getAnchorPoint()) cocos2d::CCNode::getAnchorPoint() {
        using r24 = decltype(std::declval<cocos2d::CCNode>().getAnchorPoint());
        using f24 = r24(*)(cocos2d::CCNode*);
        return reinterpret_cast<f24>(base+0x122d80)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getAnchorPointInPoints()) cocos2d::CCNode::getAnchorPointInPoints() {
        using r25 = decltype(std::declval<cocos2d::CCNode>().getAnchorPointInPoints());
        using f25 = r25(*)(cocos2d::CCNode*);
        return reinterpret_cast<f25>(base+0x122d70)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getCamera()) cocos2d::CCNode::getCamera() {
        using r26 = decltype(std::declval<cocos2d::CCNode>().getCamera());
        using f26 = r26(*)(cocos2d::CCNode*);
        return reinterpret_cast<f26>(base+0x122cb0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getChildByTag(std::declval<int>())) cocos2d::CCNode::getChildByTag(int p0) {
        using r27 = decltype(std::declval<cocos2d::CCNode>().getChildByTag(std::declval<int>()));
        using f27 = r27(*)(cocos2d::CCNode*, int);
        return reinterpret_cast<f27>(base+0x123220)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().getChildren()) cocos2d::CCNode::getChildren() {
        using r28 = decltype(std::declval<cocos2d::CCNode>().getChildren());
        using f28 = r28(*)(cocos2d::CCNode*);
        return reinterpret_cast<f28>(base+0x122c80)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getChildrenCount()) cocos2d::CCNode::getChildrenCount() const {
        using r29 = decltype(std::declval<cocos2d::CCNode>().getChildrenCount());
        using f29 = r29(*)(const cocos2d::CCNode*);
        return reinterpret_cast<f29>(base+0x122c90)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getContentSize()) cocos2d::CCNode::getContentSize() const {
        using r30 = decltype(std::declval<cocos2d::CCNode>().getContentSize());
        using f30 = r30(*)(const cocos2d::CCNode*);
        return reinterpret_cast<f30>(base+0x122e00)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getGLServerState()) cocos2d::CCNode::getGLServerState() {
        using r31 = decltype(std::declval<cocos2d::CCNode>().getGLServerState());
        using f31 = r31(*)(cocos2d::CCNode*);
        return reinterpret_cast<f31>(base+0x122f90)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getGrid()) cocos2d::CCNode::getGrid() {
        using r32 = decltype(std::declval<cocos2d::CCNode>().getGrid());
        using f32 = r32(*)(cocos2d::CCNode*);
        return reinterpret_cast<f32>(base+0x122d00)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getOrderOfArrival()) cocos2d::CCNode::getOrderOfArrival() {
        using r33 = decltype(std::declval<cocos2d::CCNode>().getOrderOfArrival());
        using f33 = r33(*)(cocos2d::CCNode*);
        return reinterpret_cast<f33>(base+0x122f50)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getParent()) cocos2d::CCNode::getParent() {
        using r34 = decltype(std::declval<cocos2d::CCNode>().getParent());
        using f34 = r34(*)(cocos2d::CCNode*);
        return reinterpret_cast<f34>(base+0x122ed0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getPosition()) cocos2d::CCNode::getPosition() {
        using r35 = decltype(std::declval<cocos2d::CCNode>().getPosition());
        using f35 = r35(*)(cocos2d::CCNode*);
        return reinterpret_cast<f35>(base+0x122b60)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getPosition(std::declval<float*>(), std::declval<float*>())) cocos2d::CCNode::getPosition(float* p0, float* p1) {
        using r36 = decltype(std::declval<cocos2d::CCNode>().getPosition(std::declval<float*>(), std::declval<float*>()));
        using f36 = r36(*)(cocos2d::CCNode*, float*, float*);
        return reinterpret_cast<f36>(base+0x122b90)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCNode>().getPositionX()) cocos2d::CCNode::getPositionX() {
        using r37 = decltype(std::declval<cocos2d::CCNode>().getPositionX());
        using f37 = r37(*)(cocos2d::CCNode*);
        return reinterpret_cast<f37>(base+0x122be0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getPositionY()) cocos2d::CCNode::getPositionY() {
        using r38 = decltype(std::declval<cocos2d::CCNode>().getPositionY());
        using f38 = r38(*)(cocos2d::CCNode*);
        return reinterpret_cast<f38>(base+0x122bf0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getRotation()) cocos2d::CCNode::getRotation() {
        using r39 = decltype(std::declval<cocos2d::CCNode>().getRotation());
        using f39 = r39(*)(cocos2d::CCNode*);
        return reinterpret_cast<f39>(base+0x122a00)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getRotationX()) cocos2d::CCNode::getRotationX() {
        using r40 = decltype(std::declval<cocos2d::CCNode>().getRotationX());
        using f40 = r40(*)(cocos2d::CCNode*);
        return reinterpret_cast<f40>(base+0x122a50)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getRotationY()) cocos2d::CCNode::getRotationY() {
        using r41 = decltype(std::declval<cocos2d::CCNode>().getRotationY());
        using f41 = r41(*)(cocos2d::CCNode*);
        return reinterpret_cast<f41>(base+0x122a80)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getScale()) cocos2d::CCNode::getScale() {
        using r42 = decltype(std::declval<cocos2d::CCNode>().getScale());
        using f42 = r42(*)(cocos2d::CCNode*);
        return reinterpret_cast<f42>(base+0x122ab0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getScaleX()) cocos2d::CCNode::getScaleX() {
        using r43 = decltype(std::declval<cocos2d::CCNode>().getScaleX());
        using f43 = r43(*)(cocos2d::CCNode*);
        return reinterpret_cast<f43>(base+0x122b00)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getScaleY()) cocos2d::CCNode::getScaleY() {
        using r44 = decltype(std::declval<cocos2d::CCNode>().getScaleY());
        using f44 = r44(*)(cocos2d::CCNode*);
        return reinterpret_cast<f44>(base+0x122b30)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getScaledContentSize()) cocos2d::CCNode::getScaledContentSize() {
        using r45 = decltype(std::declval<cocos2d::CCNode>().getScaledContentSize());
        using f45 = r45(*)(cocos2d::CCNode*);
        return reinterpret_cast<f45>(base+0x122e10)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getScheduler()) cocos2d::CCNode::getScheduler() {
        using r46 = decltype(std::declval<cocos2d::CCNode>().getScheduler());
        using f46 = r46(*)(cocos2d::CCNode*);
        return reinterpret_cast<f46>(base+0x123f70)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getShaderProgram()) cocos2d::CCNode::getShaderProgram() {
        using r47 = decltype(std::declval<cocos2d::CCNode>().getShaderProgram());
        using f47 = r47(*)(cocos2d::CCNode*);
        return reinterpret_cast<f47>(base+0x122f70)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getSkewX()) cocos2d::CCNode::getSkewX() {
        using r48 = decltype(std::declval<cocos2d::CCNode>().getSkewX());
        using f48 = r48(*)(cocos2d::CCNode*);
        return reinterpret_cast<f48>(base+0x122920)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getSkewY()) cocos2d::CCNode::getSkewY() {
        using r49 = decltype(std::declval<cocos2d::CCNode>().getSkewY());
        using f49 = r49(*)(cocos2d::CCNode*);
        return reinterpret_cast<f49>(base+0x122950)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getUserData()) cocos2d::CCNode::getUserData() {
        using r50 = decltype(std::declval<cocos2d::CCNode>().getUserData());
        using f50 = r50(*)(cocos2d::CCNode*);
        return reinterpret_cast<f50>(base+0x122f30)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getUserObject()) cocos2d::CCNode::getUserObject() {
        using r51 = decltype(std::declval<cocos2d::CCNode>().getUserObject());
        using f51 = r51(*)(cocos2d::CCNode*);
        return reinterpret_cast<f51>(base+0x122f80)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getVertexZ()) cocos2d::CCNode::getVertexZ() {
        using r52 = decltype(std::declval<cocos2d::CCNode>().getVertexZ());
        using f52 = r52(*)(cocos2d::CCNode*);
        return reinterpret_cast<f52>(base+0x1229e0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().getZOrder()) cocos2d::CCNode::getZOrder() {
        using r53 = decltype(std::declval<cocos2d::CCNode>().getZOrder());
        using f53 = r53(*)(cocos2d::CCNode*);
        return reinterpret_cast<f53>(base+0x122980)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().ignoreAnchorPointForPosition(std::declval<bool>())) cocos2d::CCNode::ignoreAnchorPointForPosition(bool p0) {
        using r54 = decltype(std::declval<cocos2d::CCNode>().ignoreAnchorPointForPosition(std::declval<bool>()));
        using f54 = r54(*)(cocos2d::CCNode*, bool);
        return reinterpret_cast<f54>(base+0x122f00)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().init()) cocos2d::CCNode::init() {
        using r55 = decltype(std::declval<cocos2d::CCNode>().init());
        using f55 = r55(*)(cocos2d::CCNode*);
        return reinterpret_cast<f55>(base+0x122910)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().isIgnoreAnchorPointForPosition()) cocos2d::CCNode::isIgnoreAnchorPointForPosition() {
        using r56 = decltype(std::declval<cocos2d::CCNode>().isIgnoreAnchorPointForPosition());
        using f56 = r56(*)(cocos2d::CCNode*);
        return reinterpret_cast<f56>(base+0x122ef0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().isRunning()) cocos2d::CCNode::isRunning() {
        using r57 = decltype(std::declval<cocos2d::CCNode>().isRunning());
        using f57 = r57(*)(cocos2d::CCNode*);
        return reinterpret_cast<f57>(base+0x122ec0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().isVisible()) cocos2d::CCNode::isVisible() {
        using r58 = decltype(std::declval<cocos2d::CCNode>().isVisible());
        using f58 = r58(*)(cocos2d::CCNode*);
        return reinterpret_cast<f58>(base+0x122d50)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().nodeToParentTransform()) cocos2d::CCNode::nodeToParentTransform() {
        using r59 = decltype(std::declval<cocos2d::CCNode>().nodeToParentTransform());
        using f59 = r59(*)(cocos2d::CCNode*);
        return reinterpret_cast<f59>(base+0x124210)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().nodeToWorldTransform()) cocos2d::CCNode::nodeToWorldTransform() {
        using r60 = decltype(std::declval<cocos2d::CCNode>().nodeToWorldTransform());
        using f60 = r60(*)(cocos2d::CCNode*);
        return reinterpret_cast<f60>(base+0x124670)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().onEnter()) cocos2d::CCNode::onEnter() {
        using r61 = decltype(std::declval<cocos2d::CCNode>().onEnter());
        using f61 = r61(*)(cocos2d::CCNode*);
        return reinterpret_cast<f61>(base+0x123a90)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().onEnterTransitionDidFinish()) cocos2d::CCNode::onEnterTransitionDidFinish() {
        using r62 = decltype(std::declval<cocos2d::CCNode>().onEnterTransitionDidFinish());
        using f62 = r62(*)(cocos2d::CCNode*);
        return reinterpret_cast<f62>(base+0x123b90)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().onExit()) cocos2d::CCNode::onExit() {
        using r63 = decltype(std::declval<cocos2d::CCNode>().onExit());
        using f63 = r63(*)(cocos2d::CCNode*);
        return reinterpret_cast<f63>(base+0x123ca0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().onExitTransitionDidStart()) cocos2d::CCNode::onExitTransitionDidStart() {
        using r64 = decltype(std::declval<cocos2d::CCNode>().onExitTransitionDidStart());
        using f64 = r64(*)(cocos2d::CCNode*);
        return reinterpret_cast<f64>(base+0x123c00)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().parentToNodeTransform()) cocos2d::CCNode::parentToNodeTransform() {
        using r65 = decltype(std::declval<cocos2d::CCNode>().parentToNodeTransform());
        using f65 = r65(*)(cocos2d::CCNode*);
        return reinterpret_cast<f65>(base+0x1245d0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().pauseSchedulerAndActions()) cocos2d::CCNode::pauseSchedulerAndActions() {
        using r66 = decltype(std::declval<cocos2d::CCNode>().pauseSchedulerAndActions());
        using f66 = r66(*)(cocos2d::CCNode*);
        return reinterpret_cast<f66>(base+0x123d60)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().registerScriptHandler(std::declval<int>())) cocos2d::CCNode::registerScriptHandler(int p0) {
        using r67 = decltype(std::declval<cocos2d::CCNode>().registerScriptHandler(std::declval<int>()));
        using f67 = r67(*)(cocos2d::CCNode*, int);
        return reinterpret_cast<f67>(base+0x123d90)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().removeAllChildren()) cocos2d::CCNode::removeAllChildren() {
        using r68 = decltype(std::declval<cocos2d::CCNode>().removeAllChildren());
        using f68 = r68(*)(cocos2d::CCNode*);
        return reinterpret_cast<f68>(base+0x123600)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().removeAllChildrenWithCleanup(std::declval<bool>())) cocos2d::CCNode::removeAllChildrenWithCleanup(bool p0) {
        using r69 = decltype(std::declval<cocos2d::CCNode>().removeAllChildrenWithCleanup(std::declval<bool>()));
        using f69 = r69(*)(cocos2d::CCNode*, bool);
        return reinterpret_cast<f69>(base+0x123620)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().removeAllComponents()) cocos2d::CCNode::removeAllComponents() {
        using r70 = decltype(std::declval<cocos2d::CCNode>().removeAllComponents());
        using f70 = r70(*)(cocos2d::CCNode*);
        return reinterpret_cast<f70>(base+0x124aa0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().removeChild(std::declval<cocos2d::CCNode*>())) cocos2d::CCNode::removeChild(cocos2d::CCNode* p0) {
        using r71 = decltype(std::declval<cocos2d::CCNode>().removeChild(std::declval<cocos2d::CCNode*>()));
        using f71 = r71(*)(cocos2d::CCNode*, cocos2d::CCNode*);
        return reinterpret_cast<f71>(base+0x123460)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().removeChild(std::declval<cocos2d::CCNode*>(), std::declval<bool>())) cocos2d::CCNode::removeChild(cocos2d::CCNode* p0, bool p1) {
        using r72 = decltype(std::declval<cocos2d::CCNode>().removeChild(std::declval<cocos2d::CCNode*>(), std::declval<bool>()));
        using f72 = r72(*)(cocos2d::CCNode*, cocos2d::CCNode*, bool);
        return reinterpret_cast<f72>(base+0x123480)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCNode>().removeChildByTag(std::declval<int>())) cocos2d::CCNode::removeChildByTag(int p0) {
        using r73 = decltype(std::declval<cocos2d::CCNode>().removeChildByTag(std::declval<int>()));
        using f73 = r73(*)(cocos2d::CCNode*, int);
        return reinterpret_cast<f73>(base+0x1235a0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().removeChildByTag(std::declval<int>(), std::declval<bool>())) cocos2d::CCNode::removeChildByTag(int p0, bool p1) {
        using r74 = decltype(std::declval<cocos2d::CCNode>().removeChildByTag(std::declval<int>(), std::declval<bool>()));
        using f74 = r74(*)(cocos2d::CCNode*, int, bool);
        return reinterpret_cast<f74>(base+0x1235c0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCNode>().removeComponent(std::declval<char const*>())) cocos2d::CCNode::removeComponent(char const* p0) {
        using r75 = decltype(std::declval<cocos2d::CCNode>().removeComponent(std::declval<char const*>()));
        using f75 = r75(*)(cocos2d::CCNode*, char const*);
        return reinterpret_cast<f75>(base+0x124a60)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().removeComponent(std::declval<cocos2d::CCComponent*>())) cocos2d::CCNode::removeComponent(cocos2d::CCComponent* p0) {
        using r76 = decltype(std::declval<cocos2d::CCNode>().removeComponent(std::declval<cocos2d::CCComponent*>()));
        using f76 = r76(*)(cocos2d::CCNode*, cocos2d::CCComponent*);
        return reinterpret_cast<f76>(base+0x124a80)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().removeFromParent()) cocos2d::CCNode::removeFromParent() {
        using r77 = decltype(std::declval<cocos2d::CCNode>().removeFromParent());
        using f77 = r77(*)(cocos2d::CCNode*);
        return reinterpret_cast<f77>(base+0x1233f0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().removeFromParentAndCleanup(std::declval<bool>())) cocos2d::CCNode::removeFromParentAndCleanup(bool p0) {
        using r78 = decltype(std::declval<cocos2d::CCNode>().removeFromParentAndCleanup(std::declval<bool>()));
        using f78 = r78(*)(cocos2d::CCNode*, bool);
        return reinterpret_cast<f78>(base+0x123410)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().removeMeAndCleanup()) cocos2d::CCNode::removeMeAndCleanup() {
        using r79 = decltype(std::declval<cocos2d::CCNode>().removeMeAndCleanup());
        using f79 = r79(*)(cocos2d::CCNode*);
        return reinterpret_cast<f79>(base+0x123440)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().reorderChild(std::declval<cocos2d::CCNode*>(), std::declval<int>())) cocos2d::CCNode::reorderChild(cocos2d::CCNode* p0, int p1) {
        using r80 = decltype(std::declval<cocos2d::CCNode>().reorderChild(std::declval<cocos2d::CCNode*>(), std::declval<int>()));
        using f80 = r80(*)(cocos2d::CCNode*, cocos2d::CCNode*, int);
        return reinterpret_cast<f80>(base+0x123760)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCNode>().resumeSchedulerAndActions()) cocos2d::CCNode::resumeSchedulerAndActions() {
        using r81 = decltype(std::declval<cocos2d::CCNode>().resumeSchedulerAndActions());
        using f81 = r81(*)(cocos2d::CCNode*);
        return reinterpret_cast<f81>(base+0x123b60)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().runAction(std::declval<cocos2d::CCAction*>())) cocos2d::CCNode::runAction(cocos2d::CCAction* p0) {
        using r82 = decltype(std::declval<cocos2d::CCNode>().runAction(std::declval<cocos2d::CCAction*>()));
        using f82 = r82(*)(cocos2d::CCNode*, cocos2d::CCAction*);
        return reinterpret_cast<f82>(base+0x123e60)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().schedule(std::declval<cocos2d::SEL_SCHEDULE>())) cocos2d::CCNode::schedule(cocos2d::SEL_SCHEDULE p0) {
        using r83 = decltype(std::declval<cocos2d::CCNode>().schedule(std::declval<cocos2d::SEL_SCHEDULE>()));
        using f83 = r83(*)(cocos2d::CCNode*, cocos2d::SEL_SCHEDULE);
        return reinterpret_cast<f83>(base+0x1240b0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().schedule(std::declval<cocos2d::SEL_SCHEDULE>(), std::declval<float>())) cocos2d::CCNode::schedule(cocos2d::SEL_SCHEDULE p0, float p1) {
        using r84 = decltype(std::declval<cocos2d::CCNode>().schedule(std::declval<cocos2d::SEL_SCHEDULE>(), std::declval<float>()));
        using f84 = r84(*)(cocos2d::CCNode*, cocos2d::SEL_SCHEDULE, float);
        return reinterpret_cast<f84>(base+0x124120)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCNode>().scheduleUpdate()) cocos2d::CCNode::scheduleUpdate() {
        using r85 = decltype(std::declval<cocos2d::CCNode>().scheduleUpdate());
        using f85 = r85(*)(cocos2d::CCNode*);
        return reinterpret_cast<f85>(base+0x123f80)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().setActionManager(std::declval<cocos2d::CCActionManager*>())) cocos2d::CCNode::setActionManager(cocos2d::CCActionManager* p0) {
        using r86 = decltype(std::declval<cocos2d::CCNode>().setActionManager(std::declval<cocos2d::CCActionManager*>()));
        using f86 = r86(*)(cocos2d::CCNode*, cocos2d::CCActionManager*);
        return reinterpret_cast<f86>(base+0x123e00)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setAnchorPoint(std::declval<cocos2d::CCPoint const&>())) cocos2d::CCNode::setAnchorPoint(cocos2d::CCPoint const& p0) {
        using r87 = decltype(std::declval<cocos2d::CCNode>().setAnchorPoint(std::declval<cocos2d::CCPoint const&>()));
        using f87 = r87(*)(cocos2d::CCNode*, cocos2d::CCPoint const&);
        return reinterpret_cast<f87>(base+0x122d90)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setContentSize(std::declval<cocos2d::CCSize const&>())) cocos2d::CCNode::setContentSize(cocos2d::CCSize const& p0) {
        using r88 = decltype(std::declval<cocos2d::CCNode>().setContentSize(std::declval<cocos2d::CCSize const&>()));
        using f88 = r88(*)(cocos2d::CCNode*, cocos2d::CCSize const&);
        return reinterpret_cast<f88>(base+0x122e50)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setGLServerState(std::declval<cocos2d::ccGLServerState>())) cocos2d::CCNode::setGLServerState(cocos2d::ccGLServerState p0) {
        using r89 = decltype(std::declval<cocos2d::CCNode>().setGLServerState(std::declval<cocos2d::ccGLServerState>()));
        using f89 = r89(*)(cocos2d::CCNode*, cocos2d::ccGLServerState);
        return reinterpret_cast<f89>(base+0x122fa0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setGrid(std::declval<cocos2d::CCGridBase*>())) cocos2d::CCNode::setGrid(cocos2d::CCGridBase* p0) {
        using r90 = decltype(std::declval<cocos2d::CCNode>().setGrid(std::declval<cocos2d::CCGridBase*>()));
        using f90 = r90(*)(cocos2d::CCNode*, cocos2d::CCGridBase*);
        return reinterpret_cast<f90>(base+0x122d10)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setOrderOfArrival(std::declval<unsigned int>())) cocos2d::CCNode::setOrderOfArrival(unsigned int p0) {
        using r91 = decltype(std::declval<cocos2d::CCNode>().setOrderOfArrival(std::declval<unsigned int>()));
        using f91 = r91(*)(cocos2d::CCNode*, unsigned int);
        return reinterpret_cast<f91>(base+0x122f60)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setParent(std::declval<cocos2d::CCNode*>())) cocos2d::CCNode::setParent(cocos2d::CCNode* p0) {
        using r92 = decltype(std::declval<cocos2d::CCNode>().setParent(std::declval<cocos2d::CCNode*>()));
        using f92 = r92(*)(cocos2d::CCNode*, cocos2d::CCNode*);
        return reinterpret_cast<f92>(base+0x122ee0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setPosition(std::declval<cocos2d::CCPoint const&>())) cocos2d::CCNode::setPosition(cocos2d::CCPoint const& p0) {
        using r93 = decltype(std::declval<cocos2d::CCNode>().setPosition(std::declval<cocos2d::CCPoint const&>()));
        using f93 = r93(*)(cocos2d::CCNode*, cocos2d::CCPoint const&);
        return reinterpret_cast<f93>(base+0x122b70)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setPosition(std::declval<float>(), std::declval<float>())) cocos2d::CCNode::setPosition(float p0, float p1) {
        using r94 = decltype(std::declval<cocos2d::CCNode>().setPosition(std::declval<float>(), std::declval<float>()));
        using f94 = r94(*)(cocos2d::CCNode*, float, float);
        return reinterpret_cast<f94>(base+0x122ba0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCNode>().setPositionX(std::declval<float>())) cocos2d::CCNode::setPositionX(float p0) {
        using r95 = decltype(std::declval<cocos2d::CCNode>().setPositionX(std::declval<float>()));
        using f95 = r95(*)(cocos2d::CCNode*, float);
        return reinterpret_cast<f95>(base+0x122c00)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setPositionY(std::declval<float>())) cocos2d::CCNode::setPositionY(float p0) {
        using r96 = decltype(std::declval<cocos2d::CCNode>().setPositionY(std::declval<float>()));
        using f96 = r96(*)(cocos2d::CCNode*, float);
        return reinterpret_cast<f96>(base+0x122c40)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setRotation(std::declval<float>())) cocos2d::CCNode::setRotation(float p0) {
        using r97 = decltype(std::declval<cocos2d::CCNode>().setRotation(std::declval<float>()));
        using f97 = r97(*)(cocos2d::CCNode*, float);
        return reinterpret_cast<f97>(base+0x122a10)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setRotationX(std::declval<float>())) cocos2d::CCNode::setRotationX(float p0) {
        using r98 = decltype(std::declval<cocos2d::CCNode>().setRotationX(std::declval<float>()));
        using f98 = r98(*)(cocos2d::CCNode*, float);
        return reinterpret_cast<f98>(base+0x122a60)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setRotationY(std::declval<float>())) cocos2d::CCNode::setRotationY(float p0) {
        using r99 = decltype(std::declval<cocos2d::CCNode>().setRotationY(std::declval<float>()));
        using f99 = r99(*)(cocos2d::CCNode*, float);
        return reinterpret_cast<f99>(base+0x122a90)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setScale(std::declval<float>())) cocos2d::CCNode::setScale(float p0) {
        using r100 = decltype(std::declval<cocos2d::CCNode>().setScale(std::declval<float>()));
        using f100 = r100(*)(cocos2d::CCNode*, float);
        return reinterpret_cast<f100>(base+0x122ac0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setScale(std::declval<float>(), std::declval<float>())) cocos2d::CCNode::setScale(float p0, float p1) {
        using r101 = decltype(std::declval<cocos2d::CCNode>().setScale(std::declval<float>(), std::declval<float>()));
        using f101 = r101(*)(cocos2d::CCNode*, float, float);
        return reinterpret_cast<f101>(base+0x122ae0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCNode>().setScaleX(std::declval<float>())) cocos2d::CCNode::setScaleX(float p0) {
        using r102 = decltype(std::declval<cocos2d::CCNode>().setScaleX(std::declval<float>()));
        using f102 = r102(*)(cocos2d::CCNode*, float);
        return reinterpret_cast<f102>(base+0x122b10)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setScaleY(std::declval<float>())) cocos2d::CCNode::setScaleY(float p0) {
        using r103 = decltype(std::declval<cocos2d::CCNode>().setScaleY(std::declval<float>()));
        using f103 = r103(*)(cocos2d::CCNode*, float);
        return reinterpret_cast<f103>(base+0x122b40)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setScheduler(std::declval<cocos2d::CCScheduler*>())) cocos2d::CCNode::setScheduler(cocos2d::CCScheduler* p0) {
        using r104 = decltype(std::declval<cocos2d::CCNode>().setScheduler(std::declval<cocos2d::CCScheduler*>()));
        using f104 = r104(*)(cocos2d::CCNode*, cocos2d::CCScheduler*);
        return reinterpret_cast<f104>(base+0x123f20)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setShaderProgram(std::declval<cocos2d::CCGLProgram*>())) cocos2d::CCNode::setShaderProgram(cocos2d::CCGLProgram* p0) {
        using r105 = decltype(std::declval<cocos2d::CCNode>().setShaderProgram(std::declval<cocos2d::CCGLProgram*>()));
        using f105 = r105(*)(cocos2d::CCNode*, cocos2d::CCGLProgram*);
        return reinterpret_cast<f105>(base+0x122ff0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setSkewX(std::declval<float>())) cocos2d::CCNode::setSkewX(float p0) {
        using r106 = decltype(std::declval<cocos2d::CCNode>().setSkewX(std::declval<float>()));
        using f106 = r106(*)(cocos2d::CCNode*, float);
        return reinterpret_cast<f106>(base+0x122930)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setSkewY(std::declval<float>())) cocos2d::CCNode::setSkewY(float p0) {
        using r107 = decltype(std::declval<cocos2d::CCNode>().setSkewY(std::declval<float>()));
        using f107 = r107(*)(cocos2d::CCNode*, float);
        return reinterpret_cast<f107>(base+0x122960)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setUserData(std::declval<void*>())) cocos2d::CCNode::setUserData(void* p0) {
        using r108 = decltype(std::declval<cocos2d::CCNode>().setUserData(std::declval<void*>()));
        using f108 = r108(*)(cocos2d::CCNode*, void*);
        return reinterpret_cast<f108>(base+0x122f40)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setUserObject(std::declval<cocos2d::CCObject*>())) cocos2d::CCNode::setUserObject(cocos2d::CCObject* p0) {
        using r109 = decltype(std::declval<cocos2d::CCNode>().setUserObject(std::declval<cocos2d::CCObject*>()));
        using f109 = r109(*)(cocos2d::CCNode*, cocos2d::CCObject*);
        return reinterpret_cast<f109>(base+0x122fb0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setVertexZ(std::declval<float>())) cocos2d::CCNode::setVertexZ(float p0) {
        using r110 = decltype(std::declval<cocos2d::CCNode>().setVertexZ(std::declval<float>()));
        using f110 = r110(*)(cocos2d::CCNode*, float);
        return reinterpret_cast<f110>(base+0x1229f0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setVisible(std::declval<bool>())) cocos2d::CCNode::setVisible(bool p0) {
        using r111 = decltype(std::declval<cocos2d::CCNode>().setVisible(std::declval<bool>()));
        using f111 = r111(*)(cocos2d::CCNode*, bool);
        return reinterpret_cast<f111>(base+0x122d60)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().setZOrder(std::declval<int>())) cocos2d::CCNode::setZOrder(int p0) {
        using r112 = decltype(std::declval<cocos2d::CCNode>().setZOrder(std::declval<int>()));
        using f112 = r112(*)(cocos2d::CCNode*, int);
        return reinterpret_cast<f112>(base+0x1229a0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().sortAllChildren()) cocos2d::CCNode::sortAllChildren() {
        using r113 = decltype(std::declval<cocos2d::CCNode>().sortAllChildren());
        using f113 = r113(*)(cocos2d::CCNode*);
        return reinterpret_cast<f113>(base+0x1237b0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().stopActionByTag(std::declval<int>())) cocos2d::CCNode::stopActionByTag(int p0) {
        using r114 = decltype(std::declval<cocos2d::CCNode>().stopActionByTag(std::declval<int>()));
        using f114 = r114(*)(cocos2d::CCNode*, int);
        return reinterpret_cast<f114>(base+0x123ec0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().stopAllActions()) cocos2d::CCNode::stopAllActions() {
        using r115 = decltype(std::declval<cocos2d::CCNode>().stopAllActions());
        using f115 = r115(*)(cocos2d::CCNode*);
        return reinterpret_cast<f115>(base+0x123190)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().unregisterScriptHandler()) cocos2d::CCNode::unregisterScriptHandler() {
        using r116 = decltype(std::declval<cocos2d::CCNode>().unregisterScriptHandler());
        using f116 = r116(*)(cocos2d::CCNode*);
        return reinterpret_cast<f116>(base+0x123dc0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().unschedule(std::declval<cocos2d::SEL_SCHEDULE>())) cocos2d::CCNode::unschedule(cocos2d::SEL_SCHEDULE p0) {
        using r117 = decltype(std::declval<cocos2d::CCNode>().unschedule(std::declval<cocos2d::SEL_SCHEDULE>()));
        using f117 = r117(*)(cocos2d::CCNode*, cocos2d::SEL_SCHEDULE);
        return reinterpret_cast<f117>(base+0x124180)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().unscheduleAllSelectors()) cocos2d::CCNode::unscheduleAllSelectors() {
        using r118 = decltype(std::declval<cocos2d::CCNode>().unscheduleAllSelectors());
        using f118 = r118(*)(cocos2d::CCNode*);
        return reinterpret_cast<f118>(base+0x1231b0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().unscheduleUpdate()) cocos2d::CCNode::unscheduleUpdate() {
        using r119 = decltype(std::declval<cocos2d::CCNode>().unscheduleUpdate());
        using f119 = r119(*)(cocos2d::CCNode*);
        return reinterpret_cast<f119>(base+0x124060)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().update(std::declval<float>())) cocos2d::CCNode::update(float p0) {
        using r120 = decltype(std::declval<cocos2d::CCNode>().update(std::declval<float>()));
        using f120 = r120(*)(cocos2d::CCNode*, float);
        return reinterpret_cast<f120>(base+0x1241a0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNode>().updateTransform()) cocos2d::CCNode::updateTransform() {
        using r121 = decltype(std::declval<cocos2d::CCNode>().updateTransform());
        using f121 = r121(*)(cocos2d::CCNode*);
        return reinterpret_cast<f121>(base+0x1249d0)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().updateTweenAction(std::declval<float>(), std::declval<char const*>())) cocos2d::CCNode::updateTweenAction(float p0, char const* p1) {
        using r122 = decltype(std::declval<cocos2d::CCNode>().updateTweenAction(std::declval<float>(), std::declval<char const*>()));
        using f122 = r122(*)(cocos2d::CCNode*, float, char const*);
        return reinterpret_cast<f122>(base+0x1249c0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCNode>().visit()) cocos2d::CCNode::visit() {
        using r123 = decltype(std::declval<cocos2d::CCNode>().visit());
        using f123 = r123(*)(cocos2d::CCNode*);
        return reinterpret_cast<f123>(base+0x123850)(this);
    }

    decltype(std::declval<cocos2d::CCNode>().worldToNodeTransform()) cocos2d::CCNode::worldToNodeTransform() {
        using r124 = decltype(std::declval<cocos2d::CCNode>().worldToNodeTransform());
        using f124 = r124(*)(cocos2d::CCNode*);
        return reinterpret_cast<f124>(base+0x124710)(this);
    }

    cocos2d::CCNode::~CCNode() {
        jumpDestructor(0x122750)
    }

    cocos2d::CCNodeRGBA::CCNodeRGBA() {
        using r126 = cocos2d::CCNodeRGBA*;
        using f126 = r126(*)(cocos2d::CCNodeRGBA*);
        reinterpret_cast<f126>(base+0x124b30)(this);
    }

    cocos2d::CCNodeRGBA::~CCNodeRGBA() {
        jumpDestructor(0x124bb0)
    }

    decltype(std::declval<cocos2d::CCNodeRGBA>().init()) cocos2d::CCNodeRGBA::init() {
        using r128 = decltype(std::declval<cocos2d::CCNodeRGBA>().init());
        using f128 = r128(*)(cocos2d::CCNodeRGBA*);
        return reinterpret_cast<f128>(base+0x124bf0)(this);
    }

    decltype(std::declval<cocos2d::CCNodeRGBA>().getOpacity()) cocos2d::CCNodeRGBA::getOpacity() {
        using r129 = decltype(std::declval<cocos2d::CCNodeRGBA>().getOpacity());
        using f129 = r129(*)(cocos2d::CCNodeRGBA*);
        return reinterpret_cast<f129>(base+0x124cd0)(this);
    }

    decltype(std::declval<cocos2d::CCNodeRGBA>().getDisplayedOpacity()) cocos2d::CCNodeRGBA::getDisplayedOpacity() {
        using r130 = decltype(std::declval<cocos2d::CCNodeRGBA>().getDisplayedOpacity());
        using f130 = r130(*)(cocos2d::CCNodeRGBA*);
        return reinterpret_cast<f130>(base+0x124cf0)(this);
    }

    decltype(std::declval<cocos2d::CCNodeRGBA>().setOpacity(std::declval<GLubyte>())) cocos2d::CCNodeRGBA::setOpacity(GLubyte p0) {
        using r131 = decltype(std::declval<cocos2d::CCNodeRGBA>().setOpacity(std::declval<GLubyte>()));
        using f131 = r131(*)(cocos2d::CCNodeRGBA*, GLubyte);
        return reinterpret_cast<f131>(base+0x124d10)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNodeRGBA>().updateDisplayedOpacity(std::declval<GLubyte>())) cocos2d::CCNodeRGBA::updateDisplayedOpacity(GLubyte p0) {
        using r132 = decltype(std::declval<cocos2d::CCNodeRGBA>().updateDisplayedOpacity(std::declval<GLubyte>()));
        using f132 = r132(*)(cocos2d::CCNodeRGBA*, GLubyte);
        return reinterpret_cast<f132>(base+0x124e50)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNodeRGBA>().isCascadeOpacityEnabled()) cocos2d::CCNodeRGBA::isCascadeOpacityEnabled() {
        using r133 = decltype(std::declval<cocos2d::CCNodeRGBA>().isCascadeOpacityEnabled());
        using f133 = r133(*)(cocos2d::CCNodeRGBA*);
        return reinterpret_cast<f133>(base+0x124fe0)(this);
    }

    decltype(std::declval<cocos2d::CCNodeRGBA>().setCascadeOpacityEnabled(std::declval<bool>())) cocos2d::CCNodeRGBA::setCascadeOpacityEnabled(bool p0) {
        using r134 = decltype(std::declval<cocos2d::CCNodeRGBA>().setCascadeOpacityEnabled(std::declval<bool>()));
        using f134 = r134(*)(cocos2d::CCNodeRGBA*, bool);
        return reinterpret_cast<f134>(base+0x125000)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNodeRGBA>().getColor()) cocos2d::CCNodeRGBA::getColor() {
        using r135 = decltype(std::declval<cocos2d::CCNodeRGBA>().getColor());
        using f135 = r135(*)(cocos2d::CCNodeRGBA*);
        return reinterpret_cast<f135>(base+0x125020)(this);
    }

    decltype(std::declval<cocos2d::CCNodeRGBA>().getDisplayedColor()) cocos2d::CCNodeRGBA::getDisplayedColor() {
        using r136 = decltype(std::declval<cocos2d::CCNodeRGBA>().getDisplayedColor());
        using f136 = r136(*)(cocos2d::CCNodeRGBA*);
        return reinterpret_cast<f136>(base+0x125040)(this);
    }

    decltype(std::declval<cocos2d::CCNodeRGBA>().setColor(std::declval<cocos2d::_ccColor3B const&>())) cocos2d::CCNodeRGBA::setColor(cocos2d::_ccColor3B const& p0) {
        using r137 = decltype(std::declval<cocos2d::CCNodeRGBA>().setColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f137 = r137(*)(cocos2d::CCNodeRGBA*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f137>(base+0x125060)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNodeRGBA>().updateDisplayedColor(std::declval<cocos2d::_ccColor3B const&>())) cocos2d::CCNodeRGBA::updateDisplayedColor(cocos2d::_ccColor3B const& p0) {
        using r138 = decltype(std::declval<cocos2d::CCNodeRGBA>().updateDisplayedColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f138 = r138(*)(cocos2d::CCNodeRGBA*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f138>(base+0x1251e0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCNodeRGBA>().isCascadeColorEnabled()) cocos2d::CCNodeRGBA::isCascadeColorEnabled() {
        using r139 = decltype(std::declval<cocos2d::CCNodeRGBA>().isCascadeColorEnabled());
        using f139 = r139(*)(cocos2d::CCNodeRGBA*);
        return reinterpret_cast<f139>(base+0x125320)(this);
    }

    decltype(std::declval<cocos2d::CCNodeRGBA>().setCascadeColorEnabled(std::declval<bool>())) cocos2d::CCNodeRGBA::setCascadeColorEnabled(bool p0) {
        using r140 = decltype(std::declval<cocos2d::CCNodeRGBA>().setCascadeColorEnabled(std::declval<bool>()));
        using f140 = r140(*)(cocos2d::CCNodeRGBA*, bool);
        return reinterpret_cast<f140>(base+0x125340)(this, p0);
    }

    decltype(std::declval<cocos2d::CCMenu>().alignItemsHorizontallyWithPadding(std::declval<float>())) cocos2d::CCMenu::alignItemsHorizontallyWithPadding(float p0) {
        using r141 = decltype(std::declval<cocos2d::CCMenu>().alignItemsHorizontallyWithPadding(std::declval<float>()));
        using f141 = r141(*)(cocos2d::CCMenu*, float);
        return reinterpret_cast<f141>(base+0x4393e0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCMenu>().alignItemsVerticallyWithPadding(std::declval<float>())) cocos2d::CCMenu::alignItemsVerticallyWithPadding(float p0) {
        using r142 = decltype(std::declval<cocos2d::CCMenu>().alignItemsVerticallyWithPadding(std::declval<float>()));
        using f142 = r142(*)(cocos2d::CCMenu*, float);
        return reinterpret_cast<f142>(base+0x439190)(this, p0);
    }

    decltype(std::declval<cocos2d::CCMenu>().create()) cocos2d::CCMenu::create() {
        using r143 = decltype(std::declval<cocos2d::CCMenu>().create());
        using f143 = r143(*)();
        return reinterpret_cast<f143>(base+0x438720)();

    }

    decltype(std::declval<cocos2d::CCMenu>().createWithArray(std::declval<cocos2d::CCArray*>())) cocos2d::CCMenu::createWithArray(cocos2d::CCArray* p0) {
        using r144 = decltype(std::declval<cocos2d::CCMenu>().createWithArray(std::declval<cocos2d::CCArray*>()));
        using f144 = r144(*)(cocos2d::CCArray*);
        return reinterpret_cast<f144>(base+0x4387e0)(p0);

    }

    decltype(std::declval<cocos2d::CCMenu>().createWithItem(std::declval<cocos2d::CCMenuItem*>())) cocos2d::CCMenu::createWithItem(cocos2d::CCMenuItem* p0) {
        using r145 = decltype(std::declval<cocos2d::CCMenu>().createWithItem(std::declval<cocos2d::CCMenuItem*>()));
        using f145 = r145(*)(cocos2d::CCMenuItem*);
        return reinterpret_cast<f145>(base+0x438b80)(p0);

    }

    cocos2d::CCMenuItem::~CCMenuItem() {
        jumpDestructor(0x1fb8e0)
    }

    decltype(std::declval<cocos2d::CCMenuItem>().activate()) cocos2d::CCMenuItem::activate() {
        using r147 = decltype(std::declval<cocos2d::CCMenuItem>().activate());
        using f147 = r147(*)(cocos2d::CCMenuItem*);
        return reinterpret_cast<f147>(base+0x1fba70)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItem>().selected()) cocos2d::CCMenuItem::selected() {
        using r148 = decltype(std::declval<cocos2d::CCMenuItem>().selected());
        using f148 = r148(*)(cocos2d::CCMenuItem*);
        return reinterpret_cast<f148>(base+0x1fb9e0)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItem>().unselected()) cocos2d::CCMenuItem::unselected() {
        using r149 = decltype(std::declval<cocos2d::CCMenuItem>().unselected());
        using f149 = r149(*)(cocos2d::CCMenuItem*);
        return reinterpret_cast<f149>(base+0x1fb9f0)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItem>().registerScriptTapHandler(std::declval<int>())) cocos2d::CCMenuItem::registerScriptTapHandler(int p0) {
        using r150 = decltype(std::declval<cocos2d::CCMenuItem>().registerScriptTapHandler(std::declval<int>()));
        using f150 = r150(*)(cocos2d::CCMenuItem*, int);
        return reinterpret_cast<f150>(base+0x1fba00)(this, p0);
    }

    decltype(std::declval<cocos2d::CCMenuItem>().unregisterScriptTapHandler()) cocos2d::CCMenuItem::unregisterScriptTapHandler() {
        using r151 = decltype(std::declval<cocos2d::CCMenuItem>().unregisterScriptTapHandler());
        using f151 = r151(*)(cocos2d::CCMenuItem*);
        return reinterpret_cast<f151>(base+0x1fba30)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItem>().isEnabled()) cocos2d::CCMenuItem::isEnabled() {
        using r152 = decltype(std::declval<cocos2d::CCMenuItem>().isEnabled());
        using f152 = r152(*)(cocos2d::CCMenuItem*);
        return reinterpret_cast<f152>(base+0x1fbaf0)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItem>().setEnabled(std::declval<bool>())) cocos2d::CCMenuItem::setEnabled(bool p0) {
        using r153 = decltype(std::declval<cocos2d::CCMenuItem>().setEnabled(std::declval<bool>()));
        using f153 = r153(*)(cocos2d::CCMenuItem*, bool);
        return reinterpret_cast<f153>(base+0x1fbae0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCMenuItem>().isSelected()) cocos2d::CCMenuItem::isSelected() {
        using r154 = decltype(std::declval<cocos2d::CCMenuItem>().isSelected());
        using f154 = r154(*)(cocos2d::CCMenuItem*);
        return reinterpret_cast<f154>(base+0x1fbb50)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItemSprite>().selected()) cocos2d::CCMenuItemSprite::selected() {
        using r155 = decltype(std::declval<cocos2d::CCMenuItemSprite>().selected());
        using f155 = r155(*)(cocos2d::CCMenuItemSprite*);
        return reinterpret_cast<f155>(base+0x1fd3f0)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItemSprite>().unselected()) cocos2d::CCMenuItemSprite::unselected() {
        using r156 = decltype(std::declval<cocos2d::CCMenuItemSprite>().unselected());
        using f156 = r156(*)(cocos2d::CCMenuItemSprite*);
        return reinterpret_cast<f156>(base+0x1fd470)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItemSprite>().setEnabled(std::declval<bool>())) cocos2d::CCMenuItemSprite::setEnabled(bool p0) {
        using r157 = decltype(std::declval<cocos2d::CCMenuItemSprite>().setEnabled(std::declval<bool>()));
        using f157 = r157(*)(cocos2d::CCMenuItemSprite*, bool);
        return reinterpret_cast<f157>(base+0x1fd4e0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCMenuItemSprite>().getNormalImage()) cocos2d::CCMenuItemSprite::getNormalImage() {
        using r158 = decltype(std::declval<cocos2d::CCMenuItemSprite>().getNormalImage());
        using f158 = r158(*)(cocos2d::CCMenuItemSprite*);
        return reinterpret_cast<f158>(base+0x1fcee0)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItemSprite>().setNormalImage(std::declval<cocos2d::CCNode*>())) cocos2d::CCMenuItemSprite::setNormalImage(cocos2d::CCNode* p0) {
        using r159 = decltype(std::declval<cocos2d::CCMenuItemSprite>().setNormalImage(std::declval<cocos2d::CCNode*>()));
        using f159 = r159(*)(cocos2d::CCMenuItemSprite*, cocos2d::CCNode*);
        return reinterpret_cast<f159>(base+0x1fcef0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCMenuItemSprite>().getSelectedImage()) cocos2d::CCMenuItemSprite::getSelectedImage() {
        using r160 = decltype(std::declval<cocos2d::CCMenuItemSprite>().getSelectedImage());
        using f160 = r160(*)(cocos2d::CCMenuItemSprite*);
        return reinterpret_cast<f160>(base+0x1fcfc0)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItemSprite>().setSelectedImage(std::declval<cocos2d::CCNode*>())) cocos2d::CCMenuItemSprite::setSelectedImage(cocos2d::CCNode* p0) {
        using r161 = decltype(std::declval<cocos2d::CCMenuItemSprite>().setSelectedImage(std::declval<cocos2d::CCNode*>()));
        using f161 = r161(*)(cocos2d::CCMenuItemSprite*, cocos2d::CCNode*);
        return reinterpret_cast<f161>(base+0x1fcfd0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCMenuItemSprite>().getDisabledImage()) cocos2d::CCMenuItemSprite::getDisabledImage() {
        using r162 = decltype(std::declval<cocos2d::CCMenuItemSprite>().getDisabledImage());
        using f162 = r162(*)(cocos2d::CCMenuItemSprite*);
        return reinterpret_cast<f162>(base+0x1fd070)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItemSprite>().setDisabledImage(std::declval<cocos2d::CCNode*>())) cocos2d::CCMenuItemSprite::setDisabledImage(cocos2d::CCNode* p0) {
        using r163 = decltype(std::declval<cocos2d::CCMenuItemSprite>().setDisabledImage(std::declval<cocos2d::CCNode*>()));
        using f163 = r163(*)(cocos2d::CCMenuItemSprite*, cocos2d::CCNode*);
        return reinterpret_cast<f163>(base+0x1fd080)(this, p0);
    }

    decltype(std::declval<cocos2d::CCMenuItemSprite>().updateImagesVisibility()) cocos2d::CCMenuItemSprite::updateImagesVisibility() {
        using r164 = decltype(std::declval<cocos2d::CCMenuItemSprite>().updateImagesVisibility());
        using f164 = r164(*)(cocos2d::CCMenuItemSprite*);
        return reinterpret_cast<f164>(base+0x1fd510)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItemSprite>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>())) cocos2d::CCMenuItemSprite::create(cocos2d::CCNode* p0, cocos2d::CCNode* p1, cocos2d::CCNode* p2) {
        using r165 = decltype(std::declval<cocos2d::CCMenuItemSprite>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>()));
        using f165 = r165(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCNode*);
        return reinterpret_cast<f165>(base+0x1fd120)(p0, p1, p2);

    }

    decltype(std::declval<cocos2d::CCMenuItemSprite>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCObject*>(), std::declval<cocos2d::SEL_MenuHandler>())) cocos2d::CCMenuItemSprite::create(cocos2d::CCNode* p0, cocos2d::CCNode* p1, cocos2d::CCNode* p2, cocos2d::CCObject* p3, cocos2d::SEL_MenuHandler p4) {
        using r166 = decltype(std::declval<cocos2d::CCMenuItemSprite>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCObject*>(), std::declval<cocos2d::SEL_MenuHandler>()));
        using f166 = r166(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
        return reinterpret_cast<f166>(base+0x1fd140)(p0, p1, p2, p3, p4);

    }

    decltype(std::declval<cocos2d::CCMenuItemSprite>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCObject*>(), std::declval<cocos2d::SEL_MenuHandler>())) cocos2d::CCMenuItemSprite::create(cocos2d::CCNode* p0, cocos2d::CCNode* p1, cocos2d::CCObject* p2, cocos2d::SEL_MenuHandler p3) {
        using r167 = decltype(std::declval<cocos2d::CCMenuItemSprite>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCObject*>(), std::declval<cocos2d::SEL_MenuHandler>()));
        using f167 = r167(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
        return reinterpret_cast<f167>(base+0x1fd2d0)(p0, p1, p2, p3);

    }

    decltype(std::declval<cocos2d::CCMenuItemImage>().init()) cocos2d::CCMenuItemImage::init() {
        using r168 = decltype(std::declval<cocos2d::CCMenuItemImage>().init());
        using f168 = r168(*)(cocos2d::CCMenuItemImage*);
        return reinterpret_cast<f168>(base+0x1fd750)(this);
    }

    cocos2d::CCMenuItemLabel::~CCMenuItemLabel() {
        jumpDestructor(0x1fc0d0)
    }

    decltype(std::declval<cocos2d::CCMenuItemLabel>().activate()) cocos2d::CCMenuItemLabel::activate() {
        using r170 = decltype(std::declval<cocos2d::CCMenuItemLabel>().activate());
        using f170 = r170(*)(cocos2d::CCMenuItemLabel*);
        return reinterpret_cast<f170>(base+0x1fc240)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItemLabel>().selected()) cocos2d::CCMenuItemLabel::selected() {
        using r171 = decltype(std::declval<cocos2d::CCMenuItemLabel>().selected());
        using f171 = r171(*)(cocos2d::CCMenuItemLabel*);
        return reinterpret_cast<f171>(base+0x1fc2e0)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItemLabel>().unselected()) cocos2d::CCMenuItemLabel::unselected() {
        using r172 = decltype(std::declval<cocos2d::CCMenuItemLabel>().unselected());
        using f172 = r172(*)(cocos2d::CCMenuItemLabel*);
        return reinterpret_cast<f172>(base+0x1fc380)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItemLabel>().setEnabled(std::declval<bool>())) cocos2d::CCMenuItemLabel::setEnabled(bool p0) {
        using r173 = decltype(std::declval<cocos2d::CCMenuItemLabel>().setEnabled(std::declval<bool>()));
        using f173 = r173(*)(cocos2d::CCMenuItemLabel*, bool);
        return reinterpret_cast<f173>(base+0x1fc3f0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCMenuItemLabel>().getDisabledColor()) cocos2d::CCMenuItemLabel::getDisabledColor() {
        using r174 = decltype(std::declval<cocos2d::CCMenuItemLabel>().getDisabledColor());
        using f174 = r174(*)(cocos2d::CCMenuItemLabel*);
        return reinterpret_cast<f174>(base+0x1fbb80)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItemLabel>().setDisabledColor(std::declval<cocos2d::_ccColor3B const&>())) cocos2d::CCMenuItemLabel::setDisabledColor(cocos2d::_ccColor3B const& p0) {
        using r175 = decltype(std::declval<cocos2d::CCMenuItemLabel>().setDisabledColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f175 = r175(*)(cocos2d::CCMenuItemLabel*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f175>(base+0x1fbb90)(this, p0);
    }

    decltype(std::declval<cocos2d::CCMenuItemLabel>().getLabel()) cocos2d::CCMenuItemLabel::getLabel() {
        using r176 = decltype(std::declval<cocos2d::CCMenuItemLabel>().getLabel());
        using f176 = r176(*)(cocos2d::CCMenuItemLabel*);
        return reinterpret_cast<f176>(base+0x1fbbb0)(this);
    }

    decltype(std::declval<cocos2d::CCMenuItemLabel>().setLabel(std::declval<cocos2d::CCNode*>())) cocos2d::CCMenuItemLabel::setLabel(cocos2d::CCNode* p0) {
        using r177 = decltype(std::declval<cocos2d::CCMenuItemLabel>().setLabel(std::declval<cocos2d::CCNode*>()));
        using f177 = r177(*)(cocos2d::CCMenuItemLabel*, cocos2d::CCNode*);
        return reinterpret_cast<f177>(base+0x1fbbc0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCDrawNode>().clear()) cocos2d::CCDrawNode::clear() {
        using r178 = decltype(std::declval<cocos2d::CCDrawNode>().clear());
        using f178 = r178(*)(cocos2d::CCDrawNode*);
        return reinterpret_cast<f178>(base+0x379e80)(this);
    }

    decltype(std::declval<cocos2d::CCDrawNode>().create()) cocos2d::CCDrawNode::create() {
        using r179 = decltype(std::declval<cocos2d::CCDrawNode>().create());
        using f179 = r179(*)();
        return reinterpret_cast<f179>(base+0x378d00)();

    }

    decltype(std::declval<cocos2d::CCDrawNode>().drawPolygon(std::declval<cocos2d::CCPoint*>(), std::declval<unsigned int>(), std::declval<cocos2d::_ccColor4F const&>(), std::declval<float>(), std::declval<cocos2d::_ccColor4F const&>())) cocos2d::CCDrawNode::drawPolygon(cocos2d::CCPoint* p0, unsigned int p1, cocos2d::_ccColor4F const& p2, float p3, cocos2d::_ccColor4F const& p4) {
        using r180 = decltype(std::declval<cocos2d::CCDrawNode>().drawPolygon(std::declval<cocos2d::CCPoint*>(), std::declval<unsigned int>(), std::declval<cocos2d::_ccColor4F const&>(), std::declval<float>(), std::declval<cocos2d::_ccColor4F const&>()));
        using f180 = r180(*)(cocos2d::CCDrawNode*, cocos2d::CCPoint*, unsigned int, cocos2d::_ccColor4F const&, float, cocos2d::_ccColor4F const&);
        return reinterpret_cast<f180>(base+0x3797f0)(this, p0, p1, p2, p3, p4);
    }

    decltype(std::declval<cocos2d::CCDrawNode>().drawSegment(std::declval<cocos2d::CCPoint const&>(), std::declval<cocos2d::CCPoint const&>(), std::declval<float>(), std::declval<cocos2d::_ccColor4F const&>())) cocos2d::CCDrawNode::drawSegment(cocos2d::CCPoint const& p0, cocos2d::CCPoint const& p1, float p2, cocos2d::_ccColor4F const& p3) {
        using r181 = decltype(std::declval<cocos2d::CCDrawNode>().drawSegment(std::declval<cocos2d::CCPoint const&>(), std::declval<cocos2d::CCPoint const&>(), std::declval<float>(), std::declval<cocos2d::_ccColor4F const&>()));
        using f181 = r181(*)(cocos2d::CCDrawNode*, cocos2d::CCPoint const&, cocos2d::CCPoint const&, float, cocos2d::_ccColor4F const&);
        return reinterpret_cast<f181>(base+0x3792d0)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<cocos2d::CCDrawNode>().getBlendFunc()) cocos2d::CCDrawNode::getBlendFunc() const {
        using r182 = decltype(std::declval<cocos2d::CCDrawNode>().getBlendFunc());
        using f182 = r182(*)(const cocos2d::CCDrawNode*);
        return reinterpret_cast<f182>(base+0x379ea0)(this);
    }

    decltype(std::declval<cocos2d::CCDrawNode>().init()) cocos2d::CCDrawNode::init() {
        using r183 = decltype(std::declval<cocos2d::CCDrawNode>().init());
        using f183 = r183(*)(cocos2d::CCDrawNode*);
        return reinterpret_cast<f183>(base+0x378e00)(this);
    }

    decltype(std::declval<cocos2d::CCDrawNode>().setBlendFunc(std::declval<cocos2d::_ccBlendFunc const&>())) cocos2d::CCDrawNode::setBlendFunc(cocos2d::_ccBlendFunc const& p0) {
        using r184 = decltype(std::declval<cocos2d::CCDrawNode>().setBlendFunc(std::declval<cocos2d::_ccBlendFunc const&>()));
        using f184 = r184(*)(cocos2d::CCDrawNode*, cocos2d::_ccBlendFunc const&);
        return reinterpret_cast<f184>(base+0x379eb0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCDrawNode>().draw()) cocos2d::CCDrawNode::draw() {
        using r185 = decltype(std::declval<cocos2d::CCDrawNode>().draw());
        using f185 = r185(*)(cocos2d::CCDrawNode*);
        return reinterpret_cast<f185>(base+0x379020)(this);
    }

    cocos2d::CCDrawNode::~CCDrawNode() {
        jumpDestructor(0x378cc0)
    }

    cocos2d::CCLayer::CCLayer() {
        using r187 = cocos2d::CCLayer*;
        using f187 = r187(*)(cocos2d::CCLayer*);
        reinterpret_cast<f187>(base+0x2725b0)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().ccTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) cocos2d::CCLayer::ccTouchBegan(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r188 = decltype(std::declval<cocos2d::CCLayer>().ccTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f188 = r188(*)(cocos2d::CCLayer*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f188>(base+0x2734d0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCLayer>().ccTouchCancelled(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) cocos2d::CCLayer::ccTouchCancelled(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r189 = decltype(std::declval<cocos2d::CCLayer>().ccTouchCancelled(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f189 = r189(*)(cocos2d::CCLayer*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f189>(base+0x273650)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCLayer>().ccTouchEnded(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) cocos2d::CCLayer::ccTouchEnded(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r190 = decltype(std::declval<cocos2d::CCLayer>().ccTouchEnded(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f190 = r190(*)(cocos2d::CCLayer*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f190>(base+0x2735d0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCLayer>().ccTouchMoved(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) cocos2d::CCLayer::ccTouchMoved(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r191 = decltype(std::declval<cocos2d::CCLayer>().ccTouchMoved(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f191 = r191(*)(cocos2d::CCLayer*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f191>(base+0x273550)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCLayer>().ccTouchesBegan(std::declval<cocos2d::CCSet*>(), std::declval<cocos2d::CCEvent*>())) cocos2d::CCLayer::ccTouchesBegan(cocos2d::CCSet* p0, cocos2d::CCEvent* p1) {
        using r192 = decltype(std::declval<cocos2d::CCLayer>().ccTouchesBegan(std::declval<cocos2d::CCSet*>(), std::declval<cocos2d::CCEvent*>()));
        using f192 = r192(*)(cocos2d::CCLayer*, cocos2d::CCSet*, cocos2d::CCEvent*);
        return reinterpret_cast<f192>(base+0x2736d0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCLayer>().ccTouchesCancelled(std::declval<cocos2d::CCSet*>(), std::declval<cocos2d::CCEvent*>())) cocos2d::CCLayer::ccTouchesCancelled(cocos2d::CCSet* p0, cocos2d::CCEvent* p1) {
        using r193 = decltype(std::declval<cocos2d::CCLayer>().ccTouchesCancelled(std::declval<cocos2d::CCSet*>(), std::declval<cocos2d::CCEvent*>()));
        using f193 = r193(*)(cocos2d::CCLayer*, cocos2d::CCSet*, cocos2d::CCEvent*);
        return reinterpret_cast<f193>(base+0x273850)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCLayer>().ccTouchesEnded(std::declval<cocos2d::CCSet*>(), std::declval<cocos2d::CCEvent*>())) cocos2d::CCLayer::ccTouchesEnded(cocos2d::CCSet* p0, cocos2d::CCEvent* p1) {
        using r194 = decltype(std::declval<cocos2d::CCLayer>().ccTouchesEnded(std::declval<cocos2d::CCSet*>(), std::declval<cocos2d::CCEvent*>()));
        using f194 = r194(*)(cocos2d::CCLayer*, cocos2d::CCSet*, cocos2d::CCEvent*);
        return reinterpret_cast<f194>(base+0x2737d0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCLayer>().ccTouchesMoved(std::declval<cocos2d::CCSet*>(), std::declval<cocos2d::CCEvent*>())) cocos2d::CCLayer::ccTouchesMoved(cocos2d::CCSet* p0, cocos2d::CCEvent* p1) {
        using r195 = decltype(std::declval<cocos2d::CCLayer>().ccTouchesMoved(std::declval<cocos2d::CCSet*>(), std::declval<cocos2d::CCEvent*>()));
        using f195 = r195(*)(cocos2d::CCLayer*, cocos2d::CCSet*, cocos2d::CCEvent*);
        return reinterpret_cast<f195>(base+0x273750)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCLayer>().create()) cocos2d::CCLayer::create() {
        using r196 = decltype(std::declval<cocos2d::CCLayer>().create());
        using f196 = r196(*)();
        return reinterpret_cast<f196>(base+0x272a00)();

    }

    decltype(std::declval<cocos2d::CCLayer>().didAccelerate(std::declval<cocos2d::CCAcceleration*>())) cocos2d::CCLayer::didAccelerate(cocos2d::CCAcceleration* p0) {
        using r197 = decltype(std::declval<cocos2d::CCLayer>().didAccelerate(std::declval<cocos2d::CCAcceleration*>()));
        using f197 = r197(*)(cocos2d::CCLayer*, cocos2d::CCAcceleration*);
        return reinterpret_cast<f197>(base+0x272ea0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayer>().getTouchMode()) cocos2d::CCLayer::getTouchMode() {
        using r198 = decltype(std::declval<cocos2d::CCLayer>().getTouchMode());
        using f198 = r198(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f198>(base+0x272e10)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().getTouchPriority()) cocos2d::CCLayer::getTouchPriority() {
        using r199 = decltype(std::declval<cocos2d::CCLayer>().getTouchPriority());
        using f199 = r199(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f199>(base+0x272e00)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().init()) cocos2d::CCLayer::init() {
        using r200 = decltype(std::declval<cocos2d::CCLayer>().init());
        using f200 = r200(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f200>(base+0x2729a0)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().isAccelerometerEnabled()) cocos2d::CCLayer::isAccelerometerEnabled() {
        using r201 = decltype(std::declval<cocos2d::CCLayer>().isAccelerometerEnabled());
        using f201 = r201(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f201>(base+0x272e20)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().isKeyboardEnabled()) cocos2d::CCLayer::isKeyboardEnabled() {
        using r202 = decltype(std::declval<cocos2d::CCLayer>().isKeyboardEnabled());
        using f202 = r202(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f202>(base+0x273010)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().isKeypadEnabled()) cocos2d::CCLayer::isKeypadEnabled() {
        using r203 = decltype(std::declval<cocos2d::CCLayer>().isKeypadEnabled());
        using f203 = r203(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f203>(base+0x272f70)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().isMouseEnabled()) cocos2d::CCLayer::isMouseEnabled() {
        using r204 = decltype(std::declval<cocos2d::CCLayer>().isMouseEnabled());
        using f204 = r204(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f204>(base+0x273090)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().isTouchEnabled()) cocos2d::CCLayer::isTouchEnabled() {
        using r205 = decltype(std::declval<cocos2d::CCLayer>().isTouchEnabled());
        using f205 = r205(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f205>(base+0x272ce0)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().keyBackClicked()) cocos2d::CCLayer::keyBackClicked() {
        using r206 = decltype(std::declval<cocos2d::CCLayer>().keyBackClicked());
        using f206 = r206(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f206>(base+0x273160)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().keyDown(std::declval<cocos2d::enumKeyCodes>())) cocos2d::CCLayer::keyDown(cocos2d::enumKeyCodes p0) {
        using r207 = decltype(std::declval<cocos2d::CCLayer>().keyDown(std::declval<cocos2d::enumKeyCodes>()));
        using f207 = r207(*)(cocos2d::CCLayer*, cocos2d::enumKeyCodes);
        return reinterpret_cast<f207>(base+0x273280)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayer>().keyMenuClicked()) cocos2d::CCLayer::keyMenuClicked() {
        using r208 = decltype(std::declval<cocos2d::CCLayer>().keyMenuClicked());
        using f208 = r208(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f208>(base+0x273200)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().onEnter()) cocos2d::CCLayer::onEnter() {
        using r209 = decltype(std::declval<cocos2d::CCLayer>().onEnter());
        using f209 = r209(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f209>(base+0x273300)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().onEnterTransitionDidFinish()) cocos2d::CCLayer::onEnterTransitionDidFinish() {
        using r210 = decltype(std::declval<cocos2d::CCLayer>().onEnterTransitionDidFinish());
        using f210 = r210(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f210>(base+0x273490)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().onExit()) cocos2d::CCLayer::onExit() {
        using r211 = decltype(std::declval<cocos2d::CCLayer>().onExit());
        using f211 = r211(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f211>(base+0x2733c0)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().registerScriptTouchHandler(std::declval<int>(), std::declval<bool>(), std::declval<int>(), std::declval<bool>())) cocos2d::CCLayer::registerScriptTouchHandler(int p0, bool p1, int p2, bool p3) {
        using r212 = decltype(std::declval<cocos2d::CCLayer>().registerScriptTouchHandler(std::declval<int>(), std::declval<bool>(), std::declval<int>(), std::declval<bool>()));
        using f212 = r212(*)(cocos2d::CCLayer*, int, bool, int, bool);
        return reinterpret_cast<f212>(base+0x272bd0)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<cocos2d::CCLayer>().registerWithTouchDispatcher()) cocos2d::CCLayer::registerWithTouchDispatcher() {
        using r213 = decltype(std::declval<cocos2d::CCLayer>().registerWithTouchDispatcher());
        using f213 = r213(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f213>(base+0x272b40)(this);
    }

    decltype(std::declval<cocos2d::CCLayer>().setAccelerometerEnabled(std::declval<bool>())) cocos2d::CCLayer::setAccelerometerEnabled(bool p0) {
        using r214 = decltype(std::declval<cocos2d::CCLayer>().setAccelerometerEnabled(std::declval<bool>()));
        using f214 = r214(*)(cocos2d::CCLayer*, bool);
        return reinterpret_cast<f214>(base+0x272e30)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayer>().setAccelerometerInterval(std::declval<double>())) cocos2d::CCLayer::setAccelerometerInterval(double p0) {
        using r215 = decltype(std::declval<cocos2d::CCLayer>().setAccelerometerInterval(std::declval<double>()));
        using f215 = r215(*)(cocos2d::CCLayer*, double);
        return reinterpret_cast<f215>(base+0x272e70)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayer>().setKeyboardEnabled(std::declval<bool>())) cocos2d::CCLayer::setKeyboardEnabled(bool p0) {
        using r216 = decltype(std::declval<cocos2d::CCLayer>().setKeyboardEnabled(std::declval<bool>()));
        using f216 = r216(*)(cocos2d::CCLayer*, bool);
        return reinterpret_cast<f216>(base+0x273020)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayer>().setKeypadEnabled(std::declval<bool>())) cocos2d::CCLayer::setKeypadEnabled(bool p0) {
        using r217 = decltype(std::declval<cocos2d::CCLayer>().setKeypadEnabled(std::declval<bool>()));
        using f217 = r217(*)(cocos2d::CCLayer*, bool);
        return reinterpret_cast<f217>(base+0x272f80)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayer>().setMouseEnabled(std::declval<bool>())) cocos2d::CCLayer::setMouseEnabled(bool p0) {
        using r218 = decltype(std::declval<cocos2d::CCLayer>().setMouseEnabled(std::declval<bool>()));
        using f218 = r218(*)(cocos2d::CCLayer*, bool);
        return reinterpret_cast<f218>(base+0x2730a0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayer>().setTouchEnabled(std::declval<bool>())) cocos2d::CCLayer::setTouchEnabled(bool p0) {
        using r219 = decltype(std::declval<cocos2d::CCLayer>().setTouchEnabled(std::declval<bool>()));
        using f219 = r219(*)(cocos2d::CCLayer*, bool);
        return reinterpret_cast<f219>(base+0x272cf0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayer>().setTouchMode(std::declval<cocos2d::ccTouchesMode>())) cocos2d::CCLayer::setTouchMode(cocos2d::ccTouchesMode p0) {
        using r220 = decltype(std::declval<cocos2d::CCLayer>().setTouchMode(std::declval<cocos2d::ccTouchesMode>()));
        using f220 = r220(*)(cocos2d::CCLayer*, cocos2d::ccTouchesMode);
        return reinterpret_cast<f220>(base+0x272d60)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayer>().setTouchPriority(std::declval<int>())) cocos2d::CCLayer::setTouchPriority(int p0) {
        using r221 = decltype(std::declval<cocos2d::CCLayer>().setTouchPriority(std::declval<int>()));
        using f221 = r221(*)(cocos2d::CCLayer*, int);
        return reinterpret_cast<f221>(base+0x272db0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayer>().unregisterScriptTouchHandler()) cocos2d::CCLayer::unregisterScriptTouchHandler() {
        using r222 = decltype(std::declval<cocos2d::CCLayer>().unregisterScriptTouchHandler());
        using f222 = r222(*)(cocos2d::CCLayer*);
        return reinterpret_cast<f222>(base+0x272c30)(this);
    }

    cocos2d::CCLayer::~CCLayer() {
        jumpDestructor(0x2727b0)
    }

    cocos2d::CCLayerColor::CCLayerColor() {
        using r224 = cocos2d::CCLayerColor*;
        using f224 = r224(*)(cocos2d::CCLayerColor*);
        reinterpret_cast<f224>(base+0x274320)(this);
    }

    decltype(std::declval<cocos2d::CCLayerColor>().create(std::declval<cocos2d::_ccColor4B const&>(), std::declval<float>(), std::declval<float>())) cocos2d::CCLayerColor::create(cocos2d::_ccColor4B const& p0, float p1, float p2) {
        using r225 = decltype(std::declval<cocos2d::CCLayerColor>().create(std::declval<cocos2d::_ccColor4B const&>(), std::declval<float>(), std::declval<float>()));
        using f225 = r225(*)(cocos2d::_ccColor4B const&, float, float);
        return reinterpret_cast<f225>(base+0x2745e0)(p0, p1, p2);

    }

    decltype(std::declval<cocos2d::CCLayerColor>().draw()) cocos2d::CCLayerColor::draw() {
        using r226 = decltype(std::declval<cocos2d::CCLayerColor>().draw());
        using f226 = r226(*)(cocos2d::CCLayerColor*);
        return reinterpret_cast<f226>(base+0x274b50)(this);
    }

    decltype(std::declval<cocos2d::CCLayerColor>().getBlendFunc()) cocos2d::CCLayerColor::getBlendFunc() {
        using r227 = decltype(std::declval<cocos2d::CCLayerColor>().getBlendFunc());
        using f227 = r227(*)(cocos2d::CCLayerColor*);
        return reinterpret_cast<f227>(base+0x274480)(this);
    }

    decltype(std::declval<cocos2d::CCLayerColor>().init()) cocos2d::CCLayerColor::init() {
        using r228 = decltype(std::declval<cocos2d::CCLayerColor>().init());
        using f228 = r228(*)(cocos2d::CCLayerColor*);
        return reinterpret_cast<f228>(base+0x274800)(this);
    }

    decltype(std::declval<cocos2d::CCLayerColor>().initWithColor(std::declval<cocos2d::_ccColor4B const&>())) cocos2d::CCLayerColor::initWithColor(cocos2d::_ccColor4B const& p0) {
        using r229 = decltype(std::declval<cocos2d::CCLayerColor>().initWithColor(std::declval<cocos2d::_ccColor4B const&>()));
        using f229 = r229(*)(cocos2d::CCLayerColor*, cocos2d::_ccColor4B const&);
        return reinterpret_cast<f229>(base+0x2749a0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayerColor>().initWithColor(std::declval<cocos2d::_ccColor4B const&>(), std::declval<float>(), std::declval<float>())) cocos2d::CCLayerColor::initWithColor(cocos2d::_ccColor4B const& p0, float p1, float p2) {
        using r230 = decltype(std::declval<cocos2d::CCLayerColor>().initWithColor(std::declval<cocos2d::_ccColor4B const&>(), std::declval<float>(), std::declval<float>()));
        using f230 = r230(*)(cocos2d::CCLayerColor*, cocos2d::_ccColor4B const&, float, float);
        return reinterpret_cast<f230>(base+0x274850)(this, p0, p1, p2);
    }

    decltype(std::declval<cocos2d::CCLayerColor>().setBlendFunc(std::declval<cocos2d::_ccBlendFunc>())) cocos2d::CCLayerColor::setBlendFunc(cocos2d::_ccBlendFunc p0) {
        using r231 = decltype(std::declval<cocos2d::CCLayerColor>().setBlendFunc(std::declval<cocos2d::_ccBlendFunc>()));
        using f231 = r231(*)(cocos2d::CCLayerColor*, cocos2d::_ccBlendFunc);
        return reinterpret_cast<f231>(base+0x2744a0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayerColor>().setColor(std::declval<cocos2d::_ccColor3B const&>())) cocos2d::CCLayerColor::setColor(cocos2d::_ccColor3B const& p0) {
        using r232 = decltype(std::declval<cocos2d::CCLayerColor>().setColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f232 = r232(*)(cocos2d::CCLayerColor*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f232>(base+0x274c20)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayerColor>().setContentSize(std::declval<cocos2d::CCSize const&>())) cocos2d::CCLayerColor::setContentSize(cocos2d::CCSize const& p0) {
        using r233 = decltype(std::declval<cocos2d::CCLayerColor>().setContentSize(std::declval<cocos2d::CCSize const&>()));
        using f233 = r233(*)(cocos2d::CCLayerColor*, cocos2d::CCSize const&);
        return reinterpret_cast<f233>(base+0x2749f0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayerColor>().setOpacity(std::declval<unsigned char>())) cocos2d::CCLayerColor::setOpacity(unsigned char p0) {
        using r234 = decltype(std::declval<cocos2d::CCLayerColor>().setOpacity(std::declval<unsigned char>()));
        using f234 = r234(*)(cocos2d::CCLayerColor*, unsigned char);
        return reinterpret_cast<f234>(base+0x274db0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayerColor>().updateColor()) cocos2d::CCLayerColor::updateColor() {
        using r235 = decltype(std::declval<cocos2d::CCLayerColor>().updateColor());
        using f235 = r235(*)(cocos2d::CCLayerColor*);
        return reinterpret_cast<f235>(base+0x274ae0)(this);
    }

    cocos2d::CCLayerColor::~CCLayerColor() {
        jumpDestructor(0x2743d0)
    }

    cocos2d::CCLayerRGBA::CCLayerRGBA() {
        using r237 = cocos2d::CCLayerRGBA*;
        using f237 = r237(*)(cocos2d::CCLayerRGBA*);
        reinterpret_cast<f237>(base+0x2738d0)(this);
    }

    decltype(std::declval<cocos2d::CCLayerRGBA>().init()) cocos2d::CCLayerRGBA::init() {
        using r238 = decltype(std::declval<cocos2d::CCLayerRGBA>().init());
        using f238 = r238(*)(cocos2d::CCLayerRGBA*);
        return reinterpret_cast<f238>(base+0x273b40)(this);
    }

    decltype(std::declval<cocos2d::CCLayerRGBA>().getOpacity()) cocos2d::CCLayerRGBA::getOpacity() {
        using r239 = decltype(std::declval<cocos2d::CCLayerRGBA>().getOpacity());
        using f239 = r239(*)(cocos2d::CCLayerRGBA*);
        return reinterpret_cast<f239>(base+0x273be0)(this);
    }

    decltype(std::declval<cocos2d::CCLayerRGBA>().getDisplayedOpacity()) cocos2d::CCLayerRGBA::getDisplayedOpacity() {
        using r240 = decltype(std::declval<cocos2d::CCLayerRGBA>().getDisplayedOpacity());
        using f240 = r240(*)(cocos2d::CCLayerRGBA*);
        return reinterpret_cast<f240>(base+0x273c00)(this);
    }

    decltype(std::declval<cocos2d::CCLayerRGBA>().setOpacity(std::declval<unsigned char>())) cocos2d::CCLayerRGBA::setOpacity(unsigned char p0) {
        using r241 = decltype(std::declval<cocos2d::CCLayerRGBA>().setOpacity(std::declval<unsigned char>()));
        using f241 = r241(*)(cocos2d::CCLayerRGBA*, unsigned char);
        return reinterpret_cast<f241>(base+0x273c20)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayerRGBA>().updateDisplayedOpacity(std::declval<unsigned char>())) cocos2d::CCLayerRGBA::updateDisplayedOpacity(unsigned char p0) {
        using r242 = decltype(std::declval<cocos2d::CCLayerRGBA>().updateDisplayedOpacity(std::declval<unsigned char>()));
        using f242 = r242(*)(cocos2d::CCLayerRGBA*, unsigned char);
        return reinterpret_cast<f242>(base+0x273f20)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayerRGBA>().isCascadeOpacityEnabled()) cocos2d::CCLayerRGBA::isCascadeOpacityEnabled() {
        using r243 = decltype(std::declval<cocos2d::CCLayerRGBA>().isCascadeOpacityEnabled());
        using f243 = r243(*)(cocos2d::CCLayerRGBA*);
        return reinterpret_cast<f243>(base+0x2741f0)(this);
    }

    decltype(std::declval<cocos2d::CCLayerRGBA>().setCascadeOpacityEnabled(std::declval<bool>())) cocos2d::CCLayerRGBA::setCascadeOpacityEnabled(bool p0) {
        using r244 = decltype(std::declval<cocos2d::CCLayerRGBA>().setCascadeOpacityEnabled(std::declval<bool>()));
        using f244 = r244(*)(cocos2d::CCLayerRGBA*, bool);
        return reinterpret_cast<f244>(base+0x274210)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayerRGBA>().getColor()) cocos2d::CCLayerRGBA::getColor() {
        using r245 = decltype(std::declval<cocos2d::CCLayerRGBA>().getColor());
        using f245 = r245(*)(cocos2d::CCLayerRGBA*);
        return reinterpret_cast<f245>(base+0x273d60)(this);
    }

    decltype(std::declval<cocos2d::CCLayerRGBA>().getDisplayedColor()) cocos2d::CCLayerRGBA::getDisplayedColor() {
        using r246 = decltype(std::declval<cocos2d::CCLayerRGBA>().getDisplayedColor());
        using f246 = r246(*)(cocos2d::CCLayerRGBA*);
        return reinterpret_cast<f246>(base+0x273d80)(this);
    }

    decltype(std::declval<cocos2d::CCLayerRGBA>().setColor(std::declval<cocos2d::_ccColor3B const&>())) cocos2d::CCLayerRGBA::setColor(cocos2d::_ccColor3B const& p0) {
        using r247 = decltype(std::declval<cocos2d::CCLayerRGBA>().setColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f247 = r247(*)(cocos2d::CCLayerRGBA*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f247>(base+0x273da0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayerRGBA>().updateDisplayedColor(std::declval<cocos2d::_ccColor3B const&>())) cocos2d::CCLayerRGBA::updateDisplayedColor(cocos2d::_ccColor3B const& p0) {
        using r248 = decltype(std::declval<cocos2d::CCLayerRGBA>().updateDisplayedColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f248 = r248(*)(cocos2d::CCLayerRGBA*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f248>(base+0x2740b0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLayerRGBA>().isCascadeColorEnabled()) cocos2d::CCLayerRGBA::isCascadeColorEnabled() {
        using r249 = decltype(std::declval<cocos2d::CCLayerRGBA>().isCascadeColorEnabled());
        using f249 = r249(*)(cocos2d::CCLayerRGBA*);
        return reinterpret_cast<f249>(base+0x274230)(this);
    }

    decltype(std::declval<cocos2d::CCLayerRGBA>().setCascadeColorEnabled(std::declval<bool>())) cocos2d::CCLayerRGBA::setCascadeColorEnabled(bool p0) {
        using r250 = decltype(std::declval<cocos2d::CCLayerRGBA>().setCascadeColorEnabled(std::declval<bool>()));
        using f250 = r250(*)(cocos2d::CCLayerRGBA*, bool);
        return reinterpret_cast<f250>(base+0x274250)(this, p0);
    }

    cocos2d::CCLayerRGBA::~CCLayerRGBA() {
        jumpDestructor(0x273aa0)
    }

    cocos2d::CCSprite::~CCSprite() {
        jumpDestructor(0x133430)
    }

    decltype(std::declval<cocos2d::CCSprite>().init()) cocos2d::CCSprite::init() {
        using r253 = decltype(std::declval<cocos2d::CCSprite>().init());
        using f253 = r253(*)(cocos2d::CCSprite*);
        return reinterpret_cast<f253>(base+0x132ef0)(this);
    }

    decltype(std::declval<cocos2d::CCSprite>().setVertexZ(std::declval<float>())) cocos2d::CCSprite::setVertexZ(float p0) {
        using r254 = decltype(std::declval<cocos2d::CCSprite>().setVertexZ(std::declval<float>()));
        using f254 = r254(*)(cocos2d::CCSprite*, float);
        return reinterpret_cast<f254>(base+0x134a80)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setScaleX(std::declval<float>())) cocos2d::CCSprite::setScaleX(float p0) {
        using r255 = decltype(std::declval<cocos2d::CCSprite>().setScaleX(std::declval<float>()));
        using f255 = r255(*)(cocos2d::CCSprite*, float);
        return reinterpret_cast<f255>(base+0x134900)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setScaleY(std::declval<float>())) cocos2d::CCSprite::setScaleY(float p0) {
        using r256 = decltype(std::declval<cocos2d::CCSprite>().setScaleY(std::declval<float>()));
        using f256 = r256(*)(cocos2d::CCSprite*, float);
        return reinterpret_cast<f256>(base+0x134980)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setScale(std::declval<float>())) cocos2d::CCSprite::setScale(float p0) {
        using r257 = decltype(std::declval<cocos2d::CCSprite>().setScale(std::declval<float>()));
        using f257 = r257(*)(cocos2d::CCSprite*, float);
        return reinterpret_cast<f257>(base+0x134a00)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setPosition(std::declval<cocos2d::CCPoint const&>())) cocos2d::CCSprite::setPosition(cocos2d::CCPoint const& p0) {
        using r258 = decltype(std::declval<cocos2d::CCSprite>().setPosition(std::declval<cocos2d::CCPoint const&>()));
        using f258 = r258(*)(cocos2d::CCSprite*, cocos2d::CCPoint const&);
        return reinterpret_cast<f258>(base+0x134650)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setSkewX(std::declval<float>())) cocos2d::CCSprite::setSkewX(float p0) {
        using r259 = decltype(std::declval<cocos2d::CCSprite>().setSkewX(std::declval<float>()));
        using f259 = r259(*)(cocos2d::CCSprite*, float);
        return reinterpret_cast<f259>(base+0x134820)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setSkewY(std::declval<float>())) cocos2d::CCSprite::setSkewY(float p0) {
        using r260 = decltype(std::declval<cocos2d::CCSprite>().setSkewY(std::declval<float>()));
        using f260 = r260(*)(cocos2d::CCSprite*, float);
        return reinterpret_cast<f260>(base+0x134890)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setAnchorPoint(std::declval<cocos2d::CCPoint const&>())) cocos2d::CCSprite::setAnchorPoint(cocos2d::CCPoint const& p0) {
        using r261 = decltype(std::declval<cocos2d::CCSprite>().setAnchorPoint(std::declval<cocos2d::CCPoint const&>()));
        using f261 = r261(*)(cocos2d::CCSprite*, cocos2d::CCPoint const&);
        return reinterpret_cast<f261>(base+0x134af0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setVisible(std::declval<bool>())) cocos2d::CCSprite::setVisible(bool p0) {
        using r262 = decltype(std::declval<cocos2d::CCSprite>().setVisible(std::declval<bool>()));
        using f262 = r262(*)(cocos2d::CCSprite*, bool);
        return reinterpret_cast<f262>(base+0x134b70)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setRotation(std::declval<float>())) cocos2d::CCSprite::setRotation(float p0) {
        using r263 = decltype(std::declval<cocos2d::CCSprite>().setRotation(std::declval<float>()));
        using f263 = r263(*)(cocos2d::CCSprite*, float);
        return reinterpret_cast<f263>(base+0x1346d0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setRotationX(std::declval<float>())) cocos2d::CCSprite::setRotationX(float p0) {
        using r264 = decltype(std::declval<cocos2d::CCSprite>().setRotationX(std::declval<float>()));
        using f264 = r264(*)(cocos2d::CCSprite*, float);
        return reinterpret_cast<f264>(base+0x134740)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setRotationY(std::declval<float>())) cocos2d::CCSprite::setRotationY(float p0) {
        using r265 = decltype(std::declval<cocos2d::CCSprite>().setRotationY(std::declval<float>()));
        using f265 = r265(*)(cocos2d::CCSprite*, float);
        return reinterpret_cast<f265>(base+0x1347b0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().ignoreAnchorPointForPosition(std::declval<bool>())) cocos2d::CCSprite::ignoreAnchorPointForPosition(bool p0) {
        using r266 = decltype(std::declval<cocos2d::CCSprite>().ignoreAnchorPointForPosition(std::declval<bool>()));
        using f266 = r266(*)(cocos2d::CCSprite*, bool);
        return reinterpret_cast<f266>(base+0x134b60)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().addChild(std::declval<cocos2d::CCNode*>())) cocos2d::CCSprite::addChild(cocos2d::CCNode* p0) {
        using r267 = decltype(std::declval<cocos2d::CCSprite>().addChild(std::declval<cocos2d::CCNode*>()));
        using f267 = r267(*)(cocos2d::CCSprite*, cocos2d::CCNode*);
        return reinterpret_cast<f267>(base+0x134190)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().addChild(std::declval<cocos2d::CCNode*>(), std::declval<int>())) cocos2d::CCSprite::addChild(cocos2d::CCNode* p0, int p1) {
        using r268 = decltype(std::declval<cocos2d::CCSprite>().addChild(std::declval<cocos2d::CCNode*>(), std::declval<int>()));
        using f268 = r268(*)(cocos2d::CCSprite*, cocos2d::CCNode*, int);
        return reinterpret_cast<f268>(base+0x1341a0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCSprite>().addChild(std::declval<cocos2d::CCNode*>(), std::declval<int>(), std::declval<int>())) cocos2d::CCSprite::addChild(cocos2d::CCNode* p0, int p1, int p2) {
        using r269 = decltype(std::declval<cocos2d::CCSprite>().addChild(std::declval<cocos2d::CCNode*>(), std::declval<int>(), std::declval<int>()));
        using f269 = r269(*)(cocos2d::CCSprite*, cocos2d::CCNode*, int, int);
        return reinterpret_cast<f269>(base+0x1341b0)(this, p0, p1, p2);
    }

    decltype(std::declval<cocos2d::CCSprite>().removeChild(std::declval<cocos2d::CCNode*>(), std::declval<bool>())) cocos2d::CCSprite::removeChild(cocos2d::CCNode* p0, bool p1) {
        using r270 = decltype(std::declval<cocos2d::CCSprite>().removeChild(std::declval<cocos2d::CCNode*>(), std::declval<bool>()));
        using f270 = r270(*)(cocos2d::CCSprite*, cocos2d::CCNode*, bool);
        return reinterpret_cast<f270>(base+0x134300)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCSprite>().removeAllChildrenWithCleanup(std::declval<bool>())) cocos2d::CCSprite::removeAllChildrenWithCleanup(bool p0) {
        using r271 = decltype(std::declval<cocos2d::CCSprite>().removeAllChildrenWithCleanup(std::declval<bool>()));
        using f271 = r271(*)(cocos2d::CCSprite*, bool);
        return reinterpret_cast<f271>(base+0x134340)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().reorderChild(std::declval<cocos2d::CCNode*>(), std::declval<int>())) cocos2d::CCSprite::reorderChild(cocos2d::CCNode* p0, int p1) {
        using r272 = decltype(std::declval<cocos2d::CCSprite>().reorderChild(std::declval<cocos2d::CCNode*>(), std::declval<int>()));
        using f272 = r272(*)(cocos2d::CCSprite*, cocos2d::CCNode*, int);
        return reinterpret_cast<f272>(base+0x134270)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCSprite>().sortAllChildren()) cocos2d::CCSprite::sortAllChildren() {
        using r273 = decltype(std::declval<cocos2d::CCSprite>().sortAllChildren());
        using f273 = r273(*)(cocos2d::CCSprite*);
        return reinterpret_cast<f273>(base+0x1343f0)(this);
    }

    decltype(std::declval<cocos2d::CCSprite>().draw()) cocos2d::CCSprite::draw() {
        using r274 = decltype(std::declval<cocos2d::CCSprite>().draw());
        using f274 = r274(*)(cocos2d::CCSprite*);
        return reinterpret_cast<f274>(base+0x134070)(this);
    }

    decltype(std::declval<cocos2d::CCSprite>().updateTransform()) cocos2d::CCSprite::updateTransform() {
        using r275 = decltype(std::declval<cocos2d::CCSprite>().updateTransform());
        using f275 = r275(*)(cocos2d::CCSprite*);
        return reinterpret_cast<f275>(base+0x133b70)(this);
    }

    decltype(std::declval<cocos2d::CCSprite>().setOpacity(std::declval<unsigned char>())) cocos2d::CCSprite::setOpacity(unsigned char p0) {
        using r276 = decltype(std::declval<cocos2d::CCSprite>().setOpacity(std::declval<unsigned char>()));
        using f276 = r276(*)(cocos2d::CCSprite*, unsigned char);
        return reinterpret_cast<f276>(base+0x134da0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().updateDisplayedOpacity(std::declval<unsigned char>())) cocos2d::CCSprite::updateDisplayedOpacity(unsigned char p0) {
        using r277 = decltype(std::declval<cocos2d::CCSprite>().updateDisplayedOpacity(std::declval<unsigned char>()));
        using f277 = r277(*)(cocos2d::CCSprite*, unsigned char);
        return reinterpret_cast<f277>(base+0x1354c0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setColor(std::declval<cocos2d::_ccColor3B const&>())) cocos2d::CCSprite::setColor(cocos2d::_ccColor3B const& p0) {
        using r278 = decltype(std::declval<cocos2d::CCSprite>().setColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f278 = r278(*)(cocos2d::CCSprite*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f278>(base+0x134ff0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().updateDisplayedColor(std::declval<cocos2d::_ccColor3B const&>())) cocos2d::CCSprite::updateDisplayedColor(cocos2d::_ccColor3B const& p0) {
        using r279 = decltype(std::declval<cocos2d::CCSprite>().updateDisplayedColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f279 = r279(*)(cocos2d::CCSprite*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f279>(base+0x135370)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setOpacityModifyRGB(std::declval<bool>())) cocos2d::CCSprite::setOpacityModifyRGB(bool p0) {
        using r280 = decltype(std::declval<cocos2d::CCSprite>().setOpacityModifyRGB(std::declval<bool>()));
        using f280 = r280(*)(cocos2d::CCSprite*, bool);
        return reinterpret_cast<f280>(base+0x135200)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().isOpacityModifyRGB()) cocos2d::CCSprite::isOpacityModifyRGB() {
        using r281 = decltype(std::declval<cocos2d::CCSprite>().isOpacityModifyRGB());
        using f281 = r281(*)(cocos2d::CCSprite*);
        return reinterpret_cast<f281>(base+0x135350)(this);
    }

    decltype(std::declval<cocos2d::CCSprite>().initWithTexture(std::declval<cocos2d::CCTexture2D*>())) cocos2d::CCSprite::initWithTexture(cocos2d::CCTexture2D* p0) {
        using r282 = decltype(std::declval<cocos2d::CCSprite>().initWithTexture(std::declval<cocos2d::CCTexture2D*>()));
        using f282 = r282(*)(cocos2d::CCSprite*, cocos2d::CCTexture2D*);
        return reinterpret_cast<f282>(base+0x133110)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().initWithTexture(std::declval<cocos2d::CCTexture2D*>(), std::declval<cocos2d::CCRect const&>())) cocos2d::CCSprite::initWithTexture(cocos2d::CCTexture2D* p0, cocos2d::CCRect const& p1) {
        using r283 = decltype(std::declval<cocos2d::CCSprite>().initWithTexture(std::declval<cocos2d::CCTexture2D*>(), std::declval<cocos2d::CCRect const&>()));
        using f283 = r283(*)(cocos2d::CCSprite*, cocos2d::CCTexture2D*, cocos2d::CCRect const&);
        return reinterpret_cast<f283>(base+0x1330f0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCSprite>().initWithTexture(std::declval<cocos2d::CCTexture2D*>(), std::declval<cocos2d::CCRect const&>(), std::declval<bool>())) cocos2d::CCSprite::initWithTexture(cocos2d::CCTexture2D* p0, cocos2d::CCRect const& p1, bool p2) {
        using r284 = decltype(std::declval<cocos2d::CCSprite>().initWithTexture(std::declval<cocos2d::CCTexture2D*>(), std::declval<cocos2d::CCRect const&>(), std::declval<bool>()));
        using f284 = r284(*)(cocos2d::CCSprite*, cocos2d::CCTexture2D*, cocos2d::CCRect const&, bool);
        return reinterpret_cast<f284>(base+0x132f10)(this, p0, p1, p2);
    }

    decltype(std::declval<cocos2d::CCSprite>().initWithSpriteFrame(std::declval<cocos2d::CCSpriteFrame*>())) cocos2d::CCSprite::initWithSpriteFrame(cocos2d::CCSpriteFrame* p0) {
        using r285 = decltype(std::declval<cocos2d::CCSprite>().initWithSpriteFrame(std::declval<cocos2d::CCSpriteFrame*>()));
        using f285 = r285(*)(cocos2d::CCSprite*, cocos2d::CCSpriteFrame*);
        return reinterpret_cast<f285>(base+0x133270)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().initWithSpriteFrameName(std::declval<char const*>())) cocos2d::CCSprite::initWithSpriteFrameName(char const* p0) {
        using r286 = decltype(std::declval<cocos2d::CCSprite>().initWithSpriteFrameName(std::declval<char const*>()));
        using f286 = r286(*)(cocos2d::CCSprite*, char const*);
        return reinterpret_cast<f286>(base+0x1332c0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().initWithFile(std::declval<char const*>())) cocos2d::CCSprite::initWithFile(char const* p0) {
        using r287 = decltype(std::declval<cocos2d::CCSprite>().initWithFile(std::declval<char const*>()));
        using f287 = r287(*)(cocos2d::CCSprite*, char const*);
        return reinterpret_cast<f287>(base+0x133180)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().initWithFile(std::declval<char const*>(), std::declval<cocos2d::CCRect const&>())) cocos2d::CCSprite::initWithFile(char const* p0, cocos2d::CCRect const& p1) {
        using r288 = decltype(std::declval<cocos2d::CCSprite>().initWithFile(std::declval<char const*>(), std::declval<cocos2d::CCRect const&>()));
        using f288 = r288(*)(cocos2d::CCSprite*, char const*, cocos2d::CCRect const&);
        return reinterpret_cast<f288>(base+0x133210)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCSprite>().setTexture(std::declval<cocos2d::CCTexture2D*>())) cocos2d::CCSprite::setTexture(cocos2d::CCTexture2D* p0) {
        using r289 = decltype(std::declval<cocos2d::CCSprite>().setTexture(std::declval<cocos2d::CCTexture2D*>()));
        using f289 = r289(*)(cocos2d::CCSprite*, cocos2d::CCTexture2D*);
        return reinterpret_cast<f289>(base+0x135a90)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().getTexture()) cocos2d::CCSprite::getTexture() {
        using r290 = decltype(std::declval<cocos2d::CCSprite>().getTexture());
        using f290 = r290(*)(cocos2d::CCSprite*);
        return reinterpret_cast<f290>(base+0x135c00)(this);
    }

    decltype(std::declval<cocos2d::CCSprite>().setChildColor(std::declval<cocos2d::_ccColor3B const&>())) cocos2d::CCSprite::setChildColor(cocos2d::_ccColor3B const& p0) {
        using r291 = decltype(std::declval<cocos2d::CCSprite>().setChildColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f291 = r291(*)(cocos2d::CCSprite*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f291>(base+0x135160)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setChildOpacity(std::declval<unsigned char>())) cocos2d::CCSprite::setChildOpacity(unsigned char p0) {
        using r292 = decltype(std::declval<cocos2d::CCSprite>().setChildOpacity(std::declval<unsigned char>()));
        using f292 = r292(*)(cocos2d::CCSprite*, unsigned char);
        return reinterpret_cast<f292>(base+0x134f50)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().getBatchNode()) cocos2d::CCSprite::getBatchNode() {
        using r293 = decltype(std::declval<cocos2d::CCSprite>().getBatchNode());
        using f293 = r293(*)(cocos2d::CCSprite*);
        return reinterpret_cast<f293>(base+0x135910)(this);
    }

    decltype(std::declval<cocos2d::CCSprite>().setBatchNode(std::declval<cocos2d::CCSpriteBatchNode*>())) cocos2d::CCSprite::setBatchNode(cocos2d::CCSpriteBatchNode* p0) {
        using r294 = decltype(std::declval<cocos2d::CCSprite>().setBatchNode(std::declval<cocos2d::CCSpriteBatchNode*>()));
        using f294 = r294(*)(cocos2d::CCSprite*, cocos2d::CCSpriteBatchNode*);
        return reinterpret_cast<f294>(base+0x135920)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().refreshTextureRect()) cocos2d::CCSprite::refreshTextureRect() {
        using r295 = decltype(std::declval<cocos2d::CCSprite>().refreshTextureRect());
        using f295 = r295(*)(cocos2d::CCSprite*);
        return reinterpret_cast<f295>(base+0x133520)(this);
    }

    decltype(std::declval<cocos2d::CCSprite>().setTextureRect(std::declval<cocos2d::CCRect const&>())) cocos2d::CCSprite::setTextureRect(cocos2d::CCRect const& p0) {
        using r296 = decltype(std::declval<cocos2d::CCSprite>().setTextureRect(std::declval<cocos2d::CCRect const&>()));
        using f296 = r296(*)(cocos2d::CCSprite*, cocos2d::CCRect const&);
        return reinterpret_cast<f296>(base+0x133560)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setTextureRect(std::declval<cocos2d::CCRect const&>(), std::declval<bool>(), std::declval<cocos2d::CCSize const&>())) cocos2d::CCSprite::setTextureRect(cocos2d::CCRect const& p0, bool p1, cocos2d::CCSize const& p2) {
        using r297 = decltype(std::declval<cocos2d::CCSprite>().setTextureRect(std::declval<cocos2d::CCRect const&>(), std::declval<bool>(), std::declval<cocos2d::CCSize const&>()));
        using f297 = r297(*)(cocos2d::CCSprite*, cocos2d::CCRect const&, bool, cocos2d::CCSize const&);
        return reinterpret_cast<f297>(base+0x133580)(this, p0, p1, p2);
    }

    decltype(std::declval<cocos2d::CCSprite>().setVertexRect(std::declval<cocos2d::CCRect const&>())) cocos2d::CCSprite::setVertexRect(cocos2d::CCRect const& p0) {
        using r298 = decltype(std::declval<cocos2d::CCSprite>().setVertexRect(std::declval<cocos2d::CCRect const&>()));
        using f298 = r298(*)(cocos2d::CCSprite*, cocos2d::CCRect const&);
        return reinterpret_cast<f298>(base+0x1338f0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().setDisplayFrame(std::declval<cocos2d::CCSpriteFrame*>())) cocos2d::CCSprite::setDisplayFrame(cocos2d::CCSpriteFrame* p0) {
        using r299 = decltype(std::declval<cocos2d::CCSprite>().setDisplayFrame(std::declval<cocos2d::CCSpriteFrame*>()));
        using f299 = r299(*)(cocos2d::CCSprite*, cocos2d::CCSpriteFrame*);
        return reinterpret_cast<f299>(base+0x135610)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().isFrameDisplayed(std::declval<cocos2d::CCSpriteFrame*>())) cocos2d::CCSprite::isFrameDisplayed(cocos2d::CCSpriteFrame* p0) {
        using r300 = decltype(std::declval<cocos2d::CCSprite>().isFrameDisplayed(std::declval<cocos2d::CCSpriteFrame*>()));
        using f300 = r300(*)(cocos2d::CCSprite*, cocos2d::CCSpriteFrame*);
        return reinterpret_cast<f300>(base+0x1356d0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().displayFrame()) cocos2d::CCSprite::displayFrame() {
        using r301 = decltype(std::declval<cocos2d::CCSprite>().displayFrame());
        using f301 = r301(*)(cocos2d::CCSprite*);
        return reinterpret_cast<f301>(base+0x135760)(this);
    }

    decltype(std::declval<cocos2d::CCSprite>().setDisplayFrameWithAnimationName(std::declval<char const*>(), std::declval<int>())) cocos2d::CCSprite::setDisplayFrameWithAnimationName(char const* p0, int p1) {
        using r302 = decltype(std::declval<cocos2d::CCSprite>().setDisplayFrameWithAnimationName(std::declval<char const*>(), std::declval<int>()));
        using f302 = r302(*)(cocos2d::CCSprite*, char const*, int);
        return reinterpret_cast<f302>(base+0x135680)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCSprite>().setTextureCoords(std::declval<cocos2d::CCRect const&>())) cocos2d::CCSprite::setTextureCoords(cocos2d::CCRect const& p0) {
        using r303 = decltype(std::declval<cocos2d::CCSprite>().setTextureCoords(std::declval<cocos2d::CCRect const&>()));
        using f303 = r303(*)(cocos2d::CCSprite*, cocos2d::CCRect const&);
        return reinterpret_cast<f303>(base+0x133910)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSprite>().updateBlendFunc()) cocos2d::CCSprite::updateBlendFunc() {
        using r304 = decltype(std::declval<cocos2d::CCSprite>().updateBlendFunc());
        using f304 = r304(*)(cocos2d::CCSprite*);
        return reinterpret_cast<f304>(base+0x135a20)(this);
    }

    decltype(std::declval<cocos2d::CCSprite>().setReorderChildDirtyRecursively()) cocos2d::CCSprite::setReorderChildDirtyRecursively() {
        using r305 = decltype(std::declval<cocos2d::CCSprite>().setReorderChildDirtyRecursively());
        using f305 = r305(*)(cocos2d::CCSprite*);
        return reinterpret_cast<f305>(base+0x134550)(this);
    }

    decltype(std::declval<cocos2d::CCSprite>().setDirtyRecursively(std::declval<bool>())) cocos2d::CCSprite::setDirtyRecursively(bool p0) {
        using r306 = decltype(std::declval<cocos2d::CCSprite>().setDirtyRecursively(std::declval<bool>()));
        using f306 = r306(*)(cocos2d::CCSprite*, bool);
        return reinterpret_cast<f306>(base+0x1345b0)(this, p0);
    }

    cocos2d::CCSprite::CCSprite() {
        using r307 = cocos2d::CCSprite*;
        using f307 = r307(*)(cocos2d::CCSprite*);
        reinterpret_cast<f307>(base+0x133300)(this);
    }

    decltype(std::declval<cocos2d::CCSprite>().create()) cocos2d::CCSprite::create() {
        using r308 = decltype(std::declval<cocos2d::CCSprite>().create());
        using f308 = r308(*)();
        return reinterpret_cast<f308>(base+0x132df0)();

    }

    decltype(std::declval<cocos2d::CCSprite>().create(std::declval<char const*>())) cocos2d::CCSprite::create(char const* p0) {
        using r309 = decltype(std::declval<cocos2d::CCSprite>().create(std::declval<char const*>()));
        using f309 = r309(*)(char const*);
        return reinterpret_cast<f309>(base+0x132a80)(p0);

    }

void cocos2d::CCMouseDelegate::rightKeyDown() {};

void cocos2d::CCMouseDelegate::rightKeyUp() {};

void cocos2d::CCMouseDelegate::scrollWheel(float, float) {};

void cocos2d::CCKeyboardDelegate::keyDown(cocos2d::enumKeyCodes) {};

void cocos2d::CCKeyboardDelegate::keyUp(cocos2d::enumKeyCodes) {};

cocos2d::CCKeyboardDelegate::CCKeyboardDelegate() {};

cocos2d::CCMouseDelegate::CCMouseDelegate() {};

    cocos2d::CCIMEDelegate::~CCIMEDelegate() {
        jumpDestructor(0x277670)
    }

    decltype(std::declval<cocos2d::CCIMEDelegate>().attachWithIME()) cocos2d::CCIMEDelegate::attachWithIME() {
        using r311 = decltype(std::declval<cocos2d::CCIMEDelegate>().attachWithIME());
        using f311 = r311(*)(cocos2d::CCIMEDelegate*);
        return reinterpret_cast<f311>(base+0x2776a0)(this);
    }

    decltype(std::declval<cocos2d::CCIMEDelegate>().detachWithIME()) cocos2d::CCIMEDelegate::detachWithIME() {
        using r312 = decltype(std::declval<cocos2d::CCIMEDelegate>().detachWithIME());
        using f312 = r312(*)(cocos2d::CCIMEDelegate*);
        return reinterpret_cast<f312>(base+0x277880)(this);
    }

    cocos2d::CCIMEDelegate::CCIMEDelegate() {
        using r313 = cocos2d::CCIMEDelegate*;
        using f313 = r313(*)(cocos2d::CCIMEDelegate*);
        reinterpret_cast<f313>(base+0x277310)(this);
    }

    decltype(std::declval<cocos2d::CCKeyboardDispatcher>().dispatchKeyboardMSG(std::declval<cocos2d::enumKeyCodes>(), std::declval<bool>())) cocos2d::CCKeyboardDispatcher::dispatchKeyboardMSG(cocos2d::enumKeyCodes p0, bool p1) {
        using r314 = decltype(std::declval<cocos2d::CCKeyboardDispatcher>().dispatchKeyboardMSG(std::declval<cocos2d::enumKeyCodes>(), std::declval<bool>()));
        using f314 = r314(*)(cocos2d::CCKeyboardDispatcher*, cocos2d::enumKeyCodes, bool);
        return reinterpret_cast<f314>(base+0xe8190)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCLabelBMFont>().create(std::declval<char const*>(), std::declval<char const*>())) cocos2d::CCLabelBMFont::create(char const* p0, char const* p1) {
        using r315 = decltype(std::declval<cocos2d::CCLabelBMFont>().create(std::declval<char const*>(), std::declval<char const*>()));
        using f315 = r315(*)(char const*, char const*);
        return reinterpret_cast<f315>(base+0x347660)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCLabelBMFont>().limitLabelWidth(std::declval<float>(), std::declval<float>(), std::declval<float>())) cocos2d::CCLabelBMFont::limitLabelWidth(float p0, float p1, float p2) {
        using r316 = decltype(std::declval<cocos2d::CCLabelBMFont>().limitLabelWidth(std::declval<float>(), std::declval<float>(), std::declval<float>()));
        using f316 = r316(*)(cocos2d::CCLabelBMFont*, float, float, float);
        return reinterpret_cast<f316>(base+0x34a6e0)(this, p0, p1, p2);
    }

    decltype(std::declval<cocos2d::CCLabelBMFont>().setScale(std::declval<float>())) cocos2d::CCLabelBMFont::setScale(float p0) {
        using r317 = decltype(std::declval<cocos2d::CCLabelBMFont>().setScale(std::declval<float>()));
        using f317 = r317(*)(cocos2d::CCLabelBMFont*, float);
        return reinterpret_cast<f317>(base+0x34a5d0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLabelBMFont>().setString(std::declval<char const*>(), std::declval<bool>())) cocos2d::CCLabelBMFont::setString(char const* p0, bool p1) {
        using r318 = decltype(std::declval<cocos2d::CCLabelBMFont>().setString(std::declval<char const*>(), std::declval<bool>()));
        using f318 = r318(*)(cocos2d::CCLabelBMFont*, char const*, bool);
        return reinterpret_cast<f318>(base+0x3489e0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCLabelBMFont>().setAnchorPoint(std::declval<cocos2d::CCPoint const&>())) cocos2d::CCLabelBMFont::setAnchorPoint(cocos2d::CCPoint const& p0) {
        using r319 = decltype(std::declval<cocos2d::CCLabelBMFont>().setAnchorPoint(std::declval<cocos2d::CCPoint const&>()));
        using f319 = r319(*)(cocos2d::CCLabelBMFont*, cocos2d::CCPoint const&);
        return reinterpret_cast<f319>(base+0x349440)(this, p0);
    }

    decltype(std::declval<cocos2d::CCLabelTTF>().updateTexture()) cocos2d::CCLabelTTF::updateTexture() {
        using r320 = decltype(std::declval<cocos2d::CCLabelTTF>().updateTexture());
        using f320 = r320(*)(cocos2d::CCLabelTTF*);
        return reinterpret_cast<f320>(base+0x1fadc0)(this);
    }

    decltype(std::declval<cocos2d::CCActionTween>().create(std::declval<float>(), std::declval<char const*>(), std::declval<float>(), std::declval<float>())) cocos2d::CCActionTween::create(float p0, char const* p1, float p2, float p3) {
        using r321 = decltype(std::declval<cocos2d::CCActionTween>().create(std::declval<float>(), std::declval<char const*>(), std::declval<float>(), std::declval<float>()));
        using f321 = r321(*)(float, char const*, float, float);
        return reinterpret_cast<f321>(base+0x447590)(p0, p1, p2, p3);

    }

    decltype(std::declval<cocos2d::CCAnimate>().create(std::declval<cocos2d::CCAnimation*>())) cocos2d::CCAnimate::create(cocos2d::CCAnimation* p0) {
        using r322 = decltype(std::declval<cocos2d::CCAnimate>().create(std::declval<cocos2d::CCAnimation*>()));
        using f322 = r322(*)(cocos2d::CCAnimation*);
        return reinterpret_cast<f322>(base+0x1f8fc0)(p0);

    }

    decltype(std::declval<cocos2d::CCAnimation>().createWithSpriteFrames(std::declval<cocos2d::CCArray*>(), std::declval<float>())) cocos2d::CCAnimation::createWithSpriteFrames(cocos2d::CCArray* p0, float p1) {
        using r323 = decltype(std::declval<cocos2d::CCAnimation>().createWithSpriteFrames(std::declval<cocos2d::CCArray*>(), std::declval<float>()));
        using f323 = r323(*)(cocos2d::CCArray*, float);
        return reinterpret_cast<f323>(base+0x140df0)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCApplication>().getCurrentLanguage()) cocos2d::CCApplication::getCurrentLanguage() {
        using r324 = decltype(std::declval<cocos2d::CCApplication>().getCurrentLanguage());
        using f324 = r324(*)(cocos2d::CCApplication*);
        return reinterpret_cast<f324>(base+0x1a3f40)(this);
    }

    decltype(std::declval<cocos2d::CCApplication>().getTargetPlatform()) cocos2d::CCApplication::getTargetPlatform() {
        using r325 = decltype(std::declval<cocos2d::CCApplication>().getTargetPlatform());
        using f325 = r325(*)(cocos2d::CCApplication*);
        return reinterpret_cast<f325>(base+0x1a3f20)(this);
    }

    decltype(std::declval<cocos2d::CCApplication>().openURL(std::declval<char const*>())) cocos2d::CCApplication::openURL(char const* p0) {
        using r326 = decltype(std::declval<cocos2d::CCApplication>().openURL(std::declval<char const*>()));
        using f326 = r326(*)(cocos2d::CCApplication*, char const*);
        return reinterpret_cast<f326>(base+0x1a4550)(this, p0);
    }

    decltype(std::declval<cocos2d::CCApplication>().setAnimationInterval(std::declval<double>())) cocos2d::CCApplication::setAnimationInterval(double p0) {
        using r327 = decltype(std::declval<cocos2d::CCApplication>().setAnimationInterval(std::declval<double>()));
        using f327 = r327(*)(cocos2d::CCApplication*, double);
        return reinterpret_cast<f327>(base+0x1a3ee0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCApplicationProtocol>().gameDidSave()) cocos2d::CCApplicationProtocol::gameDidSave() {
        using r328 = decltype(std::declval<cocos2d::CCApplicationProtocol>().gameDidSave());
        using f328 = r328(*)(cocos2d::CCApplicationProtocol*);
        return reinterpret_cast<f328>(base+0x1a45f0)(this);
    }

    decltype(std::declval<cocos2d::CCArray>().addObject(std::declval<cocos2d::CCObject*>())) cocos2d::CCArray::addObject(cocos2d::CCObject* p0) {
        using r329 = decltype(std::declval<cocos2d::CCArray>().addObject(std::declval<cocos2d::CCObject*>()));
        using f329 = r329(*)(cocos2d::CCArray*, cocos2d::CCObject*);
        return reinterpret_cast<f329>(base+0x419f90)(this, p0);
    }

    decltype(std::declval<cocos2d::CCArray>().addObjectNew(std::declval<cocos2d::CCObject*>())) cocos2d::CCArray::addObjectNew(cocos2d::CCObject* p0) {
        using r330 = decltype(std::declval<cocos2d::CCArray>().addObjectNew(std::declval<cocos2d::CCObject*>()));
        using f330 = r330(*)(cocos2d::CCArray*, cocos2d::CCObject*);
        return reinterpret_cast<f330>(base+0x41a450)(this, p0);
    }

    decltype(std::declval<cocos2d::CCArray>().addObjectsFromArray(std::declval<cocos2d::CCArray*>())) cocos2d::CCArray::addObjectsFromArray(cocos2d::CCArray* p0) {
        using r331 = decltype(std::declval<cocos2d::CCArray>().addObjectsFromArray(std::declval<cocos2d::CCArray*>()));
        using f331 = r331(*)(cocos2d::CCArray*, cocos2d::CCArray*);
        return reinterpret_cast<f331>(base+0x41a2d0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCArray>().containsObject(std::declval<cocos2d::CCObject*>())) cocos2d::CCArray::containsObject(cocos2d::CCObject* p0) const {
        using r332 = decltype(std::declval<cocos2d::CCArray>().containsObject(std::declval<cocos2d::CCObject*>()));
        using f332 = r332(*)(const cocos2d::CCArray*, cocos2d::CCObject*);
        return reinterpret_cast<f332>(base+0x41a3e0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCArray>().count()) cocos2d::CCArray::count() const {
        using r333 = decltype(std::declval<cocos2d::CCArray>().count());
        using f333 = r333(*)(const cocos2d::CCArray*);
        return reinterpret_cast<f333>(base+0x41a2f0)(this);
    }

    decltype(std::declval<cocos2d::CCArray>().create()) cocos2d::CCArray::create() {
        using r334 = decltype(std::declval<cocos2d::CCArray>().create());
        using f334 = r334(*)();
        return reinterpret_cast<f334>(base+0x419cb0)();

    }

    decltype(std::declval<cocos2d::CCArray>().createWithObject(std::declval<cocos2d::CCObject*>())) cocos2d::CCArray::createWithObject(cocos2d::CCObject* p0) {
        using r335 = decltype(std::declval<cocos2d::CCArray>().createWithObject(std::declval<cocos2d::CCObject*>()));
        using f335 = r335(*)(cocos2d::CCObject*);
        return reinterpret_cast<f335>(base+0x419d50)(p0);

    }

    decltype(std::declval<cocos2d::CCArray>().fastRemoveObject(std::declval<cocos2d::CCObject*>())) cocos2d::CCArray::fastRemoveObject(cocos2d::CCObject* p0) {
        using r336 = decltype(std::declval<cocos2d::CCArray>().fastRemoveObject(std::declval<cocos2d::CCObject*>()));
        using f336 = r336(*)(cocos2d::CCArray*, cocos2d::CCObject*);
        return reinterpret_cast<f336>(base+0x41a520)(this, p0);
    }

    decltype(std::declval<cocos2d::CCArray>().fastRemoveObjectAtIndex(std::declval<unsigned int>())) cocos2d::CCArray::fastRemoveObjectAtIndex(unsigned int p0) {
        using r337 = decltype(std::declval<cocos2d::CCArray>().fastRemoveObjectAtIndex(std::declval<unsigned int>()));
        using f337 = r337(*)(cocos2d::CCArray*, unsigned int);
        return reinterpret_cast<f337>(base+0x41a500)(this, p0);
    }

    decltype(std::declval<cocos2d::CCArray>().fastRemoveObjectAtIndexNew(std::declval<unsigned int>())) cocos2d::CCArray::fastRemoveObjectAtIndexNew(unsigned int p0) {
        using r338 = decltype(std::declval<cocos2d::CCArray>().fastRemoveObjectAtIndexNew(std::declval<unsigned int>()));
        using f338 = r338(*)(cocos2d::CCArray*, unsigned int);
        return reinterpret_cast<f338>(base+0x41a510)(this, p0);
    }

    decltype(std::declval<cocos2d::CCArray>().lastObject()) cocos2d::CCArray::lastObject() {
        using r339 = decltype(std::declval<cocos2d::CCArray>().lastObject());
        using f339 = r339(*)(cocos2d::CCArray*);
        return reinterpret_cast<f339>(base+0x41a360)(this);
    }

    decltype(std::declval<cocos2d::CCArray>().objectAtIndex(std::declval<unsigned int>())) cocos2d::CCArray::objectAtIndex(unsigned int p0) {
        using r340 = decltype(std::declval<cocos2d::CCArray>().objectAtIndex(std::declval<unsigned int>()));
        using f340 = r340(*)(cocos2d::CCArray*, unsigned int);
        return reinterpret_cast<f340>(base+0x41a340)(this, p0);
    }

    decltype(std::declval<cocos2d::CCArray>().removeAllObjects()) cocos2d::CCArray::removeAllObjects() {
        using r341 = decltype(std::declval<cocos2d::CCArray>().removeAllObjects());
        using f341 = r341(*)(cocos2d::CCArray*);
        return reinterpret_cast<f341>(base+0x41a4f0)(this);
    }

    decltype(std::declval<cocos2d::CCArray>().removeLastObject(std::declval<bool>())) cocos2d::CCArray::removeLastObject(bool p0) {
        using r342 = decltype(std::declval<cocos2d::CCArray>().removeLastObject(std::declval<bool>()));
        using f342 = r342(*)(cocos2d::CCArray*, bool);
        return reinterpret_cast<f342>(base+0x41a470)(this, p0);
    }

    decltype(std::declval<cocos2d::CCArray>().removeObject(std::declval<cocos2d::CCObject*>(), std::declval<bool>())) cocos2d::CCArray::removeObject(cocos2d::CCObject* p0, bool p1) {
        using r343 = decltype(std::declval<cocos2d::CCArray>().removeObject(std::declval<cocos2d::CCObject*>(), std::declval<bool>()));
        using f343 = r343(*)(cocos2d::CCArray*, cocos2d::CCObject*, bool);
        return reinterpret_cast<f343>(base+0x41a490)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCArray>().removeObjectAtIndex(std::declval<unsigned int>(), std::declval<bool>())) cocos2d::CCArray::removeObjectAtIndex(unsigned int p0, bool p1) {
        using r344 = decltype(std::declval<cocos2d::CCArray>().removeObjectAtIndex(std::declval<unsigned int>(), std::declval<bool>()));
        using f344 = r344(*)(cocos2d::CCArray*, unsigned int, bool);
        return reinterpret_cast<f344>(base+0x41a4b0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCArray>().stringAtIndex(std::declval<unsigned int>())) cocos2d::CCArray::stringAtIndex(unsigned int p0) {
        using r345 = decltype(std::declval<cocos2d::CCArray>().stringAtIndex(std::declval<unsigned int>()));
        using f345 = r345(*)(cocos2d::CCArray*, unsigned int);
        return reinterpret_cast<f345>(base+0x41a320)(this, p0);
    }

    decltype(std::declval<cocos2d::CCBezierTo>().create(std::declval<float>(), std::declval<cocos2d::_ccBezierConfig const&>())) cocos2d::CCBezierTo::create(float p0, cocos2d::_ccBezierConfig const& p1) {
        using r346 = decltype(std::declval<cocos2d::CCBezierTo>().create(std::declval<float>(), std::declval<cocos2d::_ccBezierConfig const&>()));
        using f346 = r346(*)(float, cocos2d::_ccBezierConfig const&);
        return reinterpret_cast<f346>(base+0x1f6c10)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCCallFunc>().create(std::declval<int>())) cocos2d::CCCallFunc::create(int p0) {
        using r347 = decltype(std::declval<cocos2d::CCCallFunc>().create(std::declval<int>()));
        using f347 = r347(*)(int);
        return reinterpret_cast<f347>(base+0x454d90)(p0);

    }

    decltype(std::declval<cocos2d::CCClippingNode>().create()) cocos2d::CCClippingNode::create() {
        using r348 = decltype(std::declval<cocos2d::CCClippingNode>().create());
        using f348 = r348(*)();
        return reinterpret_cast<f348>(base+0x4192a0)();

    }

    decltype(std::declval<cocos2d::CCClippingNode>().create(std::declval<cocos2d::CCNode*>())) cocos2d::CCClippingNode::create(cocos2d::CCNode* p0) {
        using r349 = decltype(std::declval<cocos2d::CCClippingNode>().create(std::declval<cocos2d::CCNode*>()));
        using f349 = r349(*)(cocos2d::CCNode*);
        return reinterpret_cast<f349>(base+0x419330)(p0);

    }

    decltype(std::declval<cocos2d::CCClippingNode>().getAlphaThreshold()) cocos2d::CCClippingNode::getAlphaThreshold() const {
        using r350 = decltype(std::declval<cocos2d::CCClippingNode>().getAlphaThreshold());
        using f350 = r350(*)(const cocos2d::CCClippingNode*);
        return reinterpret_cast<f350>(base+0x419a10)(this);
    }

    decltype(std::declval<cocos2d::CCClippingNode>().getStencil()) cocos2d::CCClippingNode::getStencil() const {
        using r351 = decltype(std::declval<cocos2d::CCClippingNode>().getStencil());
        using f351 = r351(*)(const cocos2d::CCClippingNode*);
        return reinterpret_cast<f351>(base+0x4199c0)(this);
    }

    decltype(std::declval<cocos2d::CCClippingNode>().isInverted()) cocos2d::CCClippingNode::isInverted() const {
        using r352 = decltype(std::declval<cocos2d::CCClippingNode>().isInverted());
        using f352 = r352(*)(const cocos2d::CCClippingNode*);
        return reinterpret_cast<f352>(base+0x419a30)(this);
    }

    decltype(std::declval<cocos2d::CCClippingNode>().onEnter()) cocos2d::CCClippingNode::onEnter() {
        using r353 = decltype(std::declval<cocos2d::CCClippingNode>().onEnter());
        using f353 = r353(*)(cocos2d::CCClippingNode*);
        return reinterpret_cast<f353>(base+0x419470)(this);
    }

    decltype(std::declval<cocos2d::CCClippingNode>().onEnterTransitionDidFinish()) cocos2d::CCClippingNode::onEnterTransitionDidFinish() {
        using r354 = decltype(std::declval<cocos2d::CCClippingNode>().onEnterTransitionDidFinish());
        using f354 = r354(*)(cocos2d::CCClippingNode*);
        return reinterpret_cast<f354>(base+0x4194a0)(this);
    }

    decltype(std::declval<cocos2d::CCClippingNode>().onExit()) cocos2d::CCClippingNode::onExit() {
        using r355 = decltype(std::declval<cocos2d::CCClippingNode>().onExit());
        using f355 = r355(*)(cocos2d::CCClippingNode*);
        return reinterpret_cast<f355>(base+0x419500)(this);
    }

    decltype(std::declval<cocos2d::CCClippingNode>().onExitTransitionDidStart()) cocos2d::CCClippingNode::onExitTransitionDidStart() {
        using r356 = decltype(std::declval<cocos2d::CCClippingNode>().onExitTransitionDidStart());
        using f356 = r356(*)(cocos2d::CCClippingNode*);
        return reinterpret_cast<f356>(base+0x4194d0)(this);
    }

    decltype(std::declval<cocos2d::CCClippingNode>().setAlphaThreshold(std::declval<float>())) cocos2d::CCClippingNode::setAlphaThreshold(float p0) {
        using r357 = decltype(std::declval<cocos2d::CCClippingNode>().setAlphaThreshold(std::declval<float>()));
        using f357 = r357(*)(cocos2d::CCClippingNode*, float);
        return reinterpret_cast<f357>(base+0x419a20)(this, p0);
    }

    decltype(std::declval<cocos2d::CCClippingNode>().setInverted(std::declval<bool>())) cocos2d::CCClippingNode::setInverted(bool p0) {
        using r358 = decltype(std::declval<cocos2d::CCClippingNode>().setInverted(std::declval<bool>()));
        using f358 = r358(*)(cocos2d::CCClippingNode*, bool);
        return reinterpret_cast<f358>(base+0x419a40)(this, p0);
    }

    decltype(std::declval<cocos2d::CCClippingNode>().setStencil(std::declval<cocos2d::CCNode*>())) cocos2d::CCClippingNode::setStencil(cocos2d::CCNode* p0) {
        using r359 = decltype(std::declval<cocos2d::CCClippingNode>().setStencil(std::declval<cocos2d::CCNode*>()));
        using f359 = r359(*)(cocos2d::CCClippingNode*, cocos2d::CCNode*);
        return reinterpret_cast<f359>(base+0x4199d0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCClippingNode>().visit()) cocos2d::CCClippingNode::visit() {
        using r360 = decltype(std::declval<cocos2d::CCClippingNode>().visit());
        using f360 = r360(*)(cocos2d::CCClippingNode*);
        return reinterpret_cast<f360>(base+0x419530)(this);
    }

    decltype(std::declval<cocos2d::CCDelayTime>().create(std::declval<float>())) cocos2d::CCDelayTime::create(float p0) {
        using r361 = decltype(std::declval<cocos2d::CCDelayTime>().create(std::declval<float>()));
        using f361 = r361(*)(float);
        return reinterpret_cast<f361>(base+0x1f4380)(p0);

    }

    decltype(std::declval<cocos2d::CCDictionary>().allKeys()) cocos2d::CCDictionary::allKeys() {
        using r362 = decltype(std::declval<cocos2d::CCDictionary>().allKeys());
        using f362 = r362(*)(cocos2d::CCDictionary*);
        return reinterpret_cast<f362>(base+0x190450)(this);
    }

    decltype(std::declval<cocos2d::CCDictionary>().count()) cocos2d::CCDictionary::count() {
        using r363 = decltype(std::declval<cocos2d::CCDictionary>().count());
        using f363 = r363(*)(cocos2d::CCDictionary*);
        return reinterpret_cast<f363>(base+0x190430)(this);
    }

    decltype(std::declval<cocos2d::CCDictionary>().create()) cocos2d::CCDictionary::create() {
        using r364 = decltype(std::declval<cocos2d::CCDictionary>().create());
        using f364 = r364(*)();
        return reinterpret_cast<f364>(base+0x192650)();

    }

    decltype(std::declval<cocos2d::CCDictionary>().objectForKey(std::declval<long>())) cocos2d::CCDictionary::objectForKey(long p0) {
        using r365 = decltype(std::declval<cocos2d::CCDictionary>().objectForKey(std::declval<long>()));
        using f365 = r365(*)(cocos2d::CCDictionary*, long);
        return reinterpret_cast<f365>(base+0x190bb0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCDictionary>().objectForKey(std::declval<std::string const&>())) cocos2d::CCDictionary::objectForKey(std::string const& p0) {
        using r366 = decltype(std::declval<cocos2d::CCDictionary>().objectForKey(std::declval<std::string const&>()));
        using f366 = r366(*)(cocos2d::CCDictionary*, std::string const&);
        return reinterpret_cast<f366>(base+0x190870)(this, p0);
    }

    decltype(std::declval<cocos2d::CCDictionary>().removeAllObjects()) cocos2d::CCDictionary::removeAllObjects() {
        using r367 = decltype(std::declval<cocos2d::CCDictionary>().removeAllObjects());
        using f367 = r367(*)(cocos2d::CCDictionary*);
        return reinterpret_cast<f367>(base+0x190220)(this);
    }

    decltype(std::declval<cocos2d::CCDictionary>().removeObjectForKey(std::declval<long>())) cocos2d::CCDictionary::removeObjectForKey(long p0) {
        using r368 = decltype(std::declval<cocos2d::CCDictionary>().removeObjectForKey(std::declval<long>()));
        using f368 = r368(*)(cocos2d::CCDictionary*, long);
        return reinterpret_cast<f368>(base+0x1921d0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCDictionary>().setObject(std::declval<cocos2d::CCObject*>(), std::declval<long>())) cocos2d::CCDictionary::setObject(cocos2d::CCObject* p0, long p1) {
        using r369 = decltype(std::declval<cocos2d::CCDictionary>().setObject(std::declval<cocos2d::CCObject*>(), std::declval<long>()));
        using f369 = r369(*)(cocos2d::CCDictionary*, cocos2d::CCObject*, long);
        return reinterpret_cast<f369>(base+0x191790)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCDictionary>().setObject(std::declval<cocos2d::CCObject*>(), std::declval<std::string const&>())) cocos2d::CCDictionary::setObject(cocos2d::CCObject* p0, std::string const& p1) {
        using r370 = decltype(std::declval<cocos2d::CCDictionary>().setObject(std::declval<cocos2d::CCObject*>(), std::declval<std::string const&>()));
        using f370 = r370(*)(cocos2d::CCDictionary*, cocos2d::CCObject*, std::string const&);
        return reinterpret_cast<f370>(base+0x190dc0)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCDictionary>().valueForKey(std::declval<long>())) cocos2d::CCDictionary::valueForKey(long p0) {
        using r371 = decltype(std::declval<cocos2d::CCDictionary>().valueForKey(std::declval<long>()));
        using f371 = r371(*)(cocos2d::CCDictionary*, long);
        return reinterpret_cast<f371>(base+0x190cf0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCDictionary>().valueForKey(std::declval<std::string const&>())) cocos2d::CCDictionary::valueForKey(std::string const& p0) {
        using r372 = decltype(std::declval<cocos2d::CCDictionary>().valueForKey(std::declval<std::string const&>()));
        using f372 = r372(*)(cocos2d::CCDictionary*, std::string const&);
        return reinterpret_cast<f372>(base+0x1907a0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCDirector>().getTouchDispatcher()) cocos2d::CCDirector::getTouchDispatcher() {
        using r373 = decltype(std::declval<cocos2d::CCDirector>().getTouchDispatcher());
        using f373 = r373(*)(cocos2d::CCDirector*);
        return reinterpret_cast<f373>(base+0x24afa0)(this);
    }

    decltype(std::declval<cocos2d::CCDirector>().getWinSize()) cocos2d::CCDirector::getWinSize() {
        using r374 = decltype(std::declval<cocos2d::CCDirector>().getWinSize());
        using f374 = r374(*)(cocos2d::CCDirector*);
        return reinterpret_cast<f374>(base+0x24a0f0)(this);
    }

    decltype(std::declval<cocos2d::CCDirector>().pushScene(std::declval<cocos2d::CCScene*>())) cocos2d::CCDirector::pushScene(cocos2d::CCScene* p0) {
        using r375 = decltype(std::declval<cocos2d::CCDirector>().pushScene(std::declval<cocos2d::CCScene*>()));
        using f375 = r375(*)(cocos2d::CCDirector*, cocos2d::CCScene*);
        return reinterpret_cast<f375>(base+0x24a620)(this, p0);
    }

    decltype(std::declval<cocos2d::CCDirector>().replaceScene(std::declval<cocos2d::CCScene*>())) cocos2d::CCDirector::replaceScene(cocos2d::CCScene* p0) {
        using r376 = decltype(std::declval<cocos2d::CCDirector>().replaceScene(std::declval<cocos2d::CCScene*>()));
        using f376 = r376(*)(cocos2d::CCDirector*, cocos2d::CCScene*);
        return reinterpret_cast<f376>(base+0x24a6d0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCDirector>().resetSmoothFixCounter()) cocos2d::CCDirector::resetSmoothFixCounter() {
        using r377 = decltype(std::declval<cocos2d::CCDirector>().resetSmoothFixCounter());
        using f377 = r377(*)(cocos2d::CCDirector*);
        return reinterpret_cast<f377>(base+0x249bc0)(this);
    }

    decltype(std::declval<cocos2d::CCDirector>().sharedDirector()) cocos2d::CCDirector::sharedDirector() {
        using r378 = decltype(std::declval<cocos2d::CCDirector>().sharedDirector());
        using f378 = r378(*)();
        return reinterpret_cast<f378>(base+0x248cb0)();

    }

    decltype(std::declval<cocos2d::CCDirector>().calculateDeltaTime()) cocos2d::CCDirector::calculateDeltaTime() {
        using r379 = decltype(std::declval<cocos2d::CCDirector>().calculateDeltaTime());
        using f379 = r379(*)(cocos2d::CCDirector*);
        return reinterpret_cast<f379>(base+0x2497a0)(this);
    }

    decltype(std::declval<cocos2d::CCDirector>().calculateMPF()) cocos2d::CCDirector::calculateMPF() {
        using r380 = decltype(std::declval<cocos2d::CCDirector>().calculateMPF());
        using f380 = r380(*)(cocos2d::CCDirector*);
        return reinterpret_cast<f380>(base+0x19eac0)(this);
    }

    decltype(std::declval<cocos2d::CCDirector>().convertToGL(std::declval<cocos2d::CCPoint const&>())) cocos2d::CCDirector::convertToGL(cocos2d::CCPoint const& p0) {
        using r381 = decltype(std::declval<cocos2d::CCDirector>().convertToGL(std::declval<cocos2d::CCPoint const&>()));
        using f381 = r381(*)(cocos2d::CCDirector*, cocos2d::CCPoint const&);
        return reinterpret_cast<f381>(base+0x24a210)(this, p0);
    }

    decltype(std::declval<cocos2d::CCDirector>().drawScene()) cocos2d::CCDirector::drawScene() {
        using r382 = decltype(std::declval<cocos2d::CCDirector>().drawScene());
        using f382 = r382(*)(cocos2d::CCDirector*);
        return reinterpret_cast<f382>(base+0x249690)(this);
    }

    decltype(std::declval<cocos2d::CCDirector>().setNextScene()) cocos2d::CCDirector::setNextScene() {
        using r383 = decltype(std::declval<cocos2d::CCDirector>().setNextScene());
        using f383 = r383(*)(cocos2d::CCDirector*);
        return reinterpret_cast<f383>(base+0x2498d0)(this);
    }

    decltype(std::declval<cocos2d::CCDirector>().showStats()) cocos2d::CCDirector::showStats() {
        using r384 = decltype(std::declval<cocos2d::CCDirector>().showStats());
        using f384 = r384(*)(cocos2d::CCDirector*);
        return reinterpret_cast<f384>(base+0x2499e0)(this);
    }

    decltype(std::declval<cocos2d::CCDirector>().updateContentScale(std::declval<cocos2d::TextureQuality>())) cocos2d::CCDirector::updateContentScale(cocos2d::TextureQuality p0) {
        using r385 = decltype(std::declval<cocos2d::CCDirector>().updateContentScale(std::declval<cocos2d::TextureQuality>()));
        using f385 = r385(*)(cocos2d::CCDirector*, cocos2d::TextureQuality);
        return reinterpret_cast<f385>(base+0x249ff0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCEaseElasticOut>().create(std::declval<cocos2d::CCActionInterval*>(), std::declval<float>())) cocos2d::CCEaseElasticOut::create(cocos2d::CCActionInterval* p0, float p1) {
        using r386 = decltype(std::declval<cocos2d::CCEaseElasticOut>().create(std::declval<cocos2d::CCActionInterval*>(), std::declval<float>()));
        using f386 = r386(*)(cocos2d::CCActionInterval*, float);
        return reinterpret_cast<f386>(base+0x2a3080)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCEaseIn>().create(std::declval<cocos2d::CCActionInterval*>(), std::declval<float>())) cocos2d::CCEaseIn::create(cocos2d::CCActionInterval* p0, float p1) {
        using r387 = decltype(std::declval<cocos2d::CCEaseIn>().create(std::declval<cocos2d::CCActionInterval*>(), std::declval<float>()));
        using f387 = r387(*)(cocos2d::CCActionInterval*, float);
        return reinterpret_cast<f387>(base+0x2a1960)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCEaseInOut>().create(std::declval<cocos2d::CCActionInterval*>(), std::declval<float>())) cocos2d::CCEaseInOut::create(cocos2d::CCActionInterval* p0, float p1) {
        using r388 = decltype(std::declval<cocos2d::CCEaseInOut>().create(std::declval<cocos2d::CCActionInterval*>(), std::declval<float>()));
        using f388 = r388(*)(cocos2d::CCActionInterval*, float);
        return reinterpret_cast<f388>(base+0x2a1d80)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCEaseOut>().create(std::declval<cocos2d::CCActionInterval*>(), std::declval<float>())) cocos2d::CCEaseOut::create(cocos2d::CCActionInterval* p0, float p1) {
        using r389 = decltype(std::declval<cocos2d::CCEaseOut>().create(std::declval<cocos2d::CCActionInterval*>(), std::declval<float>()));
        using f389 = r389(*)(cocos2d::CCActionInterval*, float);
        return reinterpret_cast<f389>(base+0x2a1b70)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCFadeOut>().create(std::declval<float>())) cocos2d::CCFadeOut::create(float p0) {
        using r390 = decltype(std::declval<cocos2d::CCFadeOut>().create(std::declval<float>()));
        using f390 = r390(*)(float);
        return reinterpret_cast<f390>(base+0x1f7d80)(p0);

    }

    decltype(std::declval<cocos2d::CCFadeTo>().create(std::declval<float>(), std::declval<unsigned char>())) cocos2d::CCFadeTo::create(float p0, unsigned char p1) {
        using r391 = decltype(std::declval<cocos2d::CCFadeTo>().create(std::declval<float>(), std::declval<unsigned char>()));
        using f391 = r391(*)(float, unsigned char);
        return reinterpret_cast<f391>(base+0x1f7ff0)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCHide>().create()) cocos2d::CCHide::create() {
        using r392 = decltype(std::declval<cocos2d::CCHide>().create());
        using f392 = r392(*)();
        return reinterpret_cast<f392>(base+0x4543e0)();

    }

    cocos2d::CCImage::CCImage() {
        using r393 = cocos2d::CCImage*;
        using f393 = r393(*)(cocos2d::CCImage*);
        reinterpret_cast<f393>(base+0x24fa00)(this);
    }

    cocos2d::CCImage::~CCImage() {
        jumpDestructor(0x24fa80)
    }

    decltype(std::declval<cocos2d::CCImage>().initWithImageData(std::declval<void*>(), std::declval<int>(), std::declval<cocos2d::CCImage::EImageFormat>(), std::declval<int>(), std::declval<int>(), std::declval<int>())) cocos2d::CCImage::initWithImageData(void* p0, int p1, cocos2d::CCImage::EImageFormat p2, int p3, int p4, int p5) {
        using r395 = decltype(std::declval<cocos2d::CCImage>().initWithImageData(std::declval<void*>(), std::declval<int>(), std::declval<cocos2d::CCImage::EImageFormat>(), std::declval<int>(), std::declval<int>(), std::declval<int>()));
        using f395 = r395(*)(cocos2d::CCImage*, void*, int, cocos2d::CCImage::EImageFormat, int, int, int);
        return reinterpret_cast<f395>(base+0x24fcb0)(this, p0, p1, p2, p3, p4, p5);
    }

    decltype(std::declval<cocos2d::CCMotionStreak>().reset()) cocos2d::CCMotionStreak::reset() {
        using r396 = decltype(std::declval<cocos2d::CCMotionStreak>().reset());
        using f396 = r396(*)(cocos2d::CCMotionStreak*);
        return reinterpret_cast<f396>(base+0x2ee190)(this);
    }

    decltype(std::declval<cocos2d::CCMotionStreak>().resumeStroke()) cocos2d::CCMotionStreak::resumeStroke() {
        using r397 = decltype(std::declval<cocos2d::CCMotionStreak>().resumeStroke());
        using f397 = r397(*)(cocos2d::CCMotionStreak*);
        return reinterpret_cast<f397>(base+0x2edb30)(this);
    }

    decltype(std::declval<cocos2d::CCMotionStreak>().stopStroke()) cocos2d::CCMotionStreak::stopStroke() {
        using r398 = decltype(std::declval<cocos2d::CCMotionStreak>().stopStroke());
        using f398 = r398(*)(cocos2d::CCMotionStreak*);
        return reinterpret_cast<f398>(base+0x2edb20)(this);
    }

    decltype(std::declval<cocos2d::CCMoveBy>().create(std::declval<float>(), std::declval<cocos2d::CCPoint const&>())) cocos2d::CCMoveBy::create(float p0, cocos2d::CCPoint const& p1) {
        using r399 = decltype(std::declval<cocos2d::CCMoveBy>().create(std::declval<float>(), std::declval<cocos2d::CCPoint const&>()));
        using f399 = r399(*)(float, cocos2d::CCPoint const&);
        return reinterpret_cast<f399>(base+0x1f50e0)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCMoveTo>().create(std::declval<float>(), std::declval<cocos2d::CCPoint const&>())) cocos2d::CCMoveTo::create(float p0, cocos2d::CCPoint const& p1) {
        using r400 = decltype(std::declval<cocos2d::CCMoveTo>().create(std::declval<float>(), std::declval<cocos2d::CCPoint const&>()));
        using f400 = r400(*)(float, cocos2d::CCPoint const&);
        return reinterpret_cast<f400>(base+0x1f54d0)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCParticleSystem>().resetSystem()) cocos2d::CCParticleSystem::resetSystem() {
        using r401 = decltype(std::declval<cocos2d::CCParticleSystem>().resetSystem());
        using f401 = r401(*)(cocos2d::CCParticleSystem*);
        return reinterpret_cast<f401>(base+0x46bd50)(this);
    }

    decltype(std::declval<cocos2d::CCParticleSystem>().resumeSystem()) cocos2d::CCParticleSystem::resumeSystem() {
        using r402 = decltype(std::declval<cocos2d::CCParticleSystem>().resumeSystem());
        using f402 = r402(*)(cocos2d::CCParticleSystem*);
        return reinterpret_cast<f402>(base+0x46bd40)(this);
    }

    decltype(std::declval<cocos2d::CCParticleSystem>().stopSystem()) cocos2d::CCParticleSystem::stopSystem() {
        using r403 = decltype(std::declval<cocos2d::CCParticleSystem>().stopSystem());
        using f403 = r403(*)(cocos2d::CCParticleSystem*);
        return reinterpret_cast<f403>(base+0x46bd10)(this);
    }

    decltype(std::declval<cocos2d::CCParticleSystemQuad>().create(std::declval<char const*>())) cocos2d::CCParticleSystemQuad::create(char const* p0) {
        using r404 = decltype(std::declval<cocos2d::CCParticleSystemQuad>().create(std::declval<char const*>()));
        using f404 = r404(*)(char const*);
        return reinterpret_cast<f404>(base+0x36b000)(p0);

    }

    decltype(std::declval<cocos2d::CCPoolManager>().pop()) cocos2d::CCPoolManager::pop() {
        using r405 = decltype(std::declval<cocos2d::CCPoolManager>().pop());
        using f405 = r405(*)(cocos2d::CCPoolManager*);
        return reinterpret_cast<f405>(base+0x214620)(this);
    }

    decltype(std::declval<cocos2d::CCPoolManager>().sharedPoolManager()) cocos2d::CCPoolManager::sharedPoolManager() {
        using r406 = decltype(std::declval<cocos2d::CCPoolManager>().sharedPoolManager());
        using f406 = r406(*)();
        return reinterpret_cast<f406>(base+0x2142c0)();

    }

    decltype(std::declval<cocos2d::CCRenderTexture>().begin()) cocos2d::CCRenderTexture::begin() {
        using r407 = decltype(std::declval<cocos2d::CCRenderTexture>().begin());
        using f407 = r407(*)(cocos2d::CCRenderTexture*);
        return reinterpret_cast<f407>(base+0x35ce10)(this);
    }

    decltype(std::declval<cocos2d::CCRenderTexture>().end()) cocos2d::CCRenderTexture::end() {
        using r408 = decltype(std::declval<cocos2d::CCRenderTexture>().end());
        using f408 = r408(*)(cocos2d::CCRenderTexture*);
        return reinterpret_cast<f408>(base+0x35d2c0)(this);
    }

    decltype(std::declval<cocos2d::CCRenderTexture>().create(std::declval<int>(), std::declval<int>(), std::declval<cocos2d::CCTexture2DPixelFormat>())) cocos2d::CCRenderTexture::create(int p0, int p1, cocos2d::CCTexture2DPixelFormat p2) {
        using r409 = decltype(std::declval<cocos2d::CCRenderTexture>().create(std::declval<int>(), std::declval<int>(), std::declval<cocos2d::CCTexture2DPixelFormat>()));
        using f409 = r409(*)(int, int, cocos2d::CCTexture2DPixelFormat);
        return reinterpret_cast<f409>(base+0x35c720)(p0, p1, p2);

    }

    decltype(std::declval<cocos2d::CCRenderTexture>().newCCImage(std::declval<bool>())) cocos2d::CCRenderTexture::newCCImage(bool p0) {
        using r410 = decltype(std::declval<cocos2d::CCRenderTexture>().newCCImage(std::declval<bool>()));
        using f410 = r410(*)(cocos2d::CCRenderTexture*, bool);
        return reinterpret_cast<f410>(base+0x35d7d0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCRepeatForever>().create(std::declval<cocos2d::CCActionInterval*>())) cocos2d::CCRepeatForever::create(cocos2d::CCActionInterval* p0) {
        using r411 = decltype(std::declval<cocos2d::CCRepeatForever>().create(std::declval<cocos2d::CCActionInterval*>()));
        using f411 = r411(*)(cocos2d::CCActionInterval*);
        return reinterpret_cast<f411>(base+0x1f3920)(p0);

    }

    decltype(std::declval<cocos2d::CCRotateBy>().create(std::declval<float>(), std::declval<float>())) cocos2d::CCRotateBy::create(float p0, float p1) {
        using r412 = decltype(std::declval<cocos2d::CCRotateBy>().create(std::declval<float>(), std::declval<float>()));
        using f412 = r412(*)(float, float);
        return reinterpret_cast<f412>(base+0x1f4c50)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCScaleTo>().create(std::declval<float>(), std::declval<float>())) cocos2d::CCScaleTo::create(float p0, float p1) {
        using r413 = decltype(std::declval<cocos2d::CCScaleTo>().create(std::declval<float>(), std::declval<float>()));
        using f413 = r413(*)(float, float);
        return reinterpret_cast<f413>(base+0x1f6ff0)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCScaleTo>().create(std::declval<float>(), std::declval<float>(), std::declval<float>())) cocos2d::CCScaleTo::create(float p0, float p1, float p2) {
        using r414 = decltype(std::declval<cocos2d::CCScaleTo>().create(std::declval<float>(), std::declval<float>(), std::declval<float>()));
        using f414 = r414(*)(float, float, float);
        return reinterpret_cast<f414>(base+0x1f70f0)(p0, p1, p2);

    }

    decltype(std::declval<cocos2d::CCScene>().create()) cocos2d::CCScene::create() {
        using r415 = decltype(std::declval<cocos2d::CCScene>().create());
        using f415 = r415(*)();
        return reinterpret_cast<f415>(base+0x13c140)();

    }

    decltype(std::declval<cocos2d::CCScene>().getHighestChildZ()) cocos2d::CCScene::getHighestChildZ() {
        using r416 = decltype(std::declval<cocos2d::CCScene>().getHighestChildZ());
        using f416 = r416(*)(cocos2d::CCScene*);
        return reinterpret_cast<f416>(base+0x13c200)(this);
    }

    decltype(std::declval<cocos2d::CCScheduler>().scheduleSelector(std::declval<cocos2d::SEL_SCHEDULE>(), std::declval<cocos2d::CCObject*>(), std::declval<float>(), std::declval<unsigned int>(), std::declval<float>(), std::declval<bool>())) cocos2d::CCScheduler::scheduleSelector(cocos2d::SEL_SCHEDULE p0, cocos2d::CCObject* p1, float p2, unsigned int p3, float p4, bool p5) {
        using r417 = decltype(std::declval<cocos2d::CCScheduler>().scheduleSelector(std::declval<cocos2d::SEL_SCHEDULE>(), std::declval<cocos2d::CCObject*>(), std::declval<float>(), std::declval<unsigned int>(), std::declval<float>(), std::declval<bool>()));
        using f417 = r417(*)(cocos2d::CCScheduler*, cocos2d::SEL_SCHEDULE, cocos2d::CCObject*, float, unsigned int, float, bool);
        return reinterpret_cast<f417>(base+0x242b20)(this, p0, p1, p2, p3, p4, p5);
    }

    decltype(std::declval<cocos2d::CCScheduler>().scheduleUpdateForTarget(std::declval<cocos2d::CCObject*>(), std::declval<int>(), std::declval<bool>())) cocos2d::CCScheduler::scheduleUpdateForTarget(cocos2d::CCObject* p0, int p1, bool p2) {
        using r418 = decltype(std::declval<cocos2d::CCScheduler>().scheduleUpdateForTarget(std::declval<cocos2d::CCObject*>(), std::declval<int>(), std::declval<bool>()));
        using f418 = r418(*)(cocos2d::CCScheduler*, cocos2d::CCObject*, int, bool);
        return reinterpret_cast<f418>(base+0x2438d0)(this, p0, p1, p2);
    }

    decltype(std::declval<cocos2d::CCScheduler>().unscheduleAllForTarget(std::declval<cocos2d::CCObject*>())) cocos2d::CCScheduler::unscheduleAllForTarget(cocos2d::CCObject* p0) {
        using r419 = decltype(std::declval<cocos2d::CCScheduler>().unscheduleAllForTarget(std::declval<cocos2d::CCObject*>()));
        using f419 = r419(*)(cocos2d::CCScheduler*, cocos2d::CCObject*);
        return reinterpret_cast<f419>(base+0x243e40)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSpriteBatchNode>().create(std::declval<char const*>(), std::declval<unsigned int>())) cocos2d::CCSpriteBatchNode::create(char const* p0, unsigned int p1) {
        using r420 = decltype(std::declval<cocos2d::CCSpriteBatchNode>().create(std::declval<char const*>(), std::declval<unsigned int>()));
        using f420 = r420(*)(char const*, unsigned int);
        return reinterpret_cast<f420>(base+0xbb540)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCSpriteBatchNode>().createWithTexture(std::declval<cocos2d::CCTexture2D*>(), std::declval<unsigned int>())) cocos2d::CCSpriteBatchNode::createWithTexture(cocos2d::CCTexture2D* p0, unsigned int p1) {
        using r421 = decltype(std::declval<cocos2d::CCSpriteBatchNode>().createWithTexture(std::declval<cocos2d::CCTexture2D*>(), std::declval<unsigned int>()));
        using f421 = r421(*)(cocos2d::CCTexture2D*, unsigned int);
        return reinterpret_cast<f421>(base+0xbb310)(p0, p1);

    }

    decltype(std::declval<cocos2d::CCSpriteBatchNode>().getUsedAtlasCapacity()) cocos2d::CCSpriteBatchNode::getUsedAtlasCapacity() {
        using r422 = decltype(std::declval<cocos2d::CCSpriteBatchNode>().getUsedAtlasCapacity());
        using f422 = r422(*)(cocos2d::CCSpriteBatchNode*);
        return reinterpret_cast<f422>(base+0xbc6b0)(this);
    }

    decltype(std::declval<cocos2d::CCSpriteBatchNode>().increaseAtlasCapacity(std::declval<unsigned int>())) cocos2d::CCSpriteBatchNode::increaseAtlasCapacity(unsigned int p0) {
        using r423 = decltype(std::declval<cocos2d::CCSpriteBatchNode>().increaseAtlasCapacity(std::declval<unsigned int>()));
        using f423 = r423(*)(cocos2d::CCSpriteBatchNode*, unsigned int);
        return reinterpret_cast<f423>(base+0xbc670)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSpriteFrameCache>().addSpriteFramesWithFile(std::declval<char const*>())) cocos2d::CCSpriteFrameCache::addSpriteFramesWithFile(char const* p0) {
        using r424 = decltype(std::declval<cocos2d::CCSpriteFrameCache>().addSpriteFramesWithFile(std::declval<char const*>()));
        using f424 = r424(*)(cocos2d::CCSpriteFrameCache*, char const*);
        return reinterpret_cast<f424>(base+0x199a10)(this, p0);
    }

    decltype(std::declval<cocos2d::CCSpriteFrameCache>().sharedSpriteFrameCache()) cocos2d::CCSpriteFrameCache::sharedSpriteFrameCache() {
        using r425 = decltype(std::declval<cocos2d::CCSpriteFrameCache>().sharedSpriteFrameCache());
        using f425 = r425(*)();
        return reinterpret_cast<f425>(base+0x198970)();

    }

    decltype(std::declval<cocos2d::CCSpriteFrameCache>().spriteFrameByName(std::declval<char const*>())) cocos2d::CCSpriteFrameCache::spriteFrameByName(char const* p0) {
        using r426 = decltype(std::declval<cocos2d::CCSpriteFrameCache>().spriteFrameByName(std::declval<char const*>()));
        using f426 = r426(*)(cocos2d::CCSpriteFrameCache*, char const*);
        return reinterpret_cast<f426>(base+0x19a7e0)(this, p0);
    }

    cocos2d::CCString::~CCString() {
        jumpDestructor(0x44c590)
    }

    decltype(std::declval<cocos2d::CCString>().isEqual(std::declval<cocos2d::CCObject const*>())) cocos2d::CCString::isEqual(cocos2d::CCObject const* p0) {
        using r428 = decltype(std::declval<cocos2d::CCString>().isEqual(std::declval<cocos2d::CCObject const*>()));
        using f428 = r428(*)(cocos2d::CCString*, cocos2d::CCObject const*);
        return reinterpret_cast<f428>(base+0x44c8f0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCString>().acceptVisitor(std::declval<cocos2d::CCDataVisitor&>())) cocos2d::CCString::acceptVisitor(cocos2d::CCDataVisitor& p0) {
        using r429 = decltype(std::declval<cocos2d::CCString>().acceptVisitor(std::declval<cocos2d::CCDataVisitor&>()));
        using f429 = r429(*)(cocos2d::CCString*, cocos2d::CCDataVisitor&);
        return reinterpret_cast<f429>(base+0x44ccb0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCString>().copyWithZone(std::declval<cocos2d::CCZone*>())) cocos2d::CCString::copyWithZone(cocos2d::CCZone* p0) {
        using r430 = decltype(std::declval<cocos2d::CCString>().copyWithZone(std::declval<cocos2d::CCZone*>()));
        using f430 = r430(*)(cocos2d::CCString*, cocos2d::CCZone*);
        return reinterpret_cast<f430>(base+0x44c870)(this, p0);
    }

    cocos2d::CCString::CCString(std::string const& p0) {
        using r431 = cocos2d::CCString*;
        using f431 = r431(*)(cocos2d::CCString*, std::string const&);
        reinterpret_cast<f431>(base+0x44c310)(this, p0);
    }

    decltype(std::declval<cocos2d::CCString>().boolValue()) cocos2d::CCString::boolValue() const {
        using r432 = decltype(std::declval<cocos2d::CCString>().boolValue());
        using f432 = r432(*)(const cocos2d::CCString*);
        return reinterpret_cast<f432>(base+0x44c810)(this);
    }

    decltype(std::declval<cocos2d::CCString>().doubleValue()) cocos2d::CCString::doubleValue() const {
        using r433 = decltype(std::declval<cocos2d::CCString>().doubleValue());
        using f433 = r433(*)(const cocos2d::CCString*);
        return reinterpret_cast<f433>(base+0x44c7f0)(this);
    }

    decltype(std::declval<cocos2d::CCString>().floatValue()) cocos2d::CCString::floatValue() const {
        using r434 = decltype(std::declval<cocos2d::CCString>().floatValue());
        using f434 = r434(*)(const cocos2d::CCString*);
        return reinterpret_cast<f434>(base+0x44c7d0)(this);
    }

    decltype(std::declval<cocos2d::CCString>().getCString()) cocos2d::CCString::getCString() const {
        using r435 = decltype(std::declval<cocos2d::CCString>().getCString());
        using f435 = r435(*)(const cocos2d::CCString*);
        return reinterpret_cast<f435>(base+0x44c470)(this);
    }

    decltype(std::declval<cocos2d::CCString>().intValue()) cocos2d::CCString::intValue() const {
        using r436 = decltype(std::declval<cocos2d::CCString>().intValue());
        using f436 = r436(*)(const cocos2d::CCString*);
        return reinterpret_cast<f436>(base+0x44c780)(this);
    }

    cocos2d::CCTexture2D::~CCTexture2D() {
        jumpDestructor(0x246350)
    }

    cocos2d::CCTexture2D::CCTexture2D() {
        using r438 = cocos2d::CCTexture2D*;
        using f438 = r438(*)(cocos2d::CCTexture2D*);
        reinterpret_cast<f438>(base+0x246280)(this);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().getContentSize()) cocos2d::CCTexture2D::getContentSize() {
        using r439 = decltype(std::declval<cocos2d::CCTexture2D>().getContentSize());
        using f439 = r439(*)(cocos2d::CCTexture2D*);
        return reinterpret_cast<f439>(base+0x246460)(this);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().getMaxS()) cocos2d::CCTexture2D::getMaxS() {
        using r440 = decltype(std::declval<cocos2d::CCTexture2D>().getMaxS());
        using f440 = r440(*)(cocos2d::CCTexture2D*);
        return reinterpret_cast<f440>(base+0x2464e0)(this);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().getMaxT()) cocos2d::CCTexture2D::getMaxT() {
        using r441 = decltype(std::declval<cocos2d::CCTexture2D>().getMaxT());
        using f441 = r441(*)(cocos2d::CCTexture2D*);
        return reinterpret_cast<f441>(base+0x246500)(this);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().getName()) cocos2d::CCTexture2D::getName() {
        using r442 = decltype(std::declval<cocos2d::CCTexture2D>().getName());
        using f442 = r442(*)(cocos2d::CCTexture2D*);
        return reinterpret_cast<f442>(base+0x246450)(this);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().getPixelFormat()) cocos2d::CCTexture2D::getPixelFormat() {
        using r443 = decltype(std::declval<cocos2d::CCTexture2D>().getPixelFormat());
        using f443 = r443(*)(cocos2d::CCTexture2D*);
        return reinterpret_cast<f443>(base+0x246420)(this);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().getPixelsHigh()) cocos2d::CCTexture2D::getPixelsHigh() {
        using r444 = decltype(std::declval<cocos2d::CCTexture2D>().getPixelsHigh());
        using f444 = r444(*)(cocos2d::CCTexture2D*);
        return reinterpret_cast<f444>(base+0x246440)(this);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().getPixelsWide()) cocos2d::CCTexture2D::getPixelsWide() {
        using r445 = decltype(std::declval<cocos2d::CCTexture2D>().getPixelsWide());
        using f445 = r445(*)(cocos2d::CCTexture2D*);
        return reinterpret_cast<f445>(base+0x246430)(this);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().getShaderProgram()) cocos2d::CCTexture2D::getShaderProgram() {
        using r446 = decltype(std::declval<cocos2d::CCTexture2D>().getShaderProgram());
        using f446 = r446(*)(cocos2d::CCTexture2D*);
        return reinterpret_cast<f446>(base+0x246520)(this);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().initPremultipliedATextureWithImage(std::declval<cocos2d::CCImage*>(), std::declval<unsigned int>(), std::declval<unsigned int>())) cocos2d::CCTexture2D::initPremultipliedATextureWithImage(cocos2d::CCImage* p0, unsigned int p1, unsigned int p2) {
        using r447 = decltype(std::declval<cocos2d::CCTexture2D>().initPremultipliedATextureWithImage(std::declval<cocos2d::CCImage*>(), std::declval<unsigned int>(), std::declval<unsigned int>()));
        using f447 = r447(*)(cocos2d::CCTexture2D*, cocos2d::CCImage*, unsigned int, unsigned int);
        return reinterpret_cast<f447>(base+0x2469a0)(this, p0, p1, p2);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().initWithData(std::declval<void const*>(), std::declval<cocos2d::CCTexture2DPixelFormat>(), std::declval<unsigned int>(), std::declval<unsigned int>(), std::declval<cocos2d::CCSize const&>())) cocos2d::CCTexture2D::initWithData(void const* p0, cocos2d::CCTexture2DPixelFormat p1, unsigned int p2, unsigned int p3, cocos2d::CCSize const& p4) {
        using r448 = decltype(std::declval<cocos2d::CCTexture2D>().initWithData(std::declval<void const*>(), std::declval<cocos2d::CCTexture2DPixelFormat>(), std::declval<unsigned int>(), std::declval<unsigned int>(), std::declval<cocos2d::CCSize const&>()));
        using f448 = r448(*)(cocos2d::CCTexture2D*, void const*, cocos2d::CCTexture2DPixelFormat, unsigned int, unsigned int, cocos2d::CCSize const&);
        return reinterpret_cast<f448>(base+0x2465d0)(this, p0, p1, p2, p3, p4);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().setAliasTexParameters()) cocos2d::CCTexture2D::setAliasTexParameters() {
        using r449 = decltype(std::declval<cocos2d::CCTexture2D>().setAliasTexParameters());
        using f449 = r449(*)(cocos2d::CCTexture2D*);
        return reinterpret_cast<f449>(base+0x247a20)(this);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().setAntiAliasTexParameters()) cocos2d::CCTexture2D::setAntiAliasTexParameters() {
        using r450 = decltype(std::declval<cocos2d::CCTexture2D>().setAntiAliasTexParameters());
        using f450 = r450(*)(cocos2d::CCTexture2D*);
        return reinterpret_cast<f450>(base+0x247a80)(this);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().setMaxS(std::declval<float>())) cocos2d::CCTexture2D::setMaxS(float p0) {
        using r451 = decltype(std::declval<cocos2d::CCTexture2D>().setMaxS(std::declval<float>()));
        using f451 = r451(*)(cocos2d::CCTexture2D*, float);
        return reinterpret_cast<f451>(base+0x2464f0)(this, p0);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().setMaxT(std::declval<float>())) cocos2d::CCTexture2D::setMaxT(float p0) {
        using r452 = decltype(std::declval<cocos2d::CCTexture2D>().setMaxT(std::declval<float>()));
        using f452 = r452(*)(cocos2d::CCTexture2D*, float);
        return reinterpret_cast<f452>(base+0x246510)(this, p0);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().setShaderProgram(std::declval<cocos2d::CCGLProgram*>())) cocos2d::CCTexture2D::setShaderProgram(cocos2d::CCGLProgram* p0) {
        using r453 = decltype(std::declval<cocos2d::CCTexture2D>().setShaderProgram(std::declval<cocos2d::CCGLProgram*>()));
        using f453 = r453(*)(cocos2d::CCTexture2D*, cocos2d::CCGLProgram*);
        return reinterpret_cast<f453>(base+0x246530)(this, p0);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().initWithImage(std::declval<cocos2d::CCImage*>())) cocos2d::CCTexture2D::initWithImage(cocos2d::CCImage* p0) {
        using r454 = decltype(std::declval<cocos2d::CCTexture2D>().initWithImage(std::declval<cocos2d::CCImage*>()));
        using f454 = r454(*)(cocos2d::CCTexture2D*, cocos2d::CCImage*);
        return reinterpret_cast<f454>(base+0x246940)(this, p0);
    }

    decltype(std::declval<cocos2d::CCTexture2D>().setTexParameters(std::declval<cocos2d::_ccTexParams*>())) cocos2d::CCTexture2D::setTexParameters(cocos2d::_ccTexParams* p0) {
        using r455 = decltype(std::declval<cocos2d::CCTexture2D>().setTexParameters(std::declval<cocos2d::_ccTexParams*>()));
        using f455 = r455(*)(cocos2d::CCTexture2D*, cocos2d::_ccTexParams*);
        return reinterpret_cast<f455>(base+0x247980)(this, p0);
    }

    decltype(std::declval<cocos2d::CCTextureCache>().addImage(std::declval<char const*>(), std::declval<bool>())) cocos2d::CCTextureCache::addImage(char const* p0, bool p1) {
        using r456 = decltype(std::declval<cocos2d::CCTextureCache>().addImage(std::declval<char const*>(), std::declval<bool>()));
        using f456 = r456(*)(cocos2d::CCTextureCache*, char const*, bool);
        return reinterpret_cast<f456>(base+0x358120)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::CCTextureCache>().sharedTextureCache()) cocos2d::CCTextureCache::sharedTextureCache() {
        using r457 = decltype(std::declval<cocos2d::CCTextureCache>().sharedTextureCache());
        using f457 = r457(*)();
        return reinterpret_cast<f457>(base+0x356e00)();

    }

    decltype(std::declval<cocos2d::CCTintTo>().create(std::declval<float>(), std::declval<unsigned char>(), std::declval<unsigned char>(), std::declval<unsigned char>())) cocos2d::CCTintTo::create(float p0, unsigned char p1, unsigned char p2, unsigned char p3) {
        using r458 = decltype(std::declval<cocos2d::CCTintTo>().create(std::declval<float>(), std::declval<unsigned char>(), std::declval<unsigned char>(), std::declval<unsigned char>()));
        using f458 = r458(*)(float, unsigned char, unsigned char, unsigned char);
        return reinterpret_cast<f458>(base+0x1f82a0)(p0, p1, p2, p3);

    }

    decltype(std::declval<cocos2d::CCTouch>().getDelta()) cocos2d::CCTouch::getDelta() const {
        using r459 = decltype(std::declval<cocos2d::CCTouch>().getDelta());
        using f459 = r459(*)(const cocos2d::CCTouch*);
        return reinterpret_cast<f459>(base+0x38340)(this);
    }

    decltype(std::declval<cocos2d::CCTouch>().getLocationInView()) cocos2d::CCTouch::getLocationInView() const {
        using r460 = decltype(std::declval<cocos2d::CCTouch>().getLocationInView());
        using f460 = r460(*)(const cocos2d::CCTouch*);
        return reinterpret_cast<f460>(base+0x38250)(this);
    }

    decltype(std::declval<cocos2d::CCTouchDispatcher>().decrementForcePrio(std::declval<int>())) cocos2d::CCTouchDispatcher::decrementForcePrio(int p0) {
        using r461 = decltype(std::declval<cocos2d::CCTouchDispatcher>().decrementForcePrio(std::declval<int>()));
        using f461 = r461(*)(cocos2d::CCTouchDispatcher*, int);
        return reinterpret_cast<f461>(base+0x280f70)(this, p0);
    }

    decltype(std::declval<cocos2d::CCTouchDispatcher>().incrementForcePrio(std::declval<int>())) cocos2d::CCTouchDispatcher::incrementForcePrio(int p0) {
        using r462 = decltype(std::declval<cocos2d::CCTouchDispatcher>().incrementForcePrio(std::declval<int>()));
        using f462 = r462(*)(cocos2d::CCTouchDispatcher*, int);
        return reinterpret_cast<f462>(base+0x280f60)(this, p0);
    }

    decltype(std::declval<cocos2d::CCTransitionFade>().create(std::declval<float>(), std::declval<cocos2d::CCScene*>())) cocos2d::CCTransitionFade::create(float p0, cocos2d::CCScene* p1) {
        using r463 = decltype(std::declval<cocos2d::CCTransitionFade>().create(std::declval<float>(), std::declval<cocos2d::CCScene*>()));
        using f463 = r463(*)(float, cocos2d::CCScene*);
        return reinterpret_cast<f463>(base+0x8ea30)(p0, p1);

    }

    decltype(std::declval<cocos2d::extension::CCControlColourPicker>().setColorValue(std::declval<cocos2d::_ccColor3B const&>())) cocos2d::extension::CCControlColourPicker::setColorValue(cocos2d::_ccColor3B const& p0) {
        using r464 = decltype(std::declval<cocos2d::extension::CCControlColourPicker>().setColorValue(std::declval<cocos2d::_ccColor3B const&>()));
        using f464 = r464(*)(cocos2d::extension::CCControlColourPicker*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f464>(base+0x1aac10)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCControlUtils>().HSVfromRGB(std::declval<cocos2d::extension::RGBA>())) cocos2d::extension::CCControlUtils::HSVfromRGB(cocos2d::extension::RGBA p0) {
        using r465 = decltype(std::declval<cocos2d::extension::CCControlUtils>().HSVfromRGB(std::declval<cocos2d::extension::RGBA>()));
        using f465 = r465(*)(cocos2d::extension::RGBA);
        return reinterpret_cast<f465>(base+0x1e6750)(p0);

    }

    decltype(std::declval<cocos2d::extension::CCControlUtils>().RGBfromHSV(std::declval<cocos2d::extension::HSV>())) cocos2d::extension::CCControlUtils::RGBfromHSV(cocos2d::extension::HSV p0) {
        using r466 = decltype(std::declval<cocos2d::extension::CCControlUtils>().RGBfromHSV(std::declval<cocos2d::extension::HSV>()));
        using f466 = r466(*)(cocos2d::extension::HSV);
        return reinterpret_cast<f466>(base+0x1e6850)(p0);

    }

    cocos2d::extension::CCScale9Sprite::CCScale9Sprite() {
        using r467 = cocos2d::extension::CCScale9Sprite*;
        using f467 = r467(*)(cocos2d::extension::CCScale9Sprite*);
        reinterpret_cast<f467>(base+0x211330)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().create(std::declval<char const*>())) cocos2d::extension::CCScale9Sprite::create(char const* p0) {
        using r468 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().create(std::declval<char const*>()));
        using f468 = r468(*)(char const*);
        return reinterpret_cast<f468>(base+0x2130d0)(p0);

    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().create(std::declval<char const*>(), std::declval<cocos2d::CCRect>())) cocos2d::extension::CCScale9Sprite::create(char const* p0, cocos2d::CCRect p1) {
        using r469 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().create(std::declval<char const*>(), std::declval<cocos2d::CCRect>()));
        using f469 = r469(*)(char const*, cocos2d::CCRect);
        return reinterpret_cast<f469>(base+0x212ef0)(p0, p1);

    }

    cocos2d::extension::CCScale9Sprite::~CCScale9Sprite() {
        jumpDestructor(0x211590)
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().init()) cocos2d::extension::CCScale9Sprite::init() {
        using r471 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().init());
        using f471 = r471(*)(cocos2d::extension::CCScale9Sprite*);
        return reinterpret_cast<f471>(base+0x2115d0)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setContentSize(std::declval<cocos2d::CCSize const&>())) cocos2d::extension::CCScale9Sprite::setContentSize(cocos2d::CCSize const& p0) {
        using r472 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setContentSize(std::declval<cocos2d::CCSize const&>()));
        using f472 = r472(*)(cocos2d::extension::CCScale9Sprite*, cocos2d::CCSize const&);
        return reinterpret_cast<f472>(base+0x2127c0)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().visit()) cocos2d::extension::CCScale9Sprite::visit() {
        using r473 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().visit());
        using f473 = r473(*)(cocos2d::extension::CCScale9Sprite*);
        return reinterpret_cast<f473>(base+0x213bf0)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getOpacity()) cocos2d::extension::CCScale9Sprite::getOpacity() {
        using r474 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getOpacity());
        using f474 = r474(*)(cocos2d::extension::CCScale9Sprite*);
        return reinterpret_cast<f474>(base+0x213f30)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setOpacity(std::declval<unsigned char>())) cocos2d::extension::CCScale9Sprite::setOpacity(unsigned char p0) {
        using r475 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setOpacity(std::declval<unsigned char>()));
        using f475 = r475(*)(cocos2d::extension::CCScale9Sprite*, unsigned char);
        return reinterpret_cast<f475>(base+0x213dd0)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().updateDisplayedOpacity(std::declval<unsigned char>())) cocos2d::extension::CCScale9Sprite::updateDisplayedOpacity(unsigned char p0) {
        using r476 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().updateDisplayedOpacity(std::declval<unsigned char>()));
        using f476 = r476(*)(cocos2d::extension::CCScale9Sprite*, unsigned char);
        return reinterpret_cast<f476>(base+0x2139b0)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getColor()) cocos2d::extension::CCScale9Sprite::getColor() {
        using r477 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getColor());
        using f477 = r477(*)(cocos2d::extension::CCScale9Sprite*);
        return reinterpret_cast<f477>(base+0x213db0)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setColor(std::declval<cocos2d::_ccColor3B const&>())) cocos2d::extension::CCScale9Sprite::setColor(cocos2d::_ccColor3B const& p0) {
        using r478 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f478 = r478(*)(cocos2d::extension::CCScale9Sprite*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f478>(base+0x213c20)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().updateDisplayedColor(std::declval<cocos2d::_ccColor3B const&>())) cocos2d::extension::CCScale9Sprite::updateDisplayedColor(cocos2d::_ccColor3B const& p0) {
        using r479 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().updateDisplayedColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f479 = r479(*)(cocos2d::extension::CCScale9Sprite*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f479>(base+0x213a20)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setOpacityModifyRGB(std::declval<bool>())) cocos2d::extension::CCScale9Sprite::setOpacityModifyRGB(bool p0) {
        using r480 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setOpacityModifyRGB(std::declval<bool>()));
        using f480 = r480(*)(cocos2d::extension::CCScale9Sprite*, bool);
        return reinterpret_cast<f480>(base+0x213830)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().isOpacityModifyRGB()) cocos2d::extension::CCScale9Sprite::isOpacityModifyRGB() {
        using r481 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().isOpacityModifyRGB());
        using f481 = r481(*)(cocos2d::extension::CCScale9Sprite*);
        return reinterpret_cast<f481>(base+0x213990)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getPreferredSize()) cocos2d::extension::CCScale9Sprite::getPreferredSize() {
        using r482 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getPreferredSize());
        using f482 = r482(*)(cocos2d::extension::CCScale9Sprite*);
        return reinterpret_cast<f482>(base+0x213620)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setPreferredSize(std::declval<cocos2d::CCSize>())) cocos2d::extension::CCScale9Sprite::setPreferredSize(cocos2d::CCSize p0) {
        using r483 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setPreferredSize(std::declval<cocos2d::CCSize>()));
        using f483 = r483(*)(cocos2d::extension::CCScale9Sprite*, cocos2d::CCSize);
        return reinterpret_cast<f483>(base+0x2135f0)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getCapInsets()) cocos2d::extension::CCScale9Sprite::getCapInsets() {
        using r484 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getCapInsets());
        using f484 = r484(*)(cocos2d::extension::CCScale9Sprite*);
        return reinterpret_cast<f484>(base+0x2136e0)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setCapInsets(std::declval<cocos2d::CCRect>())) cocos2d::extension::CCScale9Sprite::setCapInsets(cocos2d::CCRect p0) {
        using r485 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setCapInsets(std::declval<cocos2d::CCRect>()));
        using f485 = r485(*)(cocos2d::extension::CCScale9Sprite*, cocos2d::CCRect);
        return reinterpret_cast<f485>(base+0x213640)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getInsetLeft()) cocos2d::extension::CCScale9Sprite::getInsetLeft() {
        using r486 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getInsetLeft());
        using f486 = r486(*)(cocos2d::extension::CCScale9Sprite*);
        return reinterpret_cast<f486>(base+0x213b30)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setInsetLeft(std::declval<float>())) cocos2d::extension::CCScale9Sprite::setInsetLeft(float p0) {
        using r487 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setInsetLeft(std::declval<float>()));
        using f487 = r487(*)(cocos2d::extension::CCScale9Sprite*, float);
        return reinterpret_cast<f487>(base+0x213b70)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getInsetTop()) cocos2d::extension::CCScale9Sprite::getInsetTop() {
        using r488 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getInsetTop());
        using f488 = r488(*)(cocos2d::extension::CCScale9Sprite*);
        return reinterpret_cast<f488>(base+0x213b40)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setInsetTop(std::declval<float>())) cocos2d::extension::CCScale9Sprite::setInsetTop(float p0) {
        using r489 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setInsetTop(std::declval<float>()));
        using f489 = r489(*)(cocos2d::extension::CCScale9Sprite*, float);
        return reinterpret_cast<f489>(base+0x213b90)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getInsetRight()) cocos2d::extension::CCScale9Sprite::getInsetRight() {
        using r490 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getInsetRight());
        using f490 = r490(*)(cocos2d::extension::CCScale9Sprite*);
        return reinterpret_cast<f490>(base+0x213b50)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setInsetRight(std::declval<float>())) cocos2d::extension::CCScale9Sprite::setInsetRight(float p0) {
        using r491 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setInsetRight(std::declval<float>()));
        using f491 = r491(*)(cocos2d::extension::CCScale9Sprite*, float);
        return reinterpret_cast<f491>(base+0x213bb0)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getInsetBottom()) cocos2d::extension::CCScale9Sprite::getInsetBottom() {
        using r492 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().getInsetBottom());
        using f492 = r492(*)(cocos2d::extension::CCScale9Sprite*);
        return reinterpret_cast<f492>(base+0x213b60)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setInsetBottom(std::declval<float>())) cocos2d::extension::CCScale9Sprite::setInsetBottom(float p0) {
        using r493 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setInsetBottom(std::declval<float>()));
        using f493 = r493(*)(cocos2d::extension::CCScale9Sprite*, float);
        return reinterpret_cast<f493>(base+0x213bd0)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithBatchNode(std::declval<cocos2d::CCSpriteBatchNode*>(), std::declval<cocos2d::CCRect>(), std::declval<bool>(), std::declval<cocos2d::CCRect>())) cocos2d::extension::CCScale9Sprite::initWithBatchNode(cocos2d::CCSpriteBatchNode* p0, cocos2d::CCRect p1, bool p2, cocos2d::CCRect p3) {
        using r494 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithBatchNode(std::declval<cocos2d::CCSpriteBatchNode*>(), std::declval<cocos2d::CCRect>(), std::declval<bool>(), std::declval<cocos2d::CCRect>()));
        using f494 = r494(*)(cocos2d::extension::CCScale9Sprite*, cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, bool, cocos2d::CCRect);
        return reinterpret_cast<f494>(base+0x211690)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithBatchNode(std::declval<cocos2d::CCSpriteBatchNode*>(), std::declval<cocos2d::CCRect>(), std::declval<cocos2d::CCRect>())) cocos2d::extension::CCScale9Sprite::initWithBatchNode(cocos2d::CCSpriteBatchNode* p0, cocos2d::CCRect p1, cocos2d::CCRect p2) {
        using r495 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithBatchNode(std::declval<cocos2d::CCSpriteBatchNode*>(), std::declval<cocos2d::CCRect>(), std::declval<cocos2d::CCRect>()));
        using f495 = r495(*)(cocos2d::extension::CCScale9Sprite*, cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, cocos2d::CCRect);
        return reinterpret_cast<f495>(base+0x211630)(this, p0, p1, p2);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithFile(std::declval<char const*>(), std::declval<cocos2d::CCRect>(), std::declval<cocos2d::CCRect>())) cocos2d::extension::CCScale9Sprite::initWithFile(char const* p0, cocos2d::CCRect p1, cocos2d::CCRect p2) {
        using r496 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithFile(std::declval<char const*>(), std::declval<cocos2d::CCRect>(), std::declval<cocos2d::CCRect>()));
        using f496 = r496(*)(cocos2d::extension::CCScale9Sprite*, char const*, cocos2d::CCRect, cocos2d::CCRect);
        return reinterpret_cast<f496>(base+0x212d50)(this, p0, p1, p2);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithFile(std::declval<char const*>(), std::declval<cocos2d::CCRect>())) cocos2d::extension::CCScale9Sprite::initWithFile(char const* p0, cocos2d::CCRect p1) {
        using r497 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithFile(std::declval<char const*>(), std::declval<cocos2d::CCRect>()));
        using f497 = r497(*)(cocos2d::extension::CCScale9Sprite*, char const*, cocos2d::CCRect);
        return reinterpret_cast<f497>(base+0x212e80)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithFile(std::declval<cocos2d::CCRect>(), std::declval<char const*>())) cocos2d::extension::CCScale9Sprite::initWithFile(cocos2d::CCRect p0, char const* p1) {
        using r498 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithFile(std::declval<cocos2d::CCRect>(), std::declval<char const*>()));
        using f498 = r498(*)(cocos2d::extension::CCScale9Sprite*, cocos2d::CCRect, char const*);
        return reinterpret_cast<f498>(base+0x212f80)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithFile(std::declval<char const*>())) cocos2d::extension::CCScale9Sprite::initWithFile(char const* p0) {
        using r499 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithFile(std::declval<char const*>()));
        using f499 = r499(*)(cocos2d::extension::CCScale9Sprite*, char const*);
        return reinterpret_cast<f499>(base+0x213080)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithSpriteFrame(std::declval<cocos2d::CCSpriteFrame*>(), std::declval<cocos2d::CCRect>())) cocos2d::extension::CCScale9Sprite::initWithSpriteFrame(cocos2d::CCSpriteFrame* p0, cocos2d::CCRect p1) {
        using r500 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithSpriteFrame(std::declval<cocos2d::CCSpriteFrame*>(), std::declval<cocos2d::CCRect>()));
        using f500 = r500(*)(cocos2d::extension::CCScale9Sprite*, cocos2d::CCSpriteFrame*, cocos2d::CCRect);
        return reinterpret_cast<f500>(base+0x213140)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithSpriteFrame(std::declval<cocos2d::CCSpriteFrame*>())) cocos2d::extension::CCScale9Sprite::initWithSpriteFrame(cocos2d::CCSpriteFrame* p0) {
        using r501 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithSpriteFrame(std::declval<cocos2d::CCSpriteFrame*>()));
        using f501 = r501(*)(cocos2d::extension::CCScale9Sprite*, cocos2d::CCSpriteFrame*);
        return reinterpret_cast<f501>(base+0x213250)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithSpriteFrameName(std::declval<char const*>(), std::declval<cocos2d::CCRect>())) cocos2d::extension::CCScale9Sprite::initWithSpriteFrameName(char const* p0, cocos2d::CCRect p1) {
        using r502 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithSpriteFrameName(std::declval<char const*>(), std::declval<cocos2d::CCRect>()));
        using f502 = r502(*)(cocos2d::extension::CCScale9Sprite*, char const*, cocos2d::CCRect);
        return reinterpret_cast<f502>(base+0x213310)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithSpriteFrameName(std::declval<char const*>())) cocos2d::extension::CCScale9Sprite::initWithSpriteFrameName(char const* p0) {
        using r503 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().initWithSpriteFrameName(std::declval<char const*>()));
        using f503 = r503(*)(cocos2d::extension::CCScale9Sprite*, char const*);
        return reinterpret_cast<f503>(base+0x213410)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().updateWithBatchNode(std::declval<cocos2d::CCSpriteBatchNode*>(), std::declval<cocos2d::CCRect>(), std::declval<bool>(), std::declval<cocos2d::CCRect>())) cocos2d::extension::CCScale9Sprite::updateWithBatchNode(cocos2d::CCSpriteBatchNode* p0, cocos2d::CCRect p1, bool p2, cocos2d::CCRect p3) {
        using r504 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().updateWithBatchNode(std::declval<cocos2d::CCSpriteBatchNode*>(), std::declval<cocos2d::CCRect>(), std::declval<bool>(), std::declval<cocos2d::CCRect>()));
        using f504 = r504(*)(cocos2d::extension::CCScale9Sprite*, cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, bool, cocos2d::CCRect);
        return reinterpret_cast<f504>(base+0x211730)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setSpriteFrame(std::declval<cocos2d::CCSpriteFrame*>())) cocos2d::extension::CCScale9Sprite::setSpriteFrame(cocos2d::CCSpriteFrame* p0) {
        using r505 = decltype(std::declval<cocos2d::extension::CCScale9Sprite>().setSpriteFrame(std::declval<cocos2d::CCSpriteFrame*>()));
        using f505 = r505(*)(cocos2d::extension::CCScale9Sprite*, cocos2d::CCSpriteFrame*);
        return reinterpret_cast<f505>(base+0x213a90)(this, p0);
    }

    cocos2d::extension::CCScrollView::CCScrollView() {
        using r506 = cocos2d::extension::CCScrollView*;
        using f506 = r506(*)(cocos2d::extension::CCScrollView*);
        reinterpret_cast<f506>(base+0x214800)(this);
    }

    cocos2d::extension::CCScrollView::~CCScrollView() {
        jumpDestructor(0x214c30)
    }

    decltype(std::declval<cocos2d::extension::CCScrollView>().init()) cocos2d::extension::CCScrollView::init() {
        using r508 = decltype(std::declval<cocos2d::extension::CCScrollView>().init());
        using f508 = r508(*)(cocos2d::extension::CCScrollView*);
        return reinterpret_cast<f508>(base+0x214fb0)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScrollView>().setContentSize(std::declval<cocos2d::CCSize const&>())) cocos2d::extension::CCScrollView::setContentSize(cocos2d::CCSize const& p0) {
        using r509 = decltype(std::declval<cocos2d::extension::CCScrollView>().setContentSize(std::declval<cocos2d::CCSize const&>()));
        using f509 = r509(*)(cocos2d::extension::CCScrollView*, cocos2d::CCSize const&);
        return reinterpret_cast<f509>(base+0x215eb0)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScrollView>().getContentSize()) cocos2d::extension::CCScrollView::getContentSize() const {
        using r510 = decltype(std::declval<cocos2d::extension::CCScrollView>().getContentSize());
        using f510 = r510(*)(const cocos2d::extension::CCScrollView*);
        return reinterpret_cast<f510>(base+0x215e90)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScrollView>().addChild(std::declval<cocos2d::CCNode*>())) cocos2d::extension::CCScrollView::addChild(cocos2d::CCNode* p0) {
        using r511 = decltype(std::declval<cocos2d::extension::CCScrollView>().addChild(std::declval<cocos2d::CCNode*>()));
        using f511 = r511(*)(cocos2d::extension::CCScrollView*, cocos2d::CCNode*);
        return reinterpret_cast<f511>(base+0x216160)(this, p0);
    }

    decltype(std::declval<cocos2d::extension::CCScrollView>().addChild(std::declval<cocos2d::CCNode*>(), std::declval<int>())) cocos2d::extension::CCScrollView::addChild(cocos2d::CCNode* p0, int p1) {
        using r512 = decltype(std::declval<cocos2d::extension::CCScrollView>().addChild(std::declval<cocos2d::CCNode*>(), std::declval<int>()));
        using f512 = r512(*)(cocos2d::extension::CCScrollView*, cocos2d::CCNode*, int);
        return reinterpret_cast<f512>(base+0x216120)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::extension::CCScrollView>().addChild(std::declval<cocos2d::CCNode*>(), std::declval<int>(), std::declval<int>())) cocos2d::extension::CCScrollView::addChild(cocos2d::CCNode* p0, int p1, int p2) {
        using r513 = decltype(std::declval<cocos2d::extension::CCScrollView>().addChild(std::declval<cocos2d::CCNode*>(), std::declval<int>(), std::declval<int>()));
        using f513 = r513(*)(cocos2d::extension::CCScrollView*, cocos2d::CCNode*, int, int);
        return reinterpret_cast<f513>(base+0x216080)(this, p0, p1, p2);
    }

    decltype(std::declval<cocos2d::extension::CCScrollView>().visit()) cocos2d::extension::CCScrollView::visit() {
        using r514 = decltype(std::declval<cocos2d::extension::CCScrollView>().visit());
        using f514 = r514(*)(cocos2d::extension::CCScrollView*);
        return reinterpret_cast<f514>(base+0x2164a0)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScrollView>().ccTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) cocos2d::extension::CCScrollView::ccTouchBegan(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r515 = decltype(std::declval<cocos2d::extension::CCScrollView>().ccTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f515 = r515(*)(cocos2d::extension::CCScrollView*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f515>(base+0x216620)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::extension::CCScrollView>().ccTouchMoved(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) cocos2d::extension::CCScrollView::ccTouchMoved(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r516 = decltype(std::declval<cocos2d::extension::CCScrollView>().ccTouchMoved(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f516 = r516(*)(cocos2d::extension::CCScrollView*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f516>(base+0x216890)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::extension::CCScrollView>().ccTouchEnded(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) cocos2d::extension::CCScrollView::ccTouchEnded(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r517 = decltype(std::declval<cocos2d::extension::CCScrollView>().ccTouchEnded(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f517 = r517(*)(cocos2d::extension::CCScrollView*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f517>(base+0x216c70)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::extension::CCScrollView>().ccTouchCancelled(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) cocos2d::extension::CCScrollView::ccTouchCancelled(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r518 = decltype(std::declval<cocos2d::extension::CCScrollView>().ccTouchCancelled(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f518 = r518(*)(cocos2d::extension::CCScrollView*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f518>(base+0x216d30)(this, p0, p1);
    }

    decltype(std::declval<cocos2d::extension::CCScrollView>().registerWithTouchDispatcher()) cocos2d::extension::CCScrollView::registerWithTouchDispatcher() {
        using r519 = decltype(std::declval<cocos2d::extension::CCScrollView>().registerWithTouchDispatcher());
        using f519 = r519(*)(cocos2d::extension::CCScrollView*);
        return reinterpret_cast<f519>(base+0x214ff0)(this);
    }

    decltype(std::declval<cocos2d::extension::CCScrollView>().setTouchEnabled(std::declval<bool>())) cocos2d::extension::CCScrollView::setTouchEnabled(bool p0) {
        using r520 = decltype(std::declval<cocos2d::extension::CCScrollView>().setTouchEnabled(std::declval<bool>()));
        using f520 = r520(*)(cocos2d::extension::CCScrollView*, bool);
        return reinterpret_cast<f520>(base+0x215250)(this, p0);
    }

    decltype(std::declval<AppDelegate>().bgScale()) AppDelegate::bgScale() {
        using r521 = decltype(std::declval<AppDelegate>().bgScale());
        using f521 = r521(*)(AppDelegate*);
        return reinterpret_cast<f521>(base+0x3aaab0)(this);
    }

    decltype(std::declval<AppDelegate>().applicationDidFinishLaunching()) AppDelegate::applicationDidFinishLaunching() {
        using r522 = decltype(std::declval<AppDelegate>().applicationDidFinishLaunching());
        using f522 = r522(*)(AppDelegate*);
        return reinterpret_cast<f522>(base+0x3aa900)(this);
    }

    decltype(std::declval<AppDelegate>().applicationDidEnterBackground()) AppDelegate::applicationDidEnterBackground() {
        using r523 = decltype(std::declval<AppDelegate>().applicationDidEnterBackground());
        using f523 = r523(*)(AppDelegate*);
        return reinterpret_cast<f523>(base+0x3aabe0)(this);
    }

    decltype(std::declval<AppDelegate>().applicationWillEnterForeground()) AppDelegate::applicationWillEnterForeground() {
        using r524 = decltype(std::declval<AppDelegate>().applicationWillEnterForeground());
        using f524 = r524(*)(AppDelegate*);
        return reinterpret_cast<f524>(base+0x3aac80)(this);
    }

    decltype(std::declval<AppDelegate>().applicationWillBecomeActive()) AppDelegate::applicationWillBecomeActive() {
        using r525 = decltype(std::declval<AppDelegate>().applicationWillBecomeActive());
        using f525 = r525(*)(AppDelegate*);
        return reinterpret_cast<f525>(base+0x3aab30)(this);
    }

    decltype(std::declval<AppDelegate>().applicationWillResignActive()) AppDelegate::applicationWillResignActive() {
        using r526 = decltype(std::declval<AppDelegate>().applicationWillResignActive());
        using f526 = r526(*)(AppDelegate*);
        return reinterpret_cast<f526>(base+0x3aab50)(this);
    }

    decltype(std::declval<AppDelegate>().trySaveGame()) AppDelegate::trySaveGame() {
        using r527 = decltype(std::declval<AppDelegate>().trySaveGame());
        using f527 = r527(*)(AppDelegate*);
        return reinterpret_cast<f527>(base+0x3aaf10)(this);
    }

    decltype(std::declval<AppDelegate>().willSwitchToScene(std::declval<cocos2d::CCScene*>())) AppDelegate::willSwitchToScene(cocos2d::CCScene* p0) {
        using r528 = decltype(std::declval<AppDelegate>().willSwitchToScene(std::declval<cocos2d::CCScene*>()));
        using f528 = r528(*)(AppDelegate*, cocos2d::CCScene*);
        return reinterpret_cast<f528>(base+0x3aaf40)(this, p0);
    }

    decltype(std::declval<AppDelegate>().get()) AppDelegate::get() {
        using r529 = decltype(std::declval<AppDelegate>().get());
        using f529 = r529(*)();
        return reinterpret_cast<f529>(base+0x3aab10)();

    }

    decltype(std::declval<CCSpritePlus>().initWithSpriteFrameName(std::declval<char const*>())) CCSpritePlus::initWithSpriteFrameName(char const* p0) {
        using r530 = decltype(std::declval<CCSpritePlus>().initWithSpriteFrameName(std::declval<char const*>()));
        using f530 = r530(*)(CCSpritePlus*, char const*);
        return reinterpret_cast<f530>(base+0x248670)(this, p0);
    }

    decltype(std::declval<CCMoveCNode>().create()) CCMoveCNode::create() {
        using r531 = decltype(std::declval<CCMoveCNode>().create());
        using f531 = r531(*)();
        return reinterpret_cast<f531>(base+0x1842a0)();

    }

    decltype(std::declval<CCMoveCNode>().init()) CCMoveCNode::init() {
        using r532 = decltype(std::declval<CCMoveCNode>().init());
        using f532 = r532(*)(CCMoveCNode*);
        return reinterpret_cast<f532>(base+0x18b3d0)(this);
    }

    CCMoveCNode::~CCMoveCNode() {
        jumpDestructor(0x18b2c0)
    }

    decltype(std::declval<CCNodeContainer>().create()) CCNodeContainer::create() {
        using r534 = decltype(std::declval<CCNodeContainer>().create());
        using f534 = r534(*)();
        return reinterpret_cast<f534>(base+0xb1090)();

    }

    decltype(std::declval<CCNodeContainer>().init()) CCNodeContainer::init() {
        using r535 = decltype(std::declval<CCNodeContainer>().init());
        using f535 = r535(*)(CCNodeContainer*);
        return reinterpret_cast<f535>(base+0xba950)(this);
    }

    decltype(std::declval<CCNodeContainer>().visit()) CCNodeContainer::visit() {
        using r536 = decltype(std::declval<CCNodeContainer>().visit());
        using f536 = r536(*)(CCNodeContainer*);
        return reinterpret_cast<f536>(base+0xba960)(this);
    }

    decltype(std::declval<CCAnimatedSprite>().runAnimation(std::declval<gd::string>())) CCAnimatedSprite::runAnimation(gd::string p0) {
        using r537 = decltype(std::declval<CCAnimatedSprite>().runAnimation(std::declval<gd::string>()));
        using f537 = r537(*)(CCAnimatedSprite*, gd::string);
        return reinterpret_cast<f537>(base+0x1a6430)(this, p0);
    }

    decltype(std::declval<CCAnimatedSprite>().tweenToAnimation(std::declval<gd::string>(), std::declval<float>())) CCAnimatedSprite::tweenToAnimation(gd::string p0, float p1) {
        using r538 = decltype(std::declval<CCAnimatedSprite>().tweenToAnimation(std::declval<gd::string>(), std::declval<float>()));
        using f538 = r538(*)(CCAnimatedSprite*, gd::string, float);
        return reinterpret_cast<f538>(base+0x1a65b0)(this, p0, p1);
    }

    decltype(std::declval<CCBlockLayer>().disableUI()) CCBlockLayer::disableUI() {
        using r539 = decltype(std::declval<CCBlockLayer>().disableUI());
        using f539 = r539(*)(CCBlockLayer*);
        return reinterpret_cast<f539>(base+0x2a5a80)(this);
    }

    decltype(std::declval<CCBlockLayer>().draw()) CCBlockLayer::draw() {
        using r540 = decltype(std::declval<CCBlockLayer>().draw());
        using f540 = r540(*)(CCBlockLayer*);
        return reinterpret_cast<f540>(base+0x2a5c20)(this);
    }

    decltype(std::declval<CCBlockLayer>().enableUI()) CCBlockLayer::enableUI() {
        using r541 = decltype(std::declval<CCBlockLayer>().enableUI());
        using f541 = r541(*)(CCBlockLayer*);
        return reinterpret_cast<f541>(base+0x2a5a90)(this);
    }

    decltype(std::declval<CCBlockLayer>().enterAnimFinished()) CCBlockLayer::enterAnimFinished() {
        using r542 = decltype(std::declval<CCBlockLayer>().enterAnimFinished());
        using f542 = r542(*)(CCBlockLayer*);
        return reinterpret_cast<f542>(base+0x2a5bb0)(this);
    }

    decltype(std::declval<CCBlockLayer>().enterLayer()) CCBlockLayer::enterLayer() {
        using r543 = decltype(std::declval<CCBlockLayer>().enterLayer());
        using f543 = r543(*)(CCBlockLayer*);
        return reinterpret_cast<f543>(base+0x2a5aa0)(this);
    }

    decltype(std::declval<CCBlockLayer>().exitLayer()) CCBlockLayer::exitLayer() {
        using r544 = decltype(std::declval<CCBlockLayer>().exitLayer());
        using f544 = r544(*)(CCBlockLayer*);
        return reinterpret_cast<f544>(base+0x2a5b40)(this);
    }

    decltype(std::declval<CCBlockLayer>().hideLayer(std::declval<bool>())) CCBlockLayer::hideLayer(bool p0) {
        using r545 = decltype(std::declval<CCBlockLayer>().hideLayer(std::declval<bool>()));
        using f545 = r545(*)(CCBlockLayer*, bool);
        return reinterpret_cast<f545>(base+0x2a5ba0)(this, p0);
    }

    decltype(std::declval<CCBlockLayer>().init()) CCBlockLayer::init() {
        using r546 = decltype(std::declval<CCBlockLayer>().init());
        using f546 = r546(*)(CCBlockLayer*);
        return reinterpret_cast<f546>(base+0x2a59c0)(this);
    }

    decltype(std::declval<CCBlockLayer>().layerHidden()) CCBlockLayer::layerHidden() {
        using r547 = decltype(std::declval<CCBlockLayer>().layerHidden());
        using f547 = r547(*)(CCBlockLayer*);
        return reinterpret_cast<f547>(base+0x2a5be0)(this);
    }

    decltype(std::declval<CCBlockLayer>().layerVisible()) CCBlockLayer::layerVisible() {
        using r548 = decltype(std::declval<CCBlockLayer>().layerVisible());
        using f548 = r548(*)(CCBlockLayer*);
        return reinterpret_cast<f548>(base+0x2a5bc0)(this);
    }

    decltype(std::declval<CCBlockLayer>().registerWithTouchDispatcher()) CCBlockLayer::registerWithTouchDispatcher() {
        using r549 = decltype(std::declval<CCBlockLayer>().registerWithTouchDispatcher());
        using f549 = r549(*)(CCBlockLayer*);
        return reinterpret_cast<f549>(base+0x2a5ad0)(this);
    }

    decltype(std::declval<CCBlockLayer>().showLayer(std::declval<bool>())) CCBlockLayer::showLayer(bool p0) {
        using r550 = decltype(std::declval<CCBlockLayer>().showLayer(std::declval<bool>()));
        using f550 = r550(*)(CCBlockLayer*, bool);
        return reinterpret_cast<f550>(base+0x2a5b90)(this, p0);
    }

    decltype(std::declval<CCCircleWave>().create(std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<bool>())) CCCircleWave::create(float p0, float p1, float p2, bool p3) {
        using r551 = decltype(std::declval<CCCircleWave>().create(std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<bool>()));
        using f551 = r551(*)(float, float, float, bool);
        return reinterpret_cast<f551>(base+0xbd270)(p0, p1, p2, p3);

    }

    decltype(std::declval<CCCircleWave>().create(std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<bool>(), std::declval<bool>())) CCCircleWave::create(float p0, float p1, float p2, bool p3, bool p4) {
        using r552 = decltype(std::declval<CCCircleWave>().create(std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<bool>(), std::declval<bool>()));
        using f552 = r552(*)(float, float, float, bool, bool);
        return reinterpret_cast<f552>(base+0xbd290)(p0, p1, p2, p3, p4);

    }

    decltype(std::declval<CCCircleWave>().init(std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<bool>(), std::declval<bool>())) CCCircleWave::init(float p0, float p1, float p2, bool p3, bool p4) {
        using r553 = decltype(std::declval<CCCircleWave>().init(std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<bool>(), std::declval<bool>()));
        using f553 = r553(*)(CCCircleWave*, float, float, float, bool, bool);
        return reinterpret_cast<f553>(base+0xbd380)(this, p0, p1, p2, p3, p4);
    }

    decltype(std::declval<CCCircleWave>().followObject(std::declval<cocos2d::CCNode*>(), std::declval<bool>())) CCCircleWave::followObject(cocos2d::CCNode* p0, bool p1) {
        using r554 = decltype(std::declval<CCCircleWave>().followObject(std::declval<cocos2d::CCNode*>(), std::declval<bool>()));
        using f554 = r554(*)(CCCircleWave*, cocos2d::CCNode*, bool);
        return reinterpret_cast<f554>(base+0xbd670)(this, p0, p1);
    }

    decltype(std::declval<CCCircleWave>().updatePosition(std::declval<float>())) CCCircleWave::updatePosition(float p0) {
        using r555 = decltype(std::declval<CCCircleWave>().updatePosition(std::declval<float>()));
        using f555 = r555(*)(CCCircleWave*, float);
        return reinterpret_cast<f555>(base+0xbd630)(this, p0);
    }

    decltype(std::declval<CCLightFlash>().create()) CCLightFlash::create() {
        using r556 = decltype(std::declval<CCLightFlash>().create());
        using f556 = r556(*)();
        return reinterpret_cast<f556>(base+0x295870)();

    }

    decltype(std::declval<CCLightFlash>().playEffect(std::declval<cocos2d::CCPoint>(), std::declval<cocos2d::_ccColor3B>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<bool>(), std::declval<bool>(), std::declval<float>())) CCLightFlash::playEffect(cocos2d::CCPoint p0, cocos2d::_ccColor3B p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float p12, float p13, float p14, float p15, int p16, bool p17, bool p18, float p19) {
        using r557 = decltype(std::declval<CCLightFlash>().playEffect(std::declval<cocos2d::CCPoint>(), std::declval<cocos2d::_ccColor3B>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<bool>(), std::declval<bool>(), std::declval<float>()));
        using f557 = r557(*)(CCLightFlash*, cocos2d::CCPoint, cocos2d::_ccColor3B, float, float, float, float, float, float, float, float, float, float, float, float, float, float, int, bool, bool, float);
        return reinterpret_cast<f557>(base+0x295900)(this, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19);
    }

    decltype(std::declval<CCMenuItemSpriteExtra>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCObject*>(), std::declval<cocos2d::SEL_MenuHandler>())) CCMenuItemSpriteExtra::create(cocos2d::CCNode* p0, cocos2d::CCNode* p1, cocos2d::CCObject* p2, cocos2d::SEL_MenuHandler p3) {
        using r558 = decltype(std::declval<CCMenuItemSpriteExtra>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCObject*>(), std::declval<cocos2d::SEL_MenuHandler>()));
        using f558 = r558(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
        return reinterpret_cast<f558>(base+0x1253c0)(p0, p1, p2, p3);

    }

    decltype(std::declval<CCMenuItemSpriteExtra>().setSizeMult(std::declval<float>())) CCMenuItemSpriteExtra::setSizeMult(float p0) {
        using r559 = decltype(std::declval<CCMenuItemSpriteExtra>().setSizeMult(std::declval<float>()));
        using f559 = r559(*)(CCMenuItemSpriteExtra*, float);
        return reinterpret_cast<f559>(base+0x1255e0)(this, p0);
    }

    CCMenuItemSpriteExtra::CCMenuItemSpriteExtra() {
        using r560 = CCMenuItemSpriteExtra*;
        using f560 = r560(*)(CCMenuItemSpriteExtra*);
        reinterpret_cast<f560>(base+0x32670)(this);
    }

    decltype(std::declval<CCMenuItemSpriteExtra>().init(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCObject*>(), std::declval<cocos2d::SEL_MenuHandler>())) CCMenuItemSpriteExtra::init(cocos2d::CCNode* p0, cocos2d::CCNode* p1, cocos2d::CCObject* p2, cocos2d::SEL_MenuHandler p3) {
        using r561 = decltype(std::declval<CCMenuItemSpriteExtra>().init(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCObject*>(), std::declval<cocos2d::SEL_MenuHandler>()));
        using f561 = r561(*)(CCMenuItemSpriteExtra*, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
        return reinterpret_cast<f561>(base+0x125450)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<CCMenuItemToggler>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCObject*>(), std::declval<cocos2d::SEL_MenuHandler>())) CCMenuItemToggler::create(cocos2d::CCNode* p0, cocos2d::CCNode* p1, cocos2d::CCObject* p2, cocos2d::SEL_MenuHandler p3) {
        using r562 = decltype(std::declval<CCMenuItemToggler>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCObject*>(), std::declval<cocos2d::SEL_MenuHandler>()));
        using f562 = r562(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
        return reinterpret_cast<f562>(base+0x38400)(p0, p1, p2, p3);

    }

    decltype(std::declval<CCMenuItemToggler>().setSizeMult(std::declval<float>())) CCMenuItemToggler::setSizeMult(float p0) {
        using r563 = decltype(std::declval<CCMenuItemToggler>().setSizeMult(std::declval<float>()));
        using f563 = r563(*)(CCMenuItemToggler*, float);
        return reinterpret_cast<f563>(base+0x38a40)(this, p0);
    }

    decltype(std::declval<CCMenuItemToggler>().toggle(std::declval<bool>())) CCMenuItemToggler::toggle(bool p0) {
        using r564 = decltype(std::declval<CCMenuItemToggler>().toggle(std::declval<bool>()));
        using f564 = r564(*)(CCMenuItemToggler*, bool);
        return reinterpret_cast<f564>(base+0x38950)(this, p0);
    }

    CCScrollLayerExt::~CCScrollLayerExt() {
        jumpDestructor(0x2359b0)
    }

    decltype(std::declval<CCScrollLayerExt>().visit()) CCScrollLayerExt::visit() {
        using r566 = decltype(std::declval<CCScrollLayerExt>().visit());
        using f566 = r566(*)(CCScrollLayerExt*);
        return reinterpret_cast<f566>(base+0x236550)(this);
    }

    decltype(std::declval<CCScrollLayerExt>().ccTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) CCScrollLayerExt::ccTouchBegan(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r567 = decltype(std::declval<CCScrollLayerExt>().ccTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f567 = r567(*)(CCScrollLayerExt*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f567>(base+0x235ef0)(this, p0, p1);
    }

    decltype(std::declval<CCScrollLayerExt>().ccTouchMoved(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) CCScrollLayerExt::ccTouchMoved(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r568 = decltype(std::declval<CCScrollLayerExt>().ccTouchMoved(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f568 = r568(*)(CCScrollLayerExt*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f568>(base+0x236300)(this, p0, p1);
    }

    decltype(std::declval<CCScrollLayerExt>().ccTouchEnded(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) CCScrollLayerExt::ccTouchEnded(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r569 = decltype(std::declval<CCScrollLayerExt>().ccTouchEnded(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f569 = r569(*)(CCScrollLayerExt*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f569>(base+0x236020)(this, p0, p1);
    }

    decltype(std::declval<CCScrollLayerExt>().ccTouchCancelled(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) CCScrollLayerExt::ccTouchCancelled(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r570 = decltype(std::declval<CCScrollLayerExt>().ccTouchCancelled(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f570 = r570(*)(CCScrollLayerExt*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f570>(base+0x2362a0)(this, p0, p1);
    }

    decltype(std::declval<CCScrollLayerExt>().registerWithTouchDispatcher()) CCScrollLayerExt::registerWithTouchDispatcher() {
        using r571 = decltype(std::declval<CCScrollLayerExt>().registerWithTouchDispatcher());
        using f571 = r571(*)(CCScrollLayerExt*);
        return reinterpret_cast<f571>(base+0x235eb0)(this);
    }

    decltype(std::declval<CCScrollLayerExt>().preVisitWithClippingRect(std::declval<cocos2d::CCRect>())) CCScrollLayerExt::preVisitWithClippingRect(cocos2d::CCRect p0) {
        using r572 = decltype(std::declval<CCScrollLayerExt>().preVisitWithClippingRect(std::declval<cocos2d::CCRect>()));
        using f572 = r572(*)(CCScrollLayerExt*, cocos2d::CCRect);
        return reinterpret_cast<f572>(base+0x2366a0)(this, p0);
    }

    decltype(std::declval<CCScrollLayerExt>().postVisit()) CCScrollLayerExt::postVisit() {
        using r573 = decltype(std::declval<CCScrollLayerExt>().postVisit());
        using f573 = r573(*)(CCScrollLayerExt*);
        return reinterpret_cast<f573>(base+0x236720)(this);
    }

    decltype(std::declval<CCScrollLayerExt>().moveToTop()) CCScrollLayerExt::moveToTop() {
        using r574 = decltype(std::declval<CCScrollLayerExt>().moveToTop());
        using f574 = r574(*)(CCScrollLayerExt*);
        return reinterpret_cast<f574>(base+0x235870)(this);
    }

    decltype(std::declval<CCScrollLayerExt>().moveToTopWithOffset(std::declval<float>())) CCScrollLayerExt::moveToTopWithOffset(float p0) {
        using r575 = decltype(std::declval<CCScrollLayerExt>().moveToTopWithOffset(std::declval<float>()));
        using f575 = r575(*)(CCScrollLayerExt*, float);
        return reinterpret_cast<f575>(base+0x2357d0)(this, p0);
    }

    decltype(std::declval<GManager>().save()) GManager::save() {
        using r576 = decltype(std::declval<GManager>().save());
        using f576 = r576(*)(GManager*);
        return reinterpret_cast<f576>(base+0x26f300)(this);
    }

    decltype(std::declval<GManager>().saveData(std::declval<DS_Dictionary*>(), std::declval<gd::string>())) GManager::saveData(DS_Dictionary* p0, gd::string p1) {
        using r577 = decltype(std::declval<GManager>().saveData(std::declval<DS_Dictionary*>(), std::declval<gd::string>()));
        using f577 = r577(*)(GManager*, DS_Dictionary*, gd::string);
        return reinterpret_cast<f577>(base+0x26f4b0)(this, p0, p1);
    }

    decltype(std::declval<GManager>().saveGMTo(std::declval<gd::string>())) GManager::saveGMTo(gd::string p0) {
        using r578 = decltype(std::declval<GManager>().saveGMTo(std::declval<gd::string>()));
        using f578 = r578(*)(GManager*, gd::string);
        return reinterpret_cast<f578>(base+0x26f3b0)(this, p0);
    }

    decltype(std::declval<GameLevelManager>().createNewLevel()) GameLevelManager::createNewLevel() {
        using r579 = decltype(std::declval<GameLevelManager>().createNewLevel());
        using f579 = r579(*)(GameLevelManager*);
        return reinterpret_cast<f579>(base+0x2b8180)(this);
    }

    decltype(std::declval<GameLevelManager>().sharedState()) GameLevelManager::sharedState() {
        using r580 = decltype(std::declval<GameLevelManager>().sharedState());
        using f580 = r580(*)();
        return reinterpret_cast<f580>(base+0x2a8340)();

    }

    decltype(std::declval<GameLevelManager>().getPageInfo(std::declval<char const*>())) GameLevelManager::getPageInfo(char const* p0) {
        using r581 = decltype(std::declval<GameLevelManager>().getPageInfo(std::declval<char const*>()));
        using f581 = r581(*)(GameLevelManager*, char const*);
        return reinterpret_cast<f581>(base+0x2c0050)(this, p0);
    }

    decltype(std::declval<GameLevelManager>().getStoredOnlineLevels(std::declval<char const*>())) GameLevelManager::getStoredOnlineLevels(char const* p0) {
        using r582 = decltype(std::declval<GameLevelManager>().getStoredOnlineLevels(std::declval<char const*>()));
        using f582 = r582(*)(GameLevelManager*, char const*);
        return reinterpret_cast<f582>(base+0x2bfe80)(this, p0);
    }

    decltype(std::declval<GameLevelManager>().getTopArtists(std::declval<int>(), std::declval<int>())) GameLevelManager::getTopArtists(int p0, int p1) {
        using r583 = decltype(std::declval<GameLevelManager>().getTopArtists(std::declval<int>(), std::declval<int>()));
        using f583 = r583(*)(GameLevelManager*, int, int);
        return reinterpret_cast<f583>(base+0x2ce3d0)(this, p0, p1);
    }

    decltype(std::declval<GameLevelManager>().getTopArtistsKey(std::declval<int>())) GameLevelManager::getTopArtistsKey(int p0) {
        using r584 = decltype(std::declval<GameLevelManager>().getTopArtistsKey(std::declval<int>()));
        using f584 = r584(*)(GameLevelManager*, int);
        return reinterpret_cast<f584>(base+0x2ce7a0)(this, p0);
    }

    decltype(std::declval<GameLevelManager>().makeTimeStamp(std::declval<char const*>())) GameLevelManager::makeTimeStamp(char const* p0) {
        using r585 = decltype(std::declval<GameLevelManager>().makeTimeStamp(std::declval<char const*>()));
        using f585 = r585(*)(GameLevelManager*, char const*);
        return reinterpret_cast<f585>(base+0x2bfd90)(this, p0);
    }

    decltype(std::declval<GameManager>().accountStatusChanged()) GameManager::accountStatusChanged() {
        using r586 = decltype(std::declval<GameManager>().accountStatusChanged());
        using f586 = r586(*)(GameManager*);
        return reinterpret_cast<f586>(base+0x1cdad0)(this);
    }

    decltype(std::declval<GameManager>().colorForIdx(std::declval<int>())) GameManager::colorForIdx(int p0) {
        using r587 = decltype(std::declval<GameManager>().colorForIdx(std::declval<int>()));
        using f587 = r587(*)(GameManager*, int);
        return reinterpret_cast<f587>(base+0x1cbc80)(this, p0);
    }

    decltype(std::declval<GameManager>().didExitPlayscene()) GameManager::didExitPlayscene() {
        using r588 = decltype(std::declval<GameManager>().didExitPlayscene());
        using f588 = r588(*)(GameManager*);
        return reinterpret_cast<f588>(base+0x1d0230)(this);
    }

    decltype(std::declval<GameManager>().doQuickSave()) GameManager::doQuickSave() {
        using r589 = decltype(std::declval<GameManager>().doQuickSave());
        using f589 = r589(*)(GameManager*);
        return reinterpret_cast<f589>(base+0x1d0200)(this);
    }

    decltype(std::declval<GameManager>().fadeInMusic(std::declval<char const*>())) GameManager::fadeInMusic(char const* p0) {
        using r590 = decltype(std::declval<GameManager>().fadeInMusic(std::declval<char const*>()));
        using f590 = r590(*)(GameManager*, char const*);
        return reinterpret_cast<f590>(base+0x1c2ff0)(this, p0);
    }

    decltype(std::declval<GameManager>().getBGTexture(std::declval<int>())) GameManager::getBGTexture(int p0) {
        using r591 = decltype(std::declval<GameManager>().getBGTexture(std::declval<int>()));
        using f591 = r591(*)(GameManager*, int);
        return reinterpret_cast<f591>(base+0x1cca00)(this, p0);
    }

    decltype(std::declval<GameManager>().getFontFile(std::declval<int>())) GameManager::getFontFile(int p0) {
        using r592 = decltype(std::declval<GameManager>().getFontFile(std::declval<int>()));
        using f592 = r592(*)(GameManager*, int);
        return reinterpret_cast<f592>(base+0x1cc5f0)(this, p0);
    }

    decltype(std::declval<GameManager>().getGameVariable(std::declval<char const*>())) GameManager::getGameVariable(char const* p0) {
        using r593 = decltype(std::declval<GameManager>().getGameVariable(std::declval<char const*>()));
        using f593 = r593(*)(GameManager*, char const*);
        return reinterpret_cast<f593>(base+0x1cccd0)(this, p0);
    }

    decltype(std::declval<GameManager>().getIntGameVariable(std::declval<char const*>())) GameManager::getIntGameVariable(char const* p0) {
        using r594 = decltype(std::declval<GameManager>().getIntGameVariable(std::declval<char const*>()));
        using f594 = r594(*)(GameManager*, char const*);
        return reinterpret_cast<f594>(base+0x1cd1d0)(this, p0);
    }

    decltype(std::declval<GameManager>().getUGV(std::declval<char const*>())) GameManager::getUGV(char const* p0) {
        using r595 = decltype(std::declval<GameManager>().getUGV(std::declval<char const*>()));
        using f595 = r595(*)(GameManager*, char const*);
        return reinterpret_cast<f595>(base+0x1ccfa0)(this, p0);
    }

    decltype(std::declval<GameManager>().loadDeathEffect(std::declval<int>())) GameManager::loadDeathEffect(int p0) {
        using r596 = decltype(std::declval<GameManager>().loadDeathEffect(std::declval<int>()));
        using f596 = r596(*)(GameManager*, int);
        return reinterpret_cast<f596>(base+0x1cc690)(this, p0);
    }

    decltype(std::declval<GameManager>().loadFont(std::declval<int>())) GameManager::loadFont(int p0) {
        using r597 = decltype(std::declval<GameManager>().loadFont(std::declval<int>()));
        using f597 = r597(*)(GameManager*, int);
        return reinterpret_cast<f597>(base+0x1cc550)(this, p0);
    }

    decltype(std::declval<GameManager>().reloadAll(std::declval<bool>(), std::declval<bool>(), std::declval<bool>())) GameManager::reloadAll(bool p0, bool p1, bool p2) {
        using r598 = decltype(std::declval<GameManager>().reloadAll(std::declval<bool>(), std::declval<bool>(), std::declval<bool>()));
        using f598 = r598(*)(GameManager*, bool, bool, bool);
        return reinterpret_cast<f598>(base+0x1d08a0)(this, p0, p1, p2);
    }

    decltype(std::declval<GameManager>().reloadAllStep5()) GameManager::reloadAllStep5() {
        using r599 = decltype(std::declval<GameManager>().reloadAllStep5());
        using f599 = r599(*)(GameManager*);
        return reinterpret_cast<f599>(base+0x1d0b00)(this);
    }

    decltype(std::declval<GameManager>().reportPercentageForLevel(std::declval<int>(), std::declval<int>(), std::declval<bool>())) GameManager::reportPercentageForLevel(int p0, int p1, bool p2) {
        using r600 = decltype(std::declval<GameManager>().reportPercentageForLevel(std::declval<int>(), std::declval<int>(), std::declval<bool>()));
        using f600 = r600(*)(GameManager*, int, int, bool);
        return reinterpret_cast<f600>(base+0x1c5b00)(this, p0, p1, p2);
    }

    decltype(std::declval<GameManager>().setGameVariable(std::declval<char const*>(), std::declval<bool>())) GameManager::setGameVariable(char const* p0, bool p1) {
        using r601 = decltype(std::declval<GameManager>().setGameVariable(std::declval<char const*>(), std::declval<bool>()));
        using f601 = r601(*)(GameManager*, char const*, bool);
        return reinterpret_cast<f601>(base+0x1cca80)(this, p0, p1);
    }

    decltype(std::declval<GameManager>().setIntGameVariable(std::declval<char const*>(), std::declval<int>())) GameManager::setIntGameVariable(char const* p0, int p1) {
        using r602 = decltype(std::declval<GameManager>().setIntGameVariable(std::declval<char const*>(), std::declval<int>()));
        using f602 = r602(*)(GameManager*, char const*, int);
        return reinterpret_cast<f602>(base+0x1cd0e0)(this, p0, p1);
    }

    decltype(std::declval<GameManager>().setUGV(std::declval<char const*>(), std::declval<bool>())) GameManager::setUGV(char const* p0, bool p1) {
        using r603 = decltype(std::declval<GameManager>().setUGV(std::declval<char const*>(), std::declval<bool>()));
        using f603 = r603(*)(GameManager*, char const*, bool);
        return reinterpret_cast<f603>(base+0x1cce50)(this, p0, p1);
    }

    decltype(std::declval<GameManager>().sharedState()) GameManager::sharedState() {
        using r604 = decltype(std::declval<GameManager>().sharedState());
        using f604 = r604(*)();
        return reinterpret_cast<f604>(base+0x1c2b30)();

    }

    GameManager::~GameManager() {
        jumpDestructor(0x1d0e00)
    }

    decltype(std::declval<GameManager>().getGTexture(std::declval<int>())) GameManager::getGTexture(int p0) {
        using r606 = decltype(std::declval<GameManager>().getGTexture(std::declval<int>()));
        using f606 = r606(*)(GameManager*, int);
        return reinterpret_cast<f606>(base+0x1cca40)(this, p0);
    }

    decltype(std::declval<GameManager>().init()) GameManager::init() {
        using r607 = decltype(std::declval<GameManager>().init());
        using f607 = r607(*)(GameManager*);
        return reinterpret_cast<f607>(base+0x1c2ec0)(this);
    }

    decltype(std::declval<GameManager>().reportAchievementWithID(std::declval<char const*>(), std::declval<int>(), std::declval<bool>())) GameManager::reportAchievementWithID(char const* p0, int p1, bool p2) {
        using r608 = decltype(std::declval<GameManager>().reportAchievementWithID(std::declval<char const*>(), std::declval<int>(), std::declval<bool>()));
        using f608 = r608(*)(GameManager*, char const*, int, bool);
        return reinterpret_cast<f608>(base+0x1c6460)(this, p0, p1, p2);
    }

    decltype(std::declval<GameManager>().resolutionForKey(std::declval<int>())) GameManager::resolutionForKey(int p0) {
        using r609 = decltype(std::declval<GameManager>().resolutionForKey(std::declval<int>()));
        using f609 = r609(*)(GameManager*, int);
        return reinterpret_cast<f609>(base+0x1d0b40)(this, p0);
    }

    decltype(std::declval<GameManager>().update(std::declval<float>())) GameManager::update(float p0) {
        using r610 = decltype(std::declval<GameManager>().update(std::declval<float>()));
        using f610 = r610(*)(GameManager*, float);
        return reinterpret_cast<f610>(base+0x1d0270)(this, p0);
    }

    decltype(std::declval<GameSoundManager>().disableMetering()) GameSoundManager::disableMetering() {
        using r611 = decltype(std::declval<GameSoundManager>().disableMetering());
        using f611 = r611(*)(GameSoundManager*);
        return reinterpret_cast<f611>(base+0x362d80)(this);
    }

    decltype(std::declval<GameSoundManager>().enableMetering()) GameSoundManager::enableMetering() {
        using r612 = decltype(std::declval<GameSoundManager>().enableMetering());
        using f612 = r612(*)(GameSoundManager*);
        return reinterpret_cast<f612>(base+0x362d00)(this);
    }

    decltype(std::declval<GameSoundManager>().getMeteringValue()) GameSoundManager::getMeteringValue() {
        using r613 = decltype(std::declval<GameSoundManager>().getMeteringValue());
        using f613 = r613(*)(GameSoundManager*);
        return reinterpret_cast<f613>(base+0x362db0)(this);
    }

    decltype(std::declval<GameSoundManager>().playBackgroundMusic(std::declval<gd::string>(), std::declval<bool>(), std::declval<bool>())) GameSoundManager::playBackgroundMusic(gd::string p0, bool p1, bool p2) {
        using r614 = decltype(std::declval<GameSoundManager>().playBackgroundMusic(std::declval<gd::string>(), std::declval<bool>(), std::declval<bool>()));
        using f614 = r614(*)(GameSoundManager*, gd::string, bool, bool);
        return reinterpret_cast<f614>(base+0x362070)(this, p0, p1, p2);
    }

    decltype(std::declval<GameSoundManager>().playEffect(std::declval<gd::string>(), std::declval<float>(), std::declval<float>(), std::declval<float>())) GameSoundManager::playEffect(gd::string p0, float p1, float p2, float p3) {
        using r615 = decltype(std::declval<GameSoundManager>().playEffect(std::declval<gd::string>(), std::declval<float>(), std::declval<float>(), std::declval<float>()));
        using f615 = r615(*)(GameSoundManager*, gd::string, float, float, float);
        return reinterpret_cast<f615>(base+0x3623d0)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<GameSoundManager>().sharedManager()) GameSoundManager::sharedManager() {
        using r616 = decltype(std::declval<GameSoundManager>().sharedManager());
        using f616 = r616(*)(GameSoundManager*);
        return reinterpret_cast<f616>(base+0x3610f0)(this);
    }

    decltype(std::declval<GameSoundManager>().stopBackgroundMusic()) GameSoundManager::stopBackgroundMusic() {
        using r617 = decltype(std::declval<GameSoundManager>().stopBackgroundMusic());
        using f617 = r617(*)(GameSoundManager*);
        return reinterpret_cast<f617>(base+0x362130)(this);
    }

    GameSoundManager::~GameSoundManager() {
        jumpDestructor(0x362c00)
    }

    decltype(std::declval<GameStatsManager>().awardCurrencyForLevel(std::declval<GJGameLevel*>())) GameStatsManager::awardCurrencyForLevel(GJGameLevel* p0) {
        using r619 = decltype(std::declval<GameStatsManager>().awardCurrencyForLevel(std::declval<GJGameLevel*>()));
        using f619 = r619(*)(GameStatsManager*, GJGameLevel*);
        return reinterpret_cast<f619>(base+0x43600)(this, p0);
    }

    decltype(std::declval<GameStatsManager>().awardDiamondsForLevel(std::declval<GJGameLevel*>())) GameStatsManager::awardDiamondsForLevel(GJGameLevel* p0) {
        using r620 = decltype(std::declval<GameStatsManager>().awardDiamondsForLevel(std::declval<GJGameLevel*>()));
        using f620 = r620(*)(GameStatsManager*, GJGameLevel*);
        return reinterpret_cast<f620>(base+0x43c60)(this, p0);
    }

    decltype(std::declval<GameStatsManager>().awardSecretKey()) GameStatsManager::awardSecretKey() {
        using r621 = decltype(std::declval<GameStatsManager>().awardSecretKey());
        using f621 = r621(*)(GameStatsManager*);
        return reinterpret_cast<f621>(base+0x4b1e0)(this);
    }

    decltype(std::declval<GameStatsManager>().getSecretCoinKey(std::declval<char const*>())) GameStatsManager::getSecretCoinKey(char const* p0) {
        using r622 = decltype(std::declval<GameStatsManager>().getSecretCoinKey(std::declval<char const*>()));
        using f622 = r622(*)(GameStatsManager*, char const*);
        return reinterpret_cast<f622>(base+0x429f0)(this, p0);
    }

    decltype(std::declval<GameStatsManager>().getStat(std::declval<char const*>())) GameStatsManager::getStat(char const* p0) {
        using r623 = decltype(std::declval<GameStatsManager>().getStat(std::declval<char const*>()));
        using f623 = r623(*)(GameStatsManager*, char const*);
        return reinterpret_cast<f623>(base+0x3d310)(this, p0);
    }

    decltype(std::declval<GameStatsManager>().hasPendingUserCoin(std::declval<char const*>())) GameStatsManager::hasPendingUserCoin(char const* p0) {
        using r624 = decltype(std::declval<GameStatsManager>().hasPendingUserCoin(std::declval<char const*>()));
        using f624 = r624(*)(GameStatsManager*, char const*);
        return reinterpret_cast<f624>(base+0x42730)(this, p0);
    }

    decltype(std::declval<GameStatsManager>().hasSecretCoin(std::declval<char const*>())) GameStatsManager::hasSecretCoin(char const* p0) {
        using r625 = decltype(std::declval<GameStatsManager>().hasSecretCoin(std::declval<char const*>()));
        using f625 = r625(*)(GameStatsManager*, char const*);
        return reinterpret_cast<f625>(base+0x40730)(this, p0);
    }

    decltype(std::declval<GameStatsManager>().hasUserCoin(std::declval<char const*>())) GameStatsManager::hasUserCoin(char const* p0) {
        using r626 = decltype(std::declval<GameStatsManager>().hasUserCoin(std::declval<char const*>()));
        using f626 = r626(*)(GameStatsManager*, char const*);
        return reinterpret_cast<f626>(base+0x427e0)(this, p0);
    }

    decltype(std::declval<GameStatsManager>().incrementStat(std::declval<char const*>())) GameStatsManager::incrementStat(char const* p0) {
        using r627 = decltype(std::declval<GameStatsManager>().incrementStat(std::declval<char const*>()));
        using f627 = r627(*)(GameStatsManager*, char const*);
        return reinterpret_cast<f627>(base+0x3d6d0)(this, p0);
    }

    decltype(std::declval<GameStatsManager>().incrementStat(std::declval<char const*>(), std::declval<int>())) GameStatsManager::incrementStat(char const* p0, int p1) {
        using r628 = decltype(std::declval<GameStatsManager>().incrementStat(std::declval<char const*>(), std::declval<int>()));
        using f628 = r628(*)(GameStatsManager*, char const*, int);
        return reinterpret_cast<f628>(base+0x3d6e0)(this, p0, p1);
    }

    decltype(std::declval<GameStatsManager>().sharedState()) GameStatsManager::sharedState() {
        using r629 = decltype(std::declval<GameStatsManager>().sharedState());
        using f629 = r629(*)(GameStatsManager*);
        return reinterpret_cast<f629>(base+0x38f20)(this);
    }

    decltype(std::declval<GameStatsManager>().storePendingUserCoin(std::declval<char const*>())) GameStatsManager::storePendingUserCoin(char const* p0) {
        using r630 = decltype(std::declval<GameStatsManager>().storePendingUserCoin(std::declval<char const*>()));
        using f630 = r630(*)(GameStatsManager*, char const*);
        return reinterpret_cast<f630>(base+0x42940)(this, p0);
    }

    decltype(std::declval<GameStatsManager>().storeSecretCoin(std::declval<char const*>())) GameStatsManager::storeSecretCoin(char const* p0) {
        using r631 = decltype(std::declval<GameStatsManager>().storeSecretCoin(std::declval<char const*>()));
        using f631 = r631(*)(GameStatsManager*, char const*);
        return reinterpret_cast<f631>(base+0x42a10)(this, p0);
    }

    decltype(std::declval<GameStatsManager>().storeUserCoin(std::declval<char const*>())) GameStatsManager::storeUserCoin(char const* p0) {
        using r632 = decltype(std::declval<GameStatsManager>().storeUserCoin(std::declval<char const*>()));
        using f632 = r632(*)(GameStatsManager*, char const*);
        return reinterpret_cast<f632>(base+0x42890)(this, p0);
    }

    decltype(std::declval<LocalLevelManager>().sharedState()) LocalLevelManager::sharedState() {
        using r633 = decltype(std::declval<LocalLevelManager>().sharedState());
        using f633 = r633(*)();
        return reinterpret_cast<f633>(base+0x35dd60)();

    }

    decltype(std::declval<MusicDownloadManager>().incrementPriorityForSong(std::declval<int>())) MusicDownloadManager::incrementPriorityForSong(int p0) {
        using r634 = decltype(std::declval<MusicDownloadManager>().incrementPriorityForSong(std::declval<int>()));
        using f634 = r634(*)(MusicDownloadManager*, int);
        return reinterpret_cast<f634>(base+0x2ef750)(this, p0);
    }

    decltype(std::declval<MusicDownloadManager>().sharedState()) MusicDownloadManager::sharedState() {
        using r635 = decltype(std::declval<MusicDownloadManager>().sharedState());
        using f635 = r635(*)();
        return reinterpret_cast<f635>(base+0x2ee4c0)();

    }

    decltype(std::declval<ObjectToolbox>().init()) ObjectToolbox::init() {
        using r636 = decltype(std::declval<ObjectToolbox>().init());
        using f636 = r636(*)(ObjectToolbox*);
        return reinterpret_cast<f636>(base+0x3b2d80)(this);
    }

    decltype(std::declval<ObjectToolbox>().intKeyToFrame(std::declval<int>())) ObjectToolbox::intKeyToFrame(int p0) {
        using r637 = decltype(std::declval<ObjectToolbox>().intKeyToFrame(std::declval<int>()));
        using f637 = r637(*)(ObjectToolbox*, int);
        return reinterpret_cast<f637>(base+0x4173b0)(this, p0);
    }

    decltype(std::declval<ObjectToolbox>().sharedState()) ObjectToolbox::sharedState() {
        using r638 = decltype(std::declval<ObjectToolbox>().sharedState());
        using f638 = r638(*)();
        return reinterpret_cast<f638>(base+0x3b2bc0)();

    }

    decltype(std::declval<PlatformToolbox>().hideCursor()) PlatformToolbox::hideCursor() {
        using r639 = decltype(std::declval<PlatformToolbox>().hideCursor());
        using f639 = r639(*)(PlatformToolbox*);
        return reinterpret_cast<f639>(base+0x27c340)(this);
    }

    decltype(std::declval<PlatformToolbox>().showCursor()) PlatformToolbox::showCursor() {
        using r640 = decltype(std::declval<PlatformToolbox>().showCursor());
        using f640 = r640(*)(PlatformToolbox*);
        return reinterpret_cast<f640>(base+0x27c360)(this);
    }

    decltype(std::declval<GJEffectManager>().init()) GJEffectManager::init() {
        using r641 = decltype(std::declval<GJEffectManager>().init());
        using f641 = r641(*)(GJEffectManager*);
        return reinterpret_cast<f641>(base+0x180230)(this);
    }

    decltype(std::declval<GJEffectManager>().activeColorForIndex(std::declval<int>())) GJEffectManager::activeColorForIndex(int p0) {
        using r642 = decltype(std::declval<GJEffectManager>().activeColorForIndex(std::declval<int>()));
        using f642 = r642(*)(GJEffectManager*, int);
        return reinterpret_cast<f642>(base+0x180cb0)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().activeOpacityForIndex(std::declval<int>())) GJEffectManager::activeOpacityForIndex(int p0) {
        using r643 = decltype(std::declval<GJEffectManager>().activeOpacityForIndex(std::declval<int>()));
        using f643 = r643(*)(GJEffectManager*, int);
        return reinterpret_cast<f643>(base+0x180e10)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().addAllInheritedColorActions(std::declval<cocos2d::CCArray*>())) GJEffectManager::addAllInheritedColorActions(cocos2d::CCArray* p0) {
        using r644 = decltype(std::declval<GJEffectManager>().addAllInheritedColorActions(std::declval<cocos2d::CCArray*>()));
        using f644 = r644(*)(GJEffectManager*, cocos2d::CCArray*);
        return reinterpret_cast<f644>(base+0x1817a0)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().addGroupPulseEffect(std::declval<PulseEffectAction*>())) GJEffectManager::addGroupPulseEffect(PulseEffectAction* p0) {
        using r645 = decltype(std::declval<GJEffectManager>().addGroupPulseEffect(std::declval<PulseEffectAction*>()));
        using f645 = r645(*)(GJEffectManager*, PulseEffectAction*);
        return reinterpret_cast<f645>(base+0x184c10)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().calculateBaseActiveColors()) GJEffectManager::calculateBaseActiveColors() {
        using r646 = decltype(std::declval<GJEffectManager>().calculateBaseActiveColors());
        using f646 = r646(*)(GJEffectManager*);
        return reinterpret_cast<f646>(base+0x180f70)(this);
    }

    decltype(std::declval<GJEffectManager>().calculateInheritedColor(std::declval<int>(), std::declval<ColorAction*>())) GJEffectManager::calculateInheritedColor(int p0, ColorAction* p1) {
        using r647 = decltype(std::declval<GJEffectManager>().calculateInheritedColor(std::declval<int>(), std::declval<ColorAction*>()));
        using f647 = r647(*)(GJEffectManager*, int, ColorAction*);
        return reinterpret_cast<f647>(base+0x1818f0)(this, p0, p1);
    }

    decltype(std::declval<GJEffectManager>().calculateLightBGColor(std::declval<cocos2d::_ccColor3B>())) GJEffectManager::calculateLightBGColor(cocos2d::_ccColor3B p0) {
        using r648 = decltype(std::declval<GJEffectManager>().calculateLightBGColor(std::declval<cocos2d::_ccColor3B>()));
        using f648 = r648(*)(GJEffectManager*, cocos2d::_ccColor3B);
        return reinterpret_cast<f648>(base+0x185b90)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().colorActionChanged(std::declval<ColorAction*>())) GJEffectManager::colorActionChanged(ColorAction* p0) {
        using r649 = decltype(std::declval<GJEffectManager>().colorActionChanged(std::declval<ColorAction*>()));
        using f649 = r649(*)(GJEffectManager*, ColorAction*);
        return reinterpret_cast<f649>(base+0x181dc0)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().colorExists(std::declval<int>())) GJEffectManager::colorExists(int p0) {
        using r650 = decltype(std::declval<GJEffectManager>().colorExists(std::declval<int>()));
        using f650 = r650(*)(GJEffectManager*, int);
        return reinterpret_cast<f650>(base+0x181da0)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().colorForEffect(std::declval<cocos2d::_ccColor3B>(), std::declval<cocos2d::_ccHSVValue>())) GJEffectManager::colorForEffect(cocos2d::_ccColor3B p0, cocos2d::_ccHSVValue p1) {
        using r651 = decltype(std::declval<GJEffectManager>().colorForEffect(std::declval<cocos2d::_ccColor3B>(), std::declval<cocos2d::_ccHSVValue>()));
        using f651 = r651(*)(GJEffectManager*, cocos2d::_ccColor3B, cocos2d::_ccHSVValue);
        return reinterpret_cast<f651>(base+0x182650)(this, p0, p1);
    }

    decltype(std::declval<GJEffectManager>().colorForGroupID(std::declval<int>(), std::declval<cocos2d::_ccColor3B const&>(), std::declval<bool>())) GJEffectManager::colorForGroupID(int p0, cocos2d::_ccColor3B const& p1, bool p2) {
        using r652 = decltype(std::declval<GJEffectManager>().colorForGroupID(std::declval<int>(), std::declval<cocos2d::_ccColor3B const&>(), std::declval<bool>()));
        using f652 = r652(*)(GJEffectManager*, int, cocos2d::_ccColor3B const&, bool);
        return reinterpret_cast<f652>(base+0x184f90)(this, p0, p1, p2);
    }

    decltype(std::declval<GJEffectManager>().colorForIndex(std::declval<int>())) GJEffectManager::colorForIndex(int p0) {
        using r653 = decltype(std::declval<GJEffectManager>().colorForIndex(std::declval<int>()));
        using f653 = r653(*)(GJEffectManager*, int);
        return reinterpret_cast<f653>(base+0x180ad0)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().colorForPulseEffect(std::declval<cocos2d::_ccColor3B const&>(), std::declval<PulseEffectAction*>())) GJEffectManager::colorForPulseEffect(cocos2d::_ccColor3B const& p0, PulseEffectAction* p1) {
        using r654 = decltype(std::declval<GJEffectManager>().colorForPulseEffect(std::declval<cocos2d::_ccColor3B const&>(), std::declval<PulseEffectAction*>()));
        using f654 = r654(*)(GJEffectManager*, cocos2d::_ccColor3B const&, PulseEffectAction*);
        return reinterpret_cast<f654>(base+0x181bf0)(this, p0, p1);
    }

    decltype(std::declval<GJEffectManager>().countChangedForItem(std::declval<int>())) GJEffectManager::countChangedForItem(int p0) {
        using r655 = decltype(std::declval<GJEffectManager>().countChangedForItem(std::declval<int>()));
        using f655 = r655(*)(GJEffectManager*, int);
        return reinterpret_cast<f655>(base+0x185a40)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().countForItem(std::declval<int>())) GJEffectManager::countForItem(int p0) {
        using r656 = decltype(std::declval<GJEffectManager>().countForItem(std::declval<int>()));
        using f656 = r656(*)(GJEffectManager*, int);
        return reinterpret_cast<f656>(base+0x185a10)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().create()) GJEffectManager::create() {
        using r657 = decltype(std::declval<GJEffectManager>().create());
        using f657 = r657(*)();
        return reinterpret_cast<f657>(base+0x1800f0)();

    }

    decltype(std::declval<GJEffectManager>().createFollowCommand(std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<int>(), std::declval<bool>(), std::declval<int>())) GJEffectManager::createFollowCommand(float p0, float p1, float p2, int p3, int p4, bool p5, int p6) {
        using r658 = decltype(std::declval<GJEffectManager>().createFollowCommand(std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<int>(), std::declval<bool>(), std::declval<int>()));
        using f658 = r658(*)(GJEffectManager*, float, float, float, int, int, bool, int);
        return reinterpret_cast<f658>(base+0x182ed0)(this, p0, p1, p2, p3, p4, p5, p6);
    }

    decltype(std::declval<GJEffectManager>().createMoveCommand(std::declval<cocos2d::CCPoint>(), std::declval<int>(), std::declval<float>(), std::declval<int>(), std::declval<float>(), std::declval<bool>(), std::declval<bool>(), std::declval<int>())) GJEffectManager::createMoveCommand(cocos2d::CCPoint p0, int p1, float p2, int p3, float p4, bool p5, bool p6, int p7) {
        using r659 = decltype(std::declval<GJEffectManager>().createMoveCommand(std::declval<cocos2d::CCPoint>(), std::declval<int>(), std::declval<float>(), std::declval<int>(), std::declval<float>(), std::declval<bool>(), std::declval<bool>(), std::declval<int>()));
        using f659 = r659(*)(GJEffectManager*, cocos2d::CCPoint, int, float, int, float, bool, bool, int);
        return reinterpret_cast<f659>(base+0x182cc0)(this, p0, p1, p2, p3, p4, p5, p6, p7);
    }

    decltype(std::declval<GJEffectManager>().createPlayerFollowCommand(std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<int>())) GJEffectManager::createPlayerFollowCommand(float p0, float p1, int p2, float p3, float p4, int p5, int p6) {
        using r660 = decltype(std::declval<GJEffectManager>().createPlayerFollowCommand(std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<int>()));
        using f660 = r660(*)(GJEffectManager*, float, float, int, float, float, int, int);
        return reinterpret_cast<f660>(base+0x182fe0)(this, p0, p1, p2, p3, p4, p5, p6);
    }

    decltype(std::declval<GJEffectManager>().createRotateCommand(std::declval<int>(), std::declval<float>(), std::declval<int>(), std::declval<int>(), std::declval<int>(), std::declval<float>(), std::declval<bool>(), std::declval<int>())) GJEffectManager::createRotateCommand(int p0, float p1, int p2, int p3, int p4, float p5, bool p6, int p7) {
        using r661 = decltype(std::declval<GJEffectManager>().createRotateCommand(std::declval<int>(), std::declval<float>(), std::declval<int>(), std::declval<int>(), std::declval<int>(), std::declval<float>(), std::declval<bool>(), std::declval<int>()));
        using f661 = r661(*)(GJEffectManager*, int, float, int, int, int, float, bool, int);
        return reinterpret_cast<f661>(base+0x182df0)(this, p0, p1, p2, p3, p4, p5, p6, p7);
    }

    decltype(std::declval<GJEffectManager>().getAllColorActions()) GJEffectManager::getAllColorActions() {
        using r662 = decltype(std::declval<GJEffectManager>().getAllColorActions());
        using f662 = r662(*)(GJEffectManager*);
        return reinterpret_cast<f662>(base+0x180980)(this);
    }

    decltype(std::declval<GJEffectManager>().getAllColorSprites()) GJEffectManager::getAllColorSprites() {
        using r663 = decltype(std::declval<GJEffectManager>().getAllColorSprites());
        using f663 = r663(*)(GJEffectManager*);
        return reinterpret_cast<f663>(base+0x1809e0)(this);
    }

    decltype(std::declval<GJEffectManager>().getColorAction(std::declval<int>())) GJEffectManager::getColorAction(int p0) {
        using r664 = decltype(std::declval<GJEffectManager>().getColorAction(std::declval<int>()));
        using f664 = r664(*)(GJEffectManager*, int);
        return reinterpret_cast<f664>(base+0x180b00)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().getColorSprite(std::declval<int>())) GJEffectManager::getColorSprite(int p0) {
        using r665 = decltype(std::declval<GJEffectManager>().getColorSprite(std::declval<int>()));
        using f665 = r665(*)(GJEffectManager*, int);
        return reinterpret_cast<f665>(base+0x180d00)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().getCurrentStateString()) GJEffectManager::getCurrentStateString() {
        using r666 = decltype(std::declval<GJEffectManager>().getCurrentStateString());
        using f666 = r666(*)(GJEffectManager*);
        return reinterpret_cast<f666>(base+0x1867e0)(this);
    }

    decltype(std::declval<GJEffectManager>().getLoadedMoveOffset()) GJEffectManager::getLoadedMoveOffset() {
        using r667 = decltype(std::declval<GJEffectManager>().getLoadedMoveOffset());
        using f667 = r667(*)(GJEffectManager*);
        return reinterpret_cast<f667>(base+0x184390)(this);
    }

    decltype(std::declval<GJEffectManager>().getMixedColor(std::declval<cocos2d::_ccColor3B>(), std::declval<cocos2d::_ccColor3B>(), std::declval<float>())) GJEffectManager::getMixedColor(cocos2d::_ccColor3B p0, cocos2d::_ccColor3B p1, float p2) {
        using r668 = decltype(std::declval<GJEffectManager>().getMixedColor(std::declval<cocos2d::_ccColor3B>(), std::declval<cocos2d::_ccColor3B>(), std::declval<float>()));
        using f668 = r668(*)(GJEffectManager*, cocos2d::_ccColor3B, cocos2d::_ccColor3B, float);
        return reinterpret_cast<f668>(base+0x185d30)(this, p0, p1, p2);
    }

    decltype(std::declval<GJEffectManager>().getOpacityActionForGroup(std::declval<int>())) GJEffectManager::getOpacityActionForGroup(int p0) {
        using r669 = decltype(std::declval<GJEffectManager>().getOpacityActionForGroup(std::declval<int>()));
        using f669 = r669(*)(GJEffectManager*, int);
        return reinterpret_cast<f669>(base+0x1845b0)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().getSaveString()) GJEffectManager::getSaveString() {
        using r670 = decltype(std::declval<GJEffectManager>().getSaveString());
        using f670 = r670(*)(GJEffectManager*);
        return reinterpret_cast<f670>(base+0x185e90)(this);
    }

    decltype(std::declval<GJEffectManager>().handleObjectCollision(std::declval<bool>(), std::declval<int>(), std::declval<int>())) GJEffectManager::handleObjectCollision(bool p0, int p1, int p2) {
        using r671 = decltype(std::declval<GJEffectManager>().handleObjectCollision(std::declval<bool>(), std::declval<int>(), std::declval<int>()));
        using f671 = r671(*)(GJEffectManager*, bool, int, int);
        return reinterpret_cast<f671>(base+0x1828f0)(this, p0, p1, p2);
    }

    decltype(std::declval<GJEffectManager>().hasActiveDualTouch()) GJEffectManager::hasActiveDualTouch() {
        using r672 = decltype(std::declval<GJEffectManager>().hasActiveDualTouch());
        using f672 = r672(*)(GJEffectManager*);
        return reinterpret_cast<f672>(base+0x185540)(this);
    }

    decltype(std::declval<GJEffectManager>().hasBeenTriggered(std::declval<int>())) GJEffectManager::hasBeenTriggered(int p0) {
        using r673 = decltype(std::declval<GJEffectManager>().hasBeenTriggered(std::declval<int>()));
        using f673 = r673(*)(GJEffectManager*, int);
        return reinterpret_cast<f673>(base+0x1853b0)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().hasPulseEffectForGroupID(std::declval<int>())) GJEffectManager::hasPulseEffectForGroupID(int p0) {
        using r674 = decltype(std::declval<GJEffectManager>().hasPulseEffectForGroupID(std::declval<int>()));
        using f674 = r674(*)(GJEffectManager*, int);
        return reinterpret_cast<f674>(base+0x184f60)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().isGroupEnabled(std::declval<int>())) GJEffectManager::isGroupEnabled(int p0) {
        using r675 = decltype(std::declval<GJEffectManager>().isGroupEnabled(std::declval<int>()));
        using f675 = r675(*)(GJEffectManager*, int);
        return reinterpret_cast<f675>(base+0x1853d0)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().keyForGroupIDColor(std::declval<int>(), std::declval<cocos2d::_ccColor3B const&>(), std::declval<bool>())) GJEffectManager::keyForGroupIDColor(int p0, cocos2d::_ccColor3B const& p1, bool p2) {
        using r676 = decltype(std::declval<GJEffectManager>().keyForGroupIDColor(std::declval<int>(), std::declval<cocos2d::_ccColor3B const&>(), std::declval<bool>()));
        using f676 = r676(*)(GJEffectManager*, int, cocos2d::_ccColor3B const&, bool);
        return reinterpret_cast<f676>(base+0x184c90)(this, p0, p1, p2);
    }

    decltype(std::declval<GJEffectManager>().loadState(std::declval<gd::string>())) GJEffectManager::loadState(gd::string p0) {
        using r677 = decltype(std::declval<GJEffectManager>().loadState(std::declval<gd::string>()));
        using f677 = r677(*)(GJEffectManager*, gd::string);
        return reinterpret_cast<f677>(base+0x188db0)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().objectsCollided(std::declval<int>(), std::declval<int>())) GJEffectManager::objectsCollided(int p0, int p1) {
        using r678 = decltype(std::declval<GJEffectManager>().objectsCollided(std::declval<int>(), std::declval<int>()));
        using f678 = r678(*)(GJEffectManager*, int, int);
        return reinterpret_cast<f678>(base+0x182a00)(this, p0, p1);
    }

    decltype(std::declval<GJEffectManager>().opacityForIndex(std::declval<int>())) GJEffectManager::opacityForIndex(int p0) {
        using r679 = decltype(std::declval<GJEffectManager>().opacityForIndex(std::declval<int>()));
        using f679 = r679(*)(GJEffectManager*, int);
        return reinterpret_cast<f679>(base+0x180c80)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().opacityModForGroup(std::declval<int>())) GJEffectManager::opacityModForGroup(int p0) {
        using r680 = decltype(std::declval<GJEffectManager>().opacityModForGroup(std::declval<int>()));
        using f680 = r680(*)(GJEffectManager*, int);
        return reinterpret_cast<f680>(base+0x184740)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().playerButton(std::declval<bool>(), std::declval<bool>())) GJEffectManager::playerButton(bool p0, bool p1) {
        using r681 = decltype(std::declval<GJEffectManager>().playerButton(std::declval<bool>(), std::declval<bool>()));
        using f681 = r681(*)(GJEffectManager*, bool, bool);
        return reinterpret_cast<f681>(base+0x1855a0)(this, p0, p1);
    }

    decltype(std::declval<GJEffectManager>().playerDied()) GJEffectManager::playerDied() {
        using r682 = decltype(std::declval<GJEffectManager>().playerDied());
        using f682 = r682(*)(GJEffectManager*);
        return reinterpret_cast<f682>(base+0x185860)(this);
    }

    decltype(std::declval<GJEffectManager>().postCollisionCheck()) GJEffectManager::postCollisionCheck() {
        using r683 = decltype(std::declval<GJEffectManager>().postCollisionCheck());
        using f683 = r683(*)(GJEffectManager*);
        return reinterpret_cast<f683>(base+0x182720)(this);
    }

    decltype(std::declval<GJEffectManager>().preCollisionCheck()) GJEffectManager::preCollisionCheck() {
        using r684 = decltype(std::declval<GJEffectManager>().preCollisionCheck());
        using f684 = r684(*)(GJEffectManager*);
        return reinterpret_cast<f684>(base+0x182680)(this);
    }

    decltype(std::declval<GJEffectManager>().prepareMoveActions(std::declval<float>(), std::declval<bool>())) GJEffectManager::prepareMoveActions(float p0, bool p1) {
        using r685 = decltype(std::declval<GJEffectManager>().prepareMoveActions(std::declval<float>(), std::declval<bool>()));
        using f685 = r685(*)(GJEffectManager*, float, bool);
        return reinterpret_cast<f685>(base+0x183660)(this, p0, p1);
    }

    decltype(std::declval<GJEffectManager>().processColors()) GJEffectManager::processColors() {
        using r686 = decltype(std::declval<GJEffectManager>().processColors());
        using f686 = r686(*)(GJEffectManager*);
        return reinterpret_cast<f686>(base+0x180e70)(this);
    }

    decltype(std::declval<GJEffectManager>().processCopyColorPulseActions()) GJEffectManager::processCopyColorPulseActions() {
        using r687 = decltype(std::declval<GJEffectManager>().processCopyColorPulseActions());
        using f687 = r687(*)(GJEffectManager*);
        return reinterpret_cast<f687>(base+0x181530)(this);
    }

    decltype(std::declval<GJEffectManager>().processInheritedColors()) GJEffectManager::processInheritedColors() {
        using r688 = decltype(std::declval<GJEffectManager>().processInheritedColors());
        using f688 = r688(*)(GJEffectManager*);
        return reinterpret_cast<f688>(base+0x181190)(this);
    }

    decltype(std::declval<GJEffectManager>().processPulseActions()) GJEffectManager::processPulseActions() {
        using r689 = decltype(std::declval<GJEffectManager>().processPulseActions());
        using f689 = r689(*)(GJEffectManager*);
        return reinterpret_cast<f689>(base+0x181040)(this);
    }

    decltype(std::declval<GJEffectManager>().registerCollisionTrigger(std::declval<int>(), std::declval<int>(), std::declval<int>(), std::declval<bool>(), std::declval<bool>(), std::declval<int>())) GJEffectManager::registerCollisionTrigger(int p0, int p1, int p2, bool p3, bool p4, int p5) {
        using r690 = decltype(std::declval<GJEffectManager>().registerCollisionTrigger(std::declval<int>(), std::declval<int>(), std::declval<int>(), std::declval<bool>(), std::declval<bool>(), std::declval<int>()));
        using f690 = r690(*)(GJEffectManager*, int, int, int, bool, bool, int);
        return reinterpret_cast<f690>(base+0x182b70)(this, p0, p1, p2, p3, p4, p5);
    }

    decltype(std::declval<GJEffectManager>().removeAllPulseActions()) GJEffectManager::removeAllPulseActions() {
        using r691 = decltype(std::declval<GJEffectManager>().removeAllPulseActions());
        using f691 = r691(*)(GJEffectManager*);
        return reinterpret_cast<f691>(base+0x1825e0)(this);
    }

    decltype(std::declval<GJEffectManager>().removeColorAction(std::declval<int>())) GJEffectManager::removeColorAction(int p0) {
        using r692 = decltype(std::declval<GJEffectManager>().removeColorAction(std::declval<int>()));
        using f692 = r692(*)(GJEffectManager*, int);
        return reinterpret_cast<f692>(base+0x181d60)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().reset()) GJEffectManager::reset() {
        using r693 = decltype(std::declval<GJEffectManager>().reset());
        using f693 = r693(*)(GJEffectManager*);
        return reinterpret_cast<f693>(base+0x180690)(this);
    }

    decltype(std::declval<GJEffectManager>().resetColorCache()) GJEffectManager::resetColorCache() {
        using r694 = decltype(std::declval<GJEffectManager>().resetColorCache());
        using f694 = r694(*)(GJEffectManager*);
        return reinterpret_cast<f694>(base+0x185280)(this);
    }

    decltype(std::declval<GJEffectManager>().resetEffects()) GJEffectManager::resetEffects() {
        using r695 = decltype(std::declval<GJEffectManager>().resetEffects());
        using f695 = r695(*)(GJEffectManager*);
        return reinterpret_cast<f695>(base+0x1807d0)(this);
    }

    decltype(std::declval<GJEffectManager>().resetMoveActions()) GJEffectManager::resetMoveActions() {
        using r696 = decltype(std::declval<GJEffectManager>().resetMoveActions());
        using f696 = r696(*)(GJEffectManager*);
        return reinterpret_cast<f696>(base+0x180940)(this);
    }

    decltype(std::declval<GJEffectManager>().resetToggledGroups()) GJEffectManager::resetToggledGroups() {
        using r697 = decltype(std::declval<GJEffectManager>().resetToggledGroups());
        using f697 = r697(*)(GJEffectManager*);
        return reinterpret_cast<f697>(base+0x1853f0)(this);
    }

    decltype(std::declval<GJEffectManager>().resetTriggeredIDs()) GJEffectManager::resetTriggeredIDs() {
        using r698 = decltype(std::declval<GJEffectManager>().resetTriggeredIDs());
        using f698 = r698(*)(GJEffectManager*);
        return reinterpret_cast<f698>(base+0x182630)(this);
    }

    decltype(std::declval<GJEffectManager>().runCountTrigger(std::declval<int>(), std::declval<int>(), std::declval<bool>(), std::declval<int>(), std::declval<bool>(), std::declval<int>())) GJEffectManager::runCountTrigger(int p0, int p1, bool p2, int p3, bool p4, int p5) {
        using r699 = decltype(std::declval<GJEffectManager>().runCountTrigger(std::declval<int>(), std::declval<int>(), std::declval<bool>(), std::declval<int>(), std::declval<bool>(), std::declval<int>()));
        using f699 = r699(*)(GJEffectManager*, int, int, bool, int, bool, int);
        return reinterpret_cast<f699>(base+0x1858d0)(this, p0, p1, p2, p3, p4, p5);
    }

    decltype(std::declval<GJEffectManager>().runDeathTrigger(std::declval<int>(), std::declval<bool>(), std::declval<int>())) GJEffectManager::runDeathTrigger(int p0, bool p1, int p2) {
        using r700 = decltype(std::declval<GJEffectManager>().runDeathTrigger(std::declval<int>(), std::declval<bool>(), std::declval<int>()));
        using f700 = r700(*)(GJEffectManager*, int, bool, int);
        return reinterpret_cast<f700>(base+0x1857a0)(this, p0, p1, p2);
    }

    decltype(std::declval<GJEffectManager>().runOpacityActionOnGroup(std::declval<int>(), std::declval<float>(), std::declval<float>(), std::declval<int>())) GJEffectManager::runOpacityActionOnGroup(int p0, float p1, float p2, int p3) {
        using r701 = decltype(std::declval<GJEffectManager>().runOpacityActionOnGroup(std::declval<int>(), std::declval<float>(), std::declval<float>(), std::declval<int>()));
        using f701 = r701(*)(GJEffectManager*, int, float, float, int);
        return reinterpret_cast<f701>(base+0x1845d0)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<GJEffectManager>().runPulseEffect(std::declval<int>(), std::declval<bool>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<PulseEffectType>(), std::declval<cocos2d::_ccColor3B>(), std::declval<cocos2d::_ccHSVValue>(), std::declval<int>(), std::declval<bool>(), std::declval<bool>(), std::declval<bool>(), std::declval<int>())) GJEffectManager::runPulseEffect(int p0, bool p1, float p2, float p3, float p4, PulseEffectType p5, cocos2d::_ccColor3B p6, cocos2d::_ccHSVValue p7, int p8, bool p9, bool p10, bool p11, int p12) {
        using r702 = decltype(std::declval<GJEffectManager>().runPulseEffect(std::declval<int>(), std::declval<bool>(), std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<PulseEffectType>(), std::declval<cocos2d::_ccColor3B>(), std::declval<cocos2d::_ccHSVValue>(), std::declval<int>(), std::declval<bool>(), std::declval<bool>(), std::declval<bool>(), std::declval<int>()));
        using f702 = r702(*)(GJEffectManager*, int, bool, float, float, float, PulseEffectType, cocos2d::_ccColor3B, cocos2d::_ccHSVValue, int, bool, bool, bool, int);
        return reinterpret_cast<f702>(base+0x184890)(this, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    }

    decltype(std::declval<GJEffectManager>().runTouchTriggerCommand(std::declval<int>(), std::declval<bool>(), std::declval<TouchTriggerType>(), std::declval<bool>(), std::declval<int>())) GJEffectManager::runTouchTriggerCommand(int p0, bool p1, TouchTriggerType p2, bool p3, int p4) {
        using r703 = decltype(std::declval<GJEffectManager>().runTouchTriggerCommand(std::declval<int>(), std::declval<bool>(), std::declval<TouchTriggerType>(), std::declval<bool>(), std::declval<int>()));
        using f703 = r703(*)(GJEffectManager*, int, bool, TouchTriggerType, bool, int);
        return reinterpret_cast<f703>(base+0x185460)(this, p0, p1, p2, p3, p4);
    }

    decltype(std::declval<GJEffectManager>().setColorAction(std::declval<ColorAction*>(), std::declval<int>())) GJEffectManager::setColorAction(ColorAction* p0, int p1) {
        using r704 = decltype(std::declval<GJEffectManager>().setColorAction(std::declval<ColorAction*>(), std::declval<int>()));
        using f704 = r704(*)(GJEffectManager*, ColorAction*, int);
        return reinterpret_cast<f704>(base+0x181d00)(this, p0, p1);
    }

    decltype(std::declval<GJEffectManager>().setFollowing(std::declval<int>(), std::declval<int>(), std::declval<bool>())) GJEffectManager::setFollowing(int p0, int p1, bool p2) {
        using r705 = decltype(std::declval<GJEffectManager>().setFollowing(std::declval<int>(), std::declval<int>(), std::declval<bool>()));
        using f705 = r705(*)(GJEffectManager*, int, int, bool);
        return reinterpret_cast<f705>(base+0x185e00)(this, p0, p1, p2);
    }

    decltype(std::declval<GJEffectManager>().setupFromString(std::declval<gd::string>())) GJEffectManager::setupFromString(gd::string p0) {
        using r706 = decltype(std::declval<GJEffectManager>().setupFromString(std::declval<gd::string>()));
        using f706 = r706(*)(GJEffectManager*, gd::string);
        return reinterpret_cast<f706>(base+0x186290)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().shouldBlend(std::declval<int>())) GJEffectManager::shouldBlend(int p0) {
        using r707 = decltype(std::declval<GJEffectManager>().shouldBlend(std::declval<int>()));
        using f707 = r707(*)(GJEffectManager*, int);
        return reinterpret_cast<f707>(base+0x180e40)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().spawnGroup(std::declval<int>(), std::declval<float>(), std::declval<int>())) GJEffectManager::spawnGroup(int p0, float p1, int p2) {
        using r708 = decltype(std::declval<GJEffectManager>().spawnGroup(std::declval<int>(), std::declval<float>(), std::declval<int>()));
        using f708 = r708(*)(GJEffectManager*, int, float, int);
        return reinterpret_cast<f708>(base+0x1852a0)(this, p0, p1, p2);
    }

    decltype(std::declval<GJEffectManager>().stopActionsForTrigger(std::declval<EffectGameObject*>())) GJEffectManager::stopActionsForTrigger(EffectGameObject* p0) {
        using r709 = decltype(std::declval<GJEffectManager>().stopActionsForTrigger(std::declval<EffectGameObject*>()));
        using f709 = r709(*)(GJEffectManager*, EffectGameObject*);
        return reinterpret_cast<f709>(base+0x183150)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().stopMoveActionsForGroup(std::declval<int>())) GJEffectManager::stopMoveActionsForGroup(int p0) {
        using r710 = decltype(std::declval<GJEffectManager>().stopMoveActionsForGroup(std::declval<int>()));
        using f710 = r710(*)(GJEffectManager*, int);
        return reinterpret_cast<f710>(base+0x1830e0)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().storeTriggeredID(std::declval<int>())) GJEffectManager::storeTriggeredID(int p0) {
        using r711 = decltype(std::declval<GJEffectManager>().storeTriggeredID(std::declval<int>()));
        using f711 = r711(*)(GJEffectManager*, int);
        return reinterpret_cast<f711>(base+0x185380)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().toggleGroup(std::declval<int>(), std::declval<bool>())) GJEffectManager::toggleGroup(int p0, bool p1) {
        using r712 = decltype(std::declval<GJEffectManager>().toggleGroup(std::declval<int>(), std::declval<bool>()));
        using f712 = r712(*)(GJEffectManager*, int, bool);
        return reinterpret_cast<f712>(base+0x182c80)(this, p0, p1);
    }

    decltype(std::declval<GJEffectManager>().traverseInheritanceChain(std::declval<InheritanceNode*>())) GJEffectManager::traverseInheritanceChain(InheritanceNode* p0) {
        using r713 = decltype(std::declval<GJEffectManager>().traverseInheritanceChain(std::declval<InheritanceNode*>()));
        using f713 = r713(*)(GJEffectManager*, InheritanceNode*);
        return reinterpret_cast<f713>(base+0x181850)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().updateActiveOpacityEffects()) GJEffectManager::updateActiveOpacityEffects() {
        using r714 = decltype(std::declval<GJEffectManager>().updateActiveOpacityEffects());
        using f714 = r714(*)(GJEffectManager*);
        return reinterpret_cast<f714>(base+0x1847e0)(this);
    }

    decltype(std::declval<GJEffectManager>().updateColorAction(std::declval<ColorAction*>())) GJEffectManager::updateColorAction(ColorAction* p0) {
        using r715 = decltype(std::declval<GJEffectManager>().updateColorAction(std::declval<ColorAction*>()));
        using f715 = r715(*)(GJEffectManager*, ColorAction*);
        return reinterpret_cast<f715>(base+0x184560)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().updateColorEffects(std::declval<float>())) GJEffectManager::updateColorEffects(float p0) {
        using r716 = decltype(std::declval<GJEffectManager>().updateColorEffects(std::declval<float>()));
        using f716 = r716(*)(GJEffectManager*, float);
        return reinterpret_cast<f716>(base+0x181f40)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().updateColors(std::declval<cocos2d::_ccColor3B>(), std::declval<cocos2d::_ccColor3B>())) GJEffectManager::updateColors(cocos2d::_ccColor3B p0, cocos2d::_ccColor3B p1) {
        using r717 = decltype(std::declval<GJEffectManager>().updateColors(std::declval<cocos2d::_ccColor3B>(), std::declval<cocos2d::_ccColor3B>()));
        using f717 = r717(*)(GJEffectManager*, cocos2d::_ccColor3B, cocos2d::_ccColor3B);
        return reinterpret_cast<f717>(base+0x180a40)(this, p0, p1);
    }

    decltype(std::declval<GJEffectManager>().updateEffects(std::declval<float>())) GJEffectManager::updateEffects(float p0) {
        using r718 = decltype(std::declval<GJEffectManager>().updateEffects(std::declval<float>()));
        using f718 = r718(*)(GJEffectManager*, float);
        return reinterpret_cast<f718>(base+0x181df0)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().updateOpacityAction(std::declval<OpacityEffectAction*>())) GJEffectManager::updateOpacityAction(OpacityEffectAction* p0) {
        using r719 = decltype(std::declval<GJEffectManager>().updateOpacityAction(std::declval<OpacityEffectAction*>()));
        using f719 = r719(*)(GJEffectManager*, OpacityEffectAction*);
        return reinterpret_cast<f719>(base+0x184780)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().updateOpacityEffects(std::declval<float>())) GJEffectManager::updateOpacityEffects(float p0) {
        using r720 = decltype(std::declval<GJEffectManager>().updateOpacityEffects(std::declval<float>()));
        using f720 = r720(*)(GJEffectManager*, float);
        return reinterpret_cast<f720>(base+0x1823e0)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().updatePulseEffects(std::declval<float>())) GJEffectManager::updatePulseEffects(float p0) {
        using r721 = decltype(std::declval<GJEffectManager>().updatePulseEffects(std::declval<float>()));
        using f721 = r721(*)(GJEffectManager*, float);
        return reinterpret_cast<f721>(base+0x182130)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().updateSpawnTriggers(std::declval<float>())) GJEffectManager::updateSpawnTriggers(float p0) {
        using r722 = decltype(std::declval<GJEffectManager>().updateSpawnTriggers(std::declval<float>()));
        using f722 = r722(*)(GJEffectManager*, float);
        return reinterpret_cast<f722>(base+0x182510)(this, p0);
    }

    decltype(std::declval<GJEffectManager>().wasFollowing(std::declval<int>(), std::declval<int>())) GJEffectManager::wasFollowing(int p0, int p1) {
        using r723 = decltype(std::declval<GJEffectManager>().wasFollowing(std::declval<int>(), std::declval<int>()));
        using f723 = r723(*)(GJEffectManager*, int, int);
        return reinterpret_cast<f723>(base+0x185e60)(this, p0, p1);
    }

    decltype(std::declval<GJEffectManager>().wouldCreateLoop(std::declval<InheritanceNode*>(), std::declval<int>())) GJEffectManager::wouldCreateLoop(InheritanceNode* p0, int p1) {
        using r724 = decltype(std::declval<GJEffectManager>().wouldCreateLoop(std::declval<InheritanceNode*>(), std::declval<int>()));
        using f724 = r724(*)(GJEffectManager*, InheritanceNode*, int);
        return reinterpret_cast<f724>(base+0x181820)(this, p0, p1);
    }

    GJEffectManager::~GJEffectManager() {
        jumpDestructor(0x17fe00)
    }

    FLAlertLayer::~FLAlertLayer() {
        jumpDestructor(0x25db60)
    }

    decltype(std::declval<FLAlertLayer>().onEnter()) FLAlertLayer::onEnter() {
        using r727 = decltype(std::declval<FLAlertLayer>().onEnter());
        using f727 = r727(*)(FLAlertLayer*);
        return reinterpret_cast<f727>(base+0x25f350)(this);
    }

    decltype(std::declval<FLAlertLayer>().ccTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) FLAlertLayer::ccTouchBegan(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r728 = decltype(std::declval<FLAlertLayer>().ccTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f728 = r728(*)(FLAlertLayer*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f728>(base+0x25ee40)(this, p0, p1);
    }

    decltype(std::declval<FLAlertLayer>().ccTouchMoved(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) FLAlertLayer::ccTouchMoved(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r729 = decltype(std::declval<FLAlertLayer>().ccTouchMoved(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f729 = r729(*)(FLAlertLayer*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f729>(base+0x25f0a0)(this, p0, p1);
    }

    decltype(std::declval<FLAlertLayer>().ccTouchEnded(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) FLAlertLayer::ccTouchEnded(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r730 = decltype(std::declval<FLAlertLayer>().ccTouchEnded(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f730 = r730(*)(FLAlertLayer*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f730>(base+0x25ef60)(this, p0, p1);
    }

    decltype(std::declval<FLAlertLayer>().ccTouchCancelled(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) FLAlertLayer::ccTouchCancelled(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r731 = decltype(std::declval<FLAlertLayer>().ccTouchCancelled(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f731 = r731(*)(FLAlertLayer*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f731>(base+0x25f020)(this, p0, p1);
    }

    decltype(std::declval<FLAlertLayer>().registerWithTouchDispatcher()) FLAlertLayer::registerWithTouchDispatcher() {
        using r732 = decltype(std::declval<FLAlertLayer>().registerWithTouchDispatcher());
        using f732 = r732(*)(FLAlertLayer*);
        return reinterpret_cast<f732>(base+0x25f2e0)(this);
    }

    decltype(std::declval<FLAlertLayer>().keyBackClicked()) FLAlertLayer::keyBackClicked() {
        using r733 = decltype(std::declval<FLAlertLayer>().keyBackClicked());
        using f733 = r733(*)(FLAlertLayer*);
        return reinterpret_cast<f733>(base+0x25ed90)(this);
    }

    decltype(std::declval<FLAlertLayer>().keyDown(std::declval<cocos2d::enumKeyCodes>())) FLAlertLayer::keyDown(cocos2d::enumKeyCodes p0) {
        using r734 = decltype(std::declval<FLAlertLayer>().keyDown(std::declval<cocos2d::enumKeyCodes>()));
        using f734 = r734(*)(FLAlertLayer*, cocos2d::enumKeyCodes);
        return reinterpret_cast<f734>(base+0x25ece0)(this, p0);
    }

    decltype(std::declval<FLAlertLayer>().show()) FLAlertLayer::show() {
        using r735 = decltype(std::declval<FLAlertLayer>().show());
        using f735 = r735(*)(FLAlertLayer*);
        return reinterpret_cast<f735>(base+0x25f120)(this);
    }

    decltype(std::declval<FLAlertLayer>().init(std::declval<FLAlertLayerProtocol*>(), std::declval<char const*>(), std::declval<gd::string>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<float>(), std::declval<bool>(), std::declval<float>())) FLAlertLayer::init(FLAlertLayerProtocol* p0, char const* p1, gd::string p2, char const* p3, char const* p4, float p5, bool p6, float p7) {
        using r736 = decltype(std::declval<FLAlertLayer>().init(std::declval<FLAlertLayerProtocol*>(), std::declval<char const*>(), std::declval<gd::string>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<float>(), std::declval<bool>(), std::declval<float>()));
        using f736 = r736(*)(FLAlertLayer*, FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float, bool, float);
        return reinterpret_cast<f736>(base+0x25e1b0)(this, p0, p1, p2, p3, p4, p5, p6, p7);
    }

    decltype(std::declval<FLAlertLayer>().create(std::declval<FLAlertLayerProtocol*>(), std::declval<char const*>(), std::declval<gd::string>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<float>())) FLAlertLayer::create(FLAlertLayerProtocol* p0, char const* p1, gd::string p2, char const* p3, char const* p4, float p5) {
        using r737 = decltype(std::declval<FLAlertLayer>().create(std::declval<FLAlertLayerProtocol*>(), std::declval<char const*>(), std::declval<gd::string>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<float>()));
        using f737 = r737(*)(FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float);
        return reinterpret_cast<f737>(base+0x25e0e0)(p0, p1, p2, p3, p4, p5);

    }

    decltype(std::declval<FLAlertLayer>().create(std::declval<FLAlertLayerProtocol*>(), std::declval<char const*>(), std::declval<gd::string>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<float>(), std::declval<bool>(), std::declval<float>())) FLAlertLayer::create(FLAlertLayerProtocol* p0, char const* p1, gd::string p2, char const* p3, char const* p4, float p5, bool p6, float p7) {
        using r738 = decltype(std::declval<FLAlertLayer>().create(std::declval<FLAlertLayerProtocol*>(), std::declval<char const*>(), std::declval<gd::string>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<float>(), std::declval<bool>(), std::declval<float>()));
        using f738 = r738(*)(FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float, bool, float);
        return reinterpret_cast<f738>(base+0x25dec0)(p0, p1, p2, p3, p4, p5, p6, p7);

    }

    decltype(std::declval<GJBaseGameLayer>().objectsCollided(std::declval<int>(), std::declval<int>())) GJBaseGameLayer::objectsCollided(int p0, int p1) {
        using r739 = decltype(std::declval<GJBaseGameLayer>().objectsCollided(std::declval<int>(), std::declval<int>()));
        using f739 = r739(*)(GJBaseGameLayer*, int, int);
        return reinterpret_cast<f739>(base+0xb6d90)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().createMoveCommand(std::declval<cocos2d::CCPoint>(), std::declval<int>(), std::declval<float>(), std::declval<int>(), std::declval<float>(), std::declval<bool>(), std::declval<bool>(), std::declval<int>())) GJBaseGameLayer::createMoveCommand(cocos2d::CCPoint p0, int p1, float p2, int p3, float p4, bool p5, bool p6, int p7) {
        using r740 = decltype(std::declval<GJBaseGameLayer>().createMoveCommand(std::declval<cocos2d::CCPoint>(), std::declval<int>(), std::declval<float>(), std::declval<int>(), std::declval<float>(), std::declval<bool>(), std::declval<bool>(), std::declval<int>()));
        using f740 = r740(*)(GJBaseGameLayer*, cocos2d::CCPoint, int, float, int, float, bool, bool, int);
        return reinterpret_cast<f740>(base+0xb73a0)(this, p0, p1, p2, p3, p4, p5, p6, p7);
    }

    decltype(std::declval<GJBaseGameLayer>().updateColor(std::declval<cocos2d::_ccColor3B>(), std::declval<float>(), std::declval<int>(), std::declval<bool>(), std::declval<float>(), std::declval<cocos2d::_ccHSVValue>(), std::declval<int>(), std::declval<bool>(), std::declval<int>(), std::declval<EffectGameObject*>())) GJBaseGameLayer::updateColor(cocos2d::_ccColor3B p0, float p1, int p2, bool p3, float p4, cocos2d::_ccHSVValue p5, int p6, bool p7, int p8, EffectGameObject* p9) {
        using r741 = decltype(std::declval<GJBaseGameLayer>().updateColor(std::declval<cocos2d::_ccColor3B>(), std::declval<float>(), std::declval<int>(), std::declval<bool>(), std::declval<float>(), std::declval<cocos2d::_ccHSVValue>(), std::declval<int>(), std::declval<bool>(), std::declval<int>(), std::declval<EffectGameObject*>()));
        using f741 = r741(*)(GJBaseGameLayer*, cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*);
        return reinterpret_cast<f741>(base+0xb7420)(this, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    }

    decltype(std::declval<GJBaseGameLayer>().flipGravity(std::declval<PlayerObject*>(), std::declval<bool>(), std::declval<bool>())) GJBaseGameLayer::flipGravity(PlayerObject* p0, bool p1, bool p2) {
        using r742 = decltype(std::declval<GJBaseGameLayer>().flipGravity(std::declval<PlayerObject*>(), std::declval<bool>(), std::declval<bool>()));
        using f742 = r742(*)(GJBaseGameLayer*, PlayerObject*, bool, bool);
        return reinterpret_cast<f742>(base+0xba990)(this, p0, p1, p2);
    }

    decltype(std::declval<GJBaseGameLayer>().calculateColorValues(std::declval<EffectGameObject*>(), std::declval<EffectGameObject*>(), std::declval<int>(), std::declval<float>(), std::declval<ColorActionSprite*>(), std::declval<GJEffectManager*>())) GJBaseGameLayer::calculateColorValues(EffectGameObject* p0, EffectGameObject* p1, int p2, float p3, ColorActionSprite* p4, GJEffectManager* p5) {
        using r743 = decltype(std::declval<GJBaseGameLayer>().calculateColorValues(std::declval<EffectGameObject*>(), std::declval<EffectGameObject*>(), std::declval<int>(), std::declval<float>(), std::declval<ColorActionSprite*>(), std::declval<GJEffectManager*>()));
        using f743 = r743(*)(GJBaseGameLayer*, EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*);
        return reinterpret_cast<f743>(base+0xba9a0)(this, p0, p1, p2, p3, p4, p5);
    }

    decltype(std::declval<GJBaseGameLayer>().toggleGroupTriggered(std::declval<int>(), std::declval<bool>())) GJBaseGameLayer::toggleGroupTriggered(int p0, bool p1) {
        using r744 = decltype(std::declval<GJBaseGameLayer>().toggleGroupTriggered(std::declval<int>(), std::declval<bool>()));
        using f744 = r744(*)(GJBaseGameLayer*, int, bool);
        return reinterpret_cast<f744>(base+0xb75a0)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().spawnGroup(std::declval<int>())) GJBaseGameLayer::spawnGroup(int p0) {
        using r745 = decltype(std::declval<GJBaseGameLayer>().spawnGroup(std::declval<int>()));
        using f745 = r745(*)(GJBaseGameLayer*, int);
        return reinterpret_cast<f745>(base+0xb7050)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().addToSection(std::declval<GameObject*>())) GJBaseGameLayer::addToSection(GameObject* p0) {
        using r746 = decltype(std::declval<GJBaseGameLayer>().addToSection(std::declval<GameObject*>()));
        using f746 = r746(*)(GJBaseGameLayer*, GameObject*);
        return reinterpret_cast<f746>(base+0xb7b70)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().addToGroup(std::declval<GameObject*>(), std::declval<int>(), std::declval<bool>())) GJBaseGameLayer::addToGroup(GameObject* p0, int p1, bool p2) {
        using r747 = decltype(std::declval<GJBaseGameLayer>().addToGroup(std::declval<GameObject*>(), std::declval<int>(), std::declval<bool>()));
        using f747 = r747(*)(GJBaseGameLayer*, GameObject*, int, bool);
        return reinterpret_cast<f747>(base+0xb77f0)(this, p0, p1, p2);
    }

    decltype(std::declval<GJBaseGameLayer>().removeFromGroup(std::declval<GameObject*>(), std::declval<int>())) GJBaseGameLayer::removeFromGroup(GameObject* p0, int p1) {
        using r748 = decltype(std::declval<GJBaseGameLayer>().removeFromGroup(std::declval<GameObject*>(), std::declval<int>()));
        using f748 = r748(*)(GJBaseGameLayer*, GameObject*, int);
        return reinterpret_cast<f748>(base+0xb7a60)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().init()) GJBaseGameLayer::init() {
        using r749 = decltype(std::declval<GJBaseGameLayer>().init());
        using f749 = r749(*)(GJBaseGameLayer*);
        return reinterpret_cast<f749>(base+0xafc90)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().addObjectCounter(std::declval<LabelGameObject*>(), std::declval<int>())) GJBaseGameLayer::addObjectCounter(LabelGameObject* p0, int p1) {
        using r750 = decltype(std::declval<GJBaseGameLayer>().addObjectCounter(std::declval<LabelGameObject*>(), std::declval<int>()));
        using f750 = r750(*)(GJBaseGameLayer*, LabelGameObject*, int);
        return reinterpret_cast<f750>(base+0xb9eb0)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().addToGroups(std::declval<GameObject*>(), std::declval<bool>())) GJBaseGameLayer::addToGroups(GameObject* p0, bool p1) {
        using r751 = decltype(std::declval<GJBaseGameLayer>().addToGroups(std::declval<GameObject*>(), std::declval<bool>()));
        using f751 = r751(*)(GJBaseGameLayer*, GameObject*, bool);
        return reinterpret_cast<f751>(base+0xb7780)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().atlasValue(std::declval<int>())) GJBaseGameLayer::atlasValue(int p0) {
        using r752 = decltype(std::declval<GJBaseGameLayer>().atlasValue(std::declval<int>()));
        using f752 = r752(*)(GJBaseGameLayer*, int);
        return reinterpret_cast<f752>(base+0xb21e0)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().bumpPlayer(std::declval<PlayerObject*>(), std::declval<GameObject*>())) GJBaseGameLayer::bumpPlayer(PlayerObject* p0, GameObject* p1) {
        using r753 = decltype(std::declval<GJBaseGameLayer>().bumpPlayer(std::declval<PlayerObject*>(), std::declval<GameObject*>()));
        using f753 = r753(*)(GJBaseGameLayer*, PlayerObject*, GameObject*);
        return reinterpret_cast<f753>(base+0xb6860)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().calculateOpacityValues(std::declval<EffectGameObject*>(), std::declval<EffectGameObject*>(), std::declval<float>(), std::declval<GJEffectManager*>())) GJBaseGameLayer::calculateOpacityValues(EffectGameObject* p0, EffectGameObject* p1, float p2, GJEffectManager* p3) {
        using r754 = decltype(std::declval<GJBaseGameLayer>().calculateOpacityValues(std::declval<EffectGameObject*>(), std::declval<EffectGameObject*>(), std::declval<float>(), std::declval<GJEffectManager*>()));
        using f754 = r754(*)(GJBaseGameLayer*, EffectGameObject*, EffectGameObject*, float, GJEffectManager*);
        return reinterpret_cast<f754>(base+0xb5be0)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<GJBaseGameLayer>().checkSpawnObjects()) GJBaseGameLayer::checkSpawnObjects() {
        using r755 = decltype(std::declval<GJBaseGameLayer>().checkSpawnObjects());
        using f755 = r755(*)(GJBaseGameLayer*);
        return reinterpret_cast<f755>(base+0xb6f90)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().collectItem(std::declval<int>(), std::declval<int>())) GJBaseGameLayer::collectItem(int p0, int p1) {
        using r756 = decltype(std::declval<GJBaseGameLayer>().collectItem(std::declval<int>(), std::declval<int>()));
        using f756 = r756(*)(GJBaseGameLayer*, int, int);
        return reinterpret_cast<f756>(base+0xb9e20)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().collectedObject(std::declval<EffectGameObject*>())) GJBaseGameLayer::collectedObject(EffectGameObject* p0) {
        using r757 = decltype(std::declval<GJBaseGameLayer>().collectedObject(std::declval<EffectGameObject*>()));
        using f757 = r757(*)(GJBaseGameLayer*, EffectGameObject*);
        return reinterpret_cast<f757>(base+0xb9b60)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().createTextLayers()) GJBaseGameLayer::createTextLayers() {
        using r758 = decltype(std::declval<GJBaseGameLayer>().createTextLayers());
        using f758 = r758(*)(GJBaseGameLayer*);
        return reinterpret_cast<f758>(base+0xb5260)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().damagingObjectsInRect(std::declval<cocos2d::CCRect>())) GJBaseGameLayer::damagingObjectsInRect(cocos2d::CCRect p0) {
        using r759 = decltype(std::declval<GJBaseGameLayer>().damagingObjectsInRect(std::declval<cocos2d::CCRect>()));
        using f759 = r759(*)(GJBaseGameLayer*, cocos2d::CCRect);
        return reinterpret_cast<f759>(base+0xb6140)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().enableHighCapacityMode()) GJBaseGameLayer::enableHighCapacityMode() {
        using r760 = decltype(std::declval<GJBaseGameLayer>().enableHighCapacityMode());
        using f760 = r760(*)(GJBaseGameLayer*);
        return reinterpret_cast<f760>(base+0xb11e0)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().getCapacityString()) GJBaseGameLayer::getCapacityString() {
        using r761 = decltype(std::declval<GJBaseGameLayer>().getCapacityString());
        using f761 = r761(*)(GJBaseGameLayer*);
        return reinterpret_cast<f761>(base+0xb2210)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().getGroundHeightForMode(std::declval<int>())) GJBaseGameLayer::getGroundHeightForMode(int p0) {
        using r762 = decltype(std::declval<GJBaseGameLayer>().getGroundHeightForMode(std::declval<int>()));
        using f762 = r762(*)(GJBaseGameLayer*, int);
        return reinterpret_cast<f762>(base+0xb6630)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().getGroup(std::declval<int>())) GJBaseGameLayer::getGroup(int p0) {
        using r763 = decltype(std::declval<GJBaseGameLayer>().getGroup(std::declval<int>()));
        using f763 = r763(*)(GJBaseGameLayer*, int);
        return reinterpret_cast<f763>(base+0xb6f20)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().getMoveDeltaForObjects(std::declval<int>(), std::declval<int>())) GJBaseGameLayer::getMoveDeltaForObjects(int p0, int p1) {
        using r764 = decltype(std::declval<GJBaseGameLayer>().getMoveDeltaForObjects(std::declval<int>(), std::declval<int>()));
        using f764 = r764(*)(GJBaseGameLayer*, int, int);
        return reinterpret_cast<f764>(base+0xb6db0)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().getOptimizedGroup(std::declval<int>())) GJBaseGameLayer::getOptimizedGroup(int p0) {
        using r765 = decltype(std::declval<GJBaseGameLayer>().getOptimizedGroup(std::declval<int>()));
        using f765 = r765(*)(GJBaseGameLayer*, int);
        return reinterpret_cast<f765>(base+0xb7940)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().getStaticGroup(std::declval<int>())) GJBaseGameLayer::getStaticGroup(int p0) {
        using r766 = decltype(std::declval<GJBaseGameLayer>().getStaticGroup(std::declval<int>()));
        using f766 = r766(*)(GJBaseGameLayer*, int);
        return reinterpret_cast<f766>(base+0xb79a0)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().isGroupDisabledForObject(std::declval<GameObject*>())) GJBaseGameLayer::isGroupDisabledForObject(GameObject* p0) {
        using r767 = decltype(std::declval<GJBaseGameLayer>().isGroupDisabledForObject(std::declval<GameObject*>()));
        using f767 = r767(*)(GJBaseGameLayer*, GameObject*);
        return reinterpret_cast<f767>(base+0xb5cc0)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().isGroupDisabledForObjectFull(std::declval<GameObject*>(), std::declval<cocos2d::CCArray*>())) GJBaseGameLayer::isGroupDisabledForObjectFull(GameObject* p0, cocos2d::CCArray* p1) {
        using r768 = decltype(std::declval<GJBaseGameLayer>().isGroupDisabledForObjectFull(std::declval<GameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f768 = r768(*)(GJBaseGameLayer*, GameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f768>(base+0xb5de0)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().loadUpToPosition(std::declval<float>())) GJBaseGameLayer::loadUpToPosition(float p0) {
        using r769 = decltype(std::declval<GJBaseGameLayer>().loadUpToPosition(std::declval<float>()));
        using f769 = r769(*)(GJBaseGameLayer*, float);
        return reinterpret_cast<f769>(base+0xba680)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().objectIntersectsCircle(std::declval<GameObject*>(), std::declval<GameObject*>())) GJBaseGameLayer::objectIntersectsCircle(GameObject* p0, GameObject* p1) {
        using r770 = decltype(std::declval<GJBaseGameLayer>().objectIntersectsCircle(std::declval<GameObject*>(), std::declval<GameObject*>()));
        using f770 = r770(*)(GJBaseGameLayer*, GameObject*, GameObject*);
        return reinterpret_cast<f770>(base+0xb66e0)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().objectTriggered(std::declval<EffectGameObject*>())) GJBaseGameLayer::objectTriggered(EffectGameObject* p0) {
        using r771 = decltype(std::declval<GJBaseGameLayer>().objectTriggered(std::declval<EffectGameObject*>()));
        using f771 = r771(*)(GJBaseGameLayer*, EffectGameObject*);
        return reinterpret_cast<f771>(base+0xb71b0)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().optimizeMoveGroups()) GJBaseGameLayer::optimizeMoveGroups() {
        using r772 = decltype(std::declval<GJBaseGameLayer>().optimizeMoveGroups());
        using f772 = r772(*)(GJBaseGameLayer*);
        return reinterpret_cast<f772>(base+0xb96c0)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().parentForZLayer(std::declval<int>(), std::declval<bool>(), std::declval<int>())) GJBaseGameLayer::parentForZLayer(int p0, bool p1, int p2) {
        using r773 = decltype(std::declval<GJBaseGameLayer>().parentForZLayer(std::declval<int>(), std::declval<bool>(), std::declval<int>()));
        using f773 = r773(*)(GJBaseGameLayer*, int, bool, int);
        return reinterpret_cast<f773>(base+0xb55d0)(this, p0, p1, p2);
    }

    decltype(std::declval<GJBaseGameLayer>().playerTouchedRing(std::declval<PlayerObject*>(), std::declval<GameObject*>())) GJBaseGameLayer::playerTouchedRing(PlayerObject* p0, GameObject* p1) {
        using r774 = decltype(std::declval<GJBaseGameLayer>().playerTouchedRing(std::declval<PlayerObject*>(), std::declval<GameObject*>()));
        using f774 = r774(*)(GJBaseGameLayer*, PlayerObject*, GameObject*);
        return reinterpret_cast<f774>(base+0xb69e0)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().processColorObject(std::declval<EffectGameObject*>(), std::declval<int>(), std::declval<cocos2d::CCDictionary*>(), std::declval<float>(), std::declval<GJEffectManager*>())) GJBaseGameLayer::processColorObject(EffectGameObject* p0, int p1, cocos2d::CCDictionary* p2, float p3, GJEffectManager* p4) {
        using r775 = decltype(std::declval<GJBaseGameLayer>().processColorObject(std::declval<EffectGameObject*>(), std::declval<int>(), std::declval<cocos2d::CCDictionary*>(), std::declval<float>(), std::declval<GJEffectManager*>()));
        using f775 = r775(*)(GJBaseGameLayer*, EffectGameObject*, int, cocos2d::CCDictionary*, float, GJEffectManager*);
        return reinterpret_cast<f775>(base+0xb5a90)(this, p0, p1, p2, p3, p4);
    }

    decltype(std::declval<GJBaseGameLayer>().processFollowActions()) GJBaseGameLayer::processFollowActions() {
        using r776 = decltype(std::declval<GJBaseGameLayer>().processFollowActions());
        using f776 = r776(*)(GJBaseGameLayer*);
        return reinterpret_cast<f776>(base+0xb8fd0)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().processMoveActions()) GJBaseGameLayer::processMoveActions() {
        using r777 = decltype(std::declval<GJBaseGameLayer>().processMoveActions());
        using f777 = r777(*)(GJBaseGameLayer*);
        return reinterpret_cast<f777>(base+0xb86c0)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().processMoveActionsStep(std::declval<float>())) GJBaseGameLayer::processMoveActionsStep(float p0) {
        using r778 = decltype(std::declval<GJBaseGameLayer>().processMoveActionsStep(std::declval<float>()));
        using f778 = r778(*)(GJBaseGameLayer*, float);
        return reinterpret_cast<f778>(base+0xb7ea0)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().processOpacityObject(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCDictionary*>(), std::declval<float>(), std::declval<GJEffectManager*>())) GJBaseGameLayer::processOpacityObject(EffectGameObject* p0, cocos2d::CCDictionary* p1, float p2, GJEffectManager* p3) {
        using r779 = decltype(std::declval<GJBaseGameLayer>().processOpacityObject(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCDictionary*>(), std::declval<float>(), std::declval<GJEffectManager*>()));
        using f779 = r779(*)(GJBaseGameLayer*, EffectGameObject*, cocos2d::CCDictionary*, float, GJEffectManager*);
        return reinterpret_cast<f779>(base+0xb5ae0)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<GJBaseGameLayer>().processPlayerFollowActions(std::declval<float>())) GJBaseGameLayer::processPlayerFollowActions(float p0) {
        using r780 = decltype(std::declval<GJBaseGameLayer>().processPlayerFollowActions(std::declval<float>()));
        using f780 = r780(*)(GJBaseGameLayer*, float);
        return reinterpret_cast<f780>(base+0xb8b50)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().processRotationActions()) GJBaseGameLayer::processRotationActions() {
        using r781 = decltype(std::declval<GJBaseGameLayer>().processRotationActions());
        using f781 = r781(*)(GJBaseGameLayer*);
        return reinterpret_cast<f781>(base+0xb7fd0)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().pushButton(std::declval<int>(), std::declval<bool>())) GJBaseGameLayer::pushButton(int p0, bool p1) {
        using r782 = decltype(std::declval<GJBaseGameLayer>().pushButton(std::declval<int>(), std::declval<bool>()));
        using f782 = r782(*)(GJBaseGameLayer*, int, bool);
        return reinterpret_cast<f782>(base+0xb9920)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().rectIntersectsCircle(std::declval<cocos2d::CCRect>(), std::declval<cocos2d::CCPoint>(), std::declval<float>())) GJBaseGameLayer::rectIntersectsCircle(cocos2d::CCRect p0, cocos2d::CCPoint p1, float p2) {
        using r783 = decltype(std::declval<GJBaseGameLayer>().rectIntersectsCircle(std::declval<cocos2d::CCRect>(), std::declval<cocos2d::CCPoint>(), std::declval<float>()));
        using f783 = r783(*)(GJBaseGameLayer*, cocos2d::CCRect, cocos2d::CCPoint, float);
        return reinterpret_cast<f783>(base+0xb6470)(this, p0, p1, p2);
    }

    decltype(std::declval<GJBaseGameLayer>().refreshCounterLabels()) GJBaseGameLayer::refreshCounterLabels() {
        using r784 = decltype(std::declval<GJBaseGameLayer>().refreshCounterLabels());
        using f784 = r784(*)(GJBaseGameLayer*);
        return reinterpret_cast<f784>(base+0xb9fc0)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().releaseButton(std::declval<int>(), std::declval<bool>())) GJBaseGameLayer::releaseButton(int p0, bool p1) {
        using r785 = decltype(std::declval<GJBaseGameLayer>().releaseButton(std::declval<int>(), std::declval<bool>()));
        using f785 = r785(*)(GJBaseGameLayer*, int, bool);
        return reinterpret_cast<f785>(base+0xb9a00)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().removeFromGroups(std::declval<GameObject*>())) GJBaseGameLayer::removeFromGroups(GameObject* p0) {
        using r786 = decltype(std::declval<GJBaseGameLayer>().removeFromGroups(std::declval<GameObject*>()));
        using f786 = r786(*)(GJBaseGameLayer*, GameObject*);
        return reinterpret_cast<f786>(base+0xb7a00)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().removeObjectFromSection(std::declval<GameObject*>())) GJBaseGameLayer::removeObjectFromSection(GameObject* p0) {
        using r787 = decltype(std::declval<GJBaseGameLayer>().removeObjectFromSection(std::declval<GameObject*>()));
        using f787 = r787(*)(GJBaseGameLayer*, GameObject*);
        return reinterpret_cast<f787>(base+0xb7e00)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().reorderObjectSection(std::declval<GameObject*>())) GJBaseGameLayer::reorderObjectSection(GameObject* p0) {
        using r788 = decltype(std::declval<GJBaseGameLayer>().reorderObjectSection(std::declval<GameObject*>()));
        using f788 = r788(*)(GJBaseGameLayer*, GameObject*);
        return reinterpret_cast<f788>(base+0xb7cb0)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().resetGroupCounters(std::declval<bool>())) GJBaseGameLayer::resetGroupCounters(bool p0) {
        using r789 = decltype(std::declval<GJBaseGameLayer>().resetGroupCounters(std::declval<bool>()));
        using f789 = r789(*)(GJBaseGameLayer*, bool);
        return reinterpret_cast<f789>(base+0xba300)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().resetMoveOptimizedValue()) GJBaseGameLayer::resetMoveOptimizedValue() {
        using r790 = decltype(std::declval<GJBaseGameLayer>().resetMoveOptimizedValue());
        using f790 = r790(*)(GJBaseGameLayer*);
        return reinterpret_cast<f790>(base+0xb9670)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().sectionForPos(std::declval<float>())) GJBaseGameLayer::sectionForPos(float p0) {
        using r791 = decltype(std::declval<GJBaseGameLayer>().sectionForPos(std::declval<float>()));
        using f791 = r791(*)(GJBaseGameLayer*, float);
        return reinterpret_cast<f791>(base+0xb6120)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().setupLayers()) GJBaseGameLayer::setupLayers() {
        using r792 = decltype(std::declval<GJBaseGameLayer>().setupLayers());
        using f792 = r792(*)(GJBaseGameLayer*);
        return reinterpret_cast<f792>(base+0xaffe0)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().shouldExitHackedLevel()) GJBaseGameLayer::shouldExitHackedLevel() {
        using r793 = decltype(std::declval<GJBaseGameLayer>().shouldExitHackedLevel());
        using f793 = r793(*)(GJBaseGameLayer*);
        return reinterpret_cast<f793>(base+0xb1100)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().spawnGroupTriggered(std::declval<int>(), std::declval<float>(), std::declval<int>())) GJBaseGameLayer::spawnGroupTriggered(int p0, float p1, int p2) {
        using r794 = decltype(std::declval<GJBaseGameLayer>().spawnGroupTriggered(std::declval<int>(), std::declval<float>(), std::declval<int>()));
        using f794 = r794(*)(GJBaseGameLayer*, int, float, int);
        return reinterpret_cast<f794>(base+0xb7020)(this, p0, p1, p2);
    }

    decltype(std::declval<GJBaseGameLayer>().staticObjectsInRect(std::declval<cocos2d::CCRect>())) GJBaseGameLayer::staticObjectsInRect(cocos2d::CCRect p0) {
        using r795 = decltype(std::declval<GJBaseGameLayer>().staticObjectsInRect(std::declval<cocos2d::CCRect>()));
        using f795 = r795(*)(GJBaseGameLayer*, cocos2d::CCRect);
        return reinterpret_cast<f795>(base+0xb5f90)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().testInstantCountTrigger(std::declval<int>(), std::declval<int>(), std::declval<int>(), std::declval<bool>(), std::declval<int>())) GJBaseGameLayer::testInstantCountTrigger(int p0, int p1, int p2, bool p3, int p4) {
        using r796 = decltype(std::declval<GJBaseGameLayer>().testInstantCountTrigger(std::declval<int>(), std::declval<int>(), std::declval<int>(), std::declval<bool>(), std::declval<int>()));
        using f796 = r796(*)(GJBaseGameLayer*, int, int, int, bool, int);
        return reinterpret_cast<f796>(base+0xb9ae0)(this, p0, p1, p2, p3, p4);
    }

    decltype(std::declval<GJBaseGameLayer>().toggleGroup(std::declval<int>(), std::declval<bool>())) GJBaseGameLayer::toggleGroup(int p0, bool p1) {
        using r797 = decltype(std::declval<GJBaseGameLayer>().toggleGroup(std::declval<int>(), std::declval<bool>()));
        using f797 = r797(*)(GJBaseGameLayer*, int, bool);
        return reinterpret_cast<f797>(base+0xb75f0)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().togglePlayerVisibility(std::declval<bool>())) GJBaseGameLayer::togglePlayerVisibility(bool p0) {
        using r798 = decltype(std::declval<GJBaseGameLayer>().togglePlayerVisibility(std::declval<bool>()));
        using f798 = r798(*)(GJBaseGameLayer*, bool);
        return reinterpret_cast<f798>(base+0xba910)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().triggerMoveCommand(std::declval<EffectGameObject*>())) GJBaseGameLayer::triggerMoveCommand(EffectGameObject* p0) {
        using r799 = decltype(std::declval<GJBaseGameLayer>().triggerMoveCommand(std::declval<EffectGameObject*>()));
        using f799 = r799(*)(GJBaseGameLayer*, EffectGameObject*);
        return reinterpret_cast<f799>(base+0xb7290)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().updateCollisionBlocks()) GJBaseGameLayer::updateCollisionBlocks() {
        using r800 = decltype(std::declval<GJBaseGameLayer>().updateCollisionBlocks());
        using f800 = r800(*)(GJBaseGameLayer*);
        return reinterpret_cast<f800>(base+0xb6a30)(this);
    }

    decltype(std::declval<GJBaseGameLayer>().updateCounters(std::declval<int>(), std::declval<int>())) GJBaseGameLayer::updateCounters(int p0, int p1) {
        using r801 = decltype(std::declval<GJBaseGameLayer>().updateCounters(std::declval<int>(), std::declval<int>()));
        using f801 = r801(*)(GJBaseGameLayer*, int, int);
        return reinterpret_cast<f801>(base+0xb9bc0)(this, p0, p1);
    }

    decltype(std::declval<GJBaseGameLayer>().updateDisabledObjectsLastPos(std::declval<cocos2d::CCArray*>())) GJBaseGameLayer::updateDisabledObjectsLastPos(cocos2d::CCArray* p0) {
        using r802 = decltype(std::declval<GJBaseGameLayer>().updateDisabledObjectsLastPos(std::declval<cocos2d::CCArray*>()));
        using f802 = r802(*)(GJBaseGameLayer*, cocos2d::CCArray*);
        return reinterpret_cast<f802>(base+0xb95b0)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().updateLayerCapacity(std::declval<gd::string>())) GJBaseGameLayer::updateLayerCapacity(gd::string p0) {
        using r803 = decltype(std::declval<GJBaseGameLayer>().updateLayerCapacity(std::declval<gd::string>()));
        using f803 = r803(*)(GJBaseGameLayer*, gd::string);
        return reinterpret_cast<f803>(base+0xb1680)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().updateLegacyLayerCapacity(std::declval<int>(), std::declval<int>(), std::declval<int>(), std::declval<int>())) GJBaseGameLayer::updateLegacyLayerCapacity(int p0, int p1, int p2, int p3) {
        using r804 = decltype(std::declval<GJBaseGameLayer>().updateLegacyLayerCapacity(std::declval<int>(), std::declval<int>(), std::declval<int>(), std::declval<int>()));
        using f804 = r804(*)(GJBaseGameLayer*, int, int, int, int);
        return reinterpret_cast<f804>(base+0xb1590)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<GJBaseGameLayer>().updateOBB2(std::declval<cocos2d::CCRect>())) GJBaseGameLayer::updateOBB2(cocos2d::CCRect p0) {
        using r805 = decltype(std::declval<GJBaseGameLayer>().updateOBB2(std::declval<cocos2d::CCRect>()));
        using f805 = r805(*)(GJBaseGameLayer*, cocos2d::CCRect);
        return reinterpret_cast<f805>(base+0xb63f0)(this, p0);
    }

    decltype(std::declval<GJBaseGameLayer>().updateQueuedLabels()) GJBaseGameLayer::updateQueuedLabels() {
        using r806 = decltype(std::declval<GJBaseGameLayer>().updateQueuedLabels());
        using f806 = r806(*)(GJBaseGameLayer*);
        return reinterpret_cast<f806>(base+0xb9f30)(this);
    }

    GJBaseGameLayer::~GJBaseGameLayer() {
        jumpDestructor(0xaf990)
    }

    decltype(std::declval<GJDropDownLayer>().customSetup()) GJDropDownLayer::customSetup() {
        using r808 = decltype(std::declval<GJDropDownLayer>().customSetup());
        using f808 = r808(*)(GJDropDownLayer*);
        return reinterpret_cast<f808>(base+0x352570)(this);
    }

    decltype(std::declval<GJDropDownLayer>().enterLayer()) GJDropDownLayer::enterLayer() {
        using r809 = decltype(std::declval<GJDropDownLayer>().enterLayer());
        using f809 = r809(*)(GJDropDownLayer*);
        return reinterpret_cast<f809>(base+0x3525c0)(this);
    }

    decltype(std::declval<GJDropDownLayer>().exitLayer(std::declval<cocos2d::CCObject*>())) GJDropDownLayer::exitLayer(cocos2d::CCObject* p0) {
        using r810 = decltype(std::declval<GJDropDownLayer>().exitLayer(std::declval<cocos2d::CCObject*>()));
        using f810 = r810(*)(GJDropDownLayer*, cocos2d::CCObject*);
        return reinterpret_cast<f810>(base+0x352670)(this, p0);
    }

    decltype(std::declval<GJDropDownLayer>().showLayer(std::declval<bool>())) GJDropDownLayer::showLayer(bool p0) {
        using r811 = decltype(std::declval<GJDropDownLayer>().showLayer(std::declval<bool>()));
        using f811 = r811(*)(GJDropDownLayer*, bool);
        return reinterpret_cast<f811>(base+0x3526c0)(this, p0);
    }

    decltype(std::declval<GJDropDownLayer>().hideLayer(std::declval<bool>())) GJDropDownLayer::hideLayer(bool p0) {
        using r812 = decltype(std::declval<GJDropDownLayer>().hideLayer(std::declval<bool>()));
        using f812 = r812(*)(GJDropDownLayer*, bool);
        return reinterpret_cast<f812>(base+0x3527b0)(this, p0);
    }

    decltype(std::declval<GJDropDownLayer>().layerVisible()) GJDropDownLayer::layerVisible() {
        using r813 = decltype(std::declval<GJDropDownLayer>().layerVisible());
        using f813 = r813(*)(GJDropDownLayer*);
        return reinterpret_cast<f813>(base+0x3528b0)(this);
    }

    decltype(std::declval<GJDropDownLayer>().layerHidden()) GJDropDownLayer::layerHidden() {
        using r814 = decltype(std::declval<GJDropDownLayer>().layerHidden());
        using f814 = r814(*)(GJDropDownLayer*);
        return reinterpret_cast<f814>(base+0x3528d0)(this);
    }

    decltype(std::declval<GJDropDownLayer>().enterAnimFinished()) GJDropDownLayer::enterAnimFinished() {
        using r815 = decltype(std::declval<GJDropDownLayer>().enterAnimFinished());
        using f815 = r815(*)(GJDropDownLayer*);
        return reinterpret_cast<f815>(base+0x3528a0)(this);
    }

    decltype(std::declval<GJDropDownLayer>().disableUI()) GJDropDownLayer::disableUI() {
        using r816 = decltype(std::declval<GJDropDownLayer>().disableUI());
        using f816 = r816(*)(GJDropDownLayer*);
        return reinterpret_cast<f816>(base+0x352580)(this);
    }

    decltype(std::declval<GJDropDownLayer>().enableUI()) GJDropDownLayer::enableUI() {
        using r817 = decltype(std::declval<GJDropDownLayer>().enableUI());
        using f817 = r817(*)(GJDropDownLayer*);
        return reinterpret_cast<f817>(base+0x3525a0)(this);
    }

    decltype(std::declval<GJDropDownLayer>().draw()) GJDropDownLayer::draw() {
        using r818 = decltype(std::declval<GJDropDownLayer>().draw());
        using f818 = r818(*)(GJDropDownLayer*);
        return reinterpret_cast<f818>(base+0x352910)(this);
    }

    decltype(std::declval<GJDropDownLayer>().init(std::declval<char const*>(), std::declval<float>())) GJDropDownLayer::init(char const* p0, float p1) {
        using r819 = decltype(std::declval<GJDropDownLayer>().init(std::declval<char const*>(), std::declval<float>()));
        using f819 = r819(*)(GJDropDownLayer*, char const*, float);
        return reinterpret_cast<f819>(base+0x352100)(this, p0, p1);
    }

    decltype(std::declval<GJDropDownLayer>().registerWithTouchDispatcher()) GJDropDownLayer::registerWithTouchDispatcher() {
        using r820 = decltype(std::declval<GJDropDownLayer>().registerWithTouchDispatcher());
        using f820 = r820(*)(GJDropDownLayer*);
        return reinterpret_cast<f820>(base+0x3525f0)(this);
    }

    decltype(std::declval<GJDropDownLayer>().keyBackClicked()) GJDropDownLayer::keyBackClicked() {
        using r821 = decltype(std::declval<GJDropDownLayer>().keyBackClicked());
        using f821 = r821(*)(GJDropDownLayer*);
        return reinterpret_cast<f821>(base+0x352630)(this);
    }

    decltype(std::declval<GJDropDownLayer>().create(std::declval<char const*>())) GJDropDownLayer::create(char const* p0) {
        using r822 = decltype(std::declval<GJDropDownLayer>().create(std::declval<char const*>()));
        using f822 = r822(*)(char const*);
        return reinterpret_cast<f822>(base+0x352530)(p0);

    }

    decltype(std::declval<UILayer>().create()) UILayer::create() {
        using r823 = decltype(std::declval<UILayer>().create());
        using f823 = r823(*)();
        return reinterpret_cast<f823>(base+0x27fd10)();

    }

    decltype(std::declval<UILayer>().disableMenu()) UILayer::disableMenu() {
        using r824 = decltype(std::declval<UILayer>().disableMenu());
        using f824 = r824(*)(UILayer*);
        return reinterpret_cast<f824>(base+0x280960)(this);
    }

    decltype(std::declval<UILayer>().enableMenu()) UILayer::enableMenu() {
        using r825 = decltype(std::declval<UILayer>().enableMenu());
        using f825 = r825(*)(UILayer*);
        return reinterpret_cast<f825>(base+0x280940)(this);
    }

    decltype(std::declval<UILayer>().pCommand(std::declval<cocos2d::CCNode*>())) UILayer::pCommand(cocos2d::CCNode* p0) {
        using r826 = decltype(std::declval<UILayer>().pCommand(std::declval<cocos2d::CCNode*>()));
        using f826 = r826(*)(UILayer*, cocos2d::CCNode*);
        return reinterpret_cast<f826>(base+0x280830)(this, p0);
    }

    decltype(std::declval<UILayer>().toggleCheckpointsMenu(std::declval<bool>())) UILayer::toggleCheckpointsMenu(bool p0) {
        using r827 = decltype(std::declval<UILayer>().toggleCheckpointsMenu(std::declval<bool>()));
        using f827 = r827(*)(UILayer*, bool);
        return reinterpret_cast<f827>(base+0x280430)(this, p0);
    }

    decltype(std::declval<RetryLevelLayer>().create()) RetryLevelLayer::create() {
        using r828 = decltype(std::declval<RetryLevelLayer>().create());
        using f828 = r828(*)();
        return reinterpret_cast<f828>(base+0x28dd60)();

    }

    decltype(std::declval<SetGroupIDLayer>().onNextGroupID1(std::declval<cocos2d::CCObject*>())) SetGroupIDLayer::onNextGroupID1(cocos2d::CCObject* p0) {
        using r829 = decltype(std::declval<SetGroupIDLayer>().onNextGroupID1(std::declval<cocos2d::CCObject*>()));
        using f829 = r829(*)(SetGroupIDLayer*, cocos2d::CCObject*);
        return reinterpret_cast<f829>(base+0x1967a0)(this, p0);
    }

    decltype(std::declval<SetGroupIDLayer>().textChanged(std::declval<CCTextInputNode*>())) SetGroupIDLayer::textChanged(CCTextInputNode* p0) {
        using r830 = decltype(std::declval<SetGroupIDLayer>().textChanged(std::declval<CCTextInputNode*>()));
        using f830 = r830(*)(SetGroupIDLayer*, CCTextInputNode*);
        return reinterpret_cast<f830>(base+0x197af0)(this, p0);
    }

    decltype(std::declval<SetGroupIDLayer>().updateGroupIDLabel()) SetGroupIDLayer::updateGroupIDLabel() {
        using r831 = decltype(std::declval<SetGroupIDLayer>().updateGroupIDLabel());
        using f831 = r831(*)(SetGroupIDLayer*);
        return reinterpret_cast<f831>(base+0x197260)(this);
    }

    SetGroupIDLayer::~SetGroupIDLayer() {
        jumpDestructor(0x194410)
    }

    decltype(std::declval<SetIDLayer>().create(std::declval<GameObject*>())) SetIDLayer::create(GameObject* p0) {
        using r833 = decltype(std::declval<SetIDLayer>().create(std::declval<GameObject*>()));
        using f833 = r833(*)(GameObject*);
        return reinterpret_cast<f833>(base+0x168f20)(p0);

    }

    decltype(std::declval<SetItemIDLayer>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) SetItemIDLayer::create(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r834 = decltype(std::declval<SetItemIDLayer>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f834 = r834(*)(EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f834>(base+0x5a830)(p0, p1);

    }

    decltype(std::declval<SetTargetIDLayer>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>(), std::declval<gd::string>())) SetTargetIDLayer::create(EffectGameObject* p0, cocos2d::CCArray* p1, gd::string p2) {
        using r835 = decltype(std::declval<SetTargetIDLayer>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>(), std::declval<gd::string>()));
        using f835 = r835(*)(EffectGameObject*, cocos2d::CCArray*, gd::string);
        return reinterpret_cast<f835>(base+0x159d20)(p0, p1, p2);

    }

    decltype(std::declval<SetTargetIDLayer>().onTargetIDArrow(std::declval<cocos2d::CCObject*>())) SetTargetIDLayer::onTargetIDArrow(cocos2d::CCObject* p0) {
        using r836 = decltype(std::declval<SetTargetIDLayer>().onTargetIDArrow(std::declval<cocos2d::CCObject*>()));
        using f836 = r836(*)(SetTargetIDLayer*, cocos2d::CCObject*);
        return reinterpret_cast<f836>(base+0x15aed0)(this, p0);
    }

    decltype(std::declval<SetTargetIDLayer>().textChanged(std::declval<CCTextInputNode*>())) SetTargetIDLayer::textChanged(CCTextInputNode* p0) {
        using r837 = decltype(std::declval<SetTargetIDLayer>().textChanged(std::declval<CCTextInputNode*>()));
        using f837 = r837(*)(SetTargetIDLayer*, CCTextInputNode*);
        return reinterpret_cast<f837>(base+0x15b6c0)(this, p0);
    }

    decltype(std::declval<SetTargetIDLayer>().updateTargetID()) SetTargetIDLayer::updateTargetID() {
        using r838 = decltype(std::declval<SetTargetIDLayer>().updateTargetID());
        using f838 = r838(*)(SetTargetIDLayer*);
        return reinterpret_cast<f838>(base+0x15b4a0)(this);
    }

    decltype(std::declval<SetupAnimationPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) SetupAnimationPopup::create(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r839 = decltype(std::declval<SetupAnimationPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f839 = r839(*)(EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f839>(base+0x208b70)(p0, p1);

    }

    decltype(std::declval<SetupAnimationPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>())) SetupAnimationPopup::onTargetIDArrow(cocos2d::CCObject* p0) {
        using r840 = decltype(std::declval<SetupAnimationPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>()));
        using f840 = r840(*)(SetupAnimationPopup*, cocos2d::CCObject*);
        return reinterpret_cast<f840>(base+0x209fc0)(this, p0);
    }

    decltype(std::declval<SetupAnimationPopup>().textChanged(std::declval<CCTextInputNode*>())) SetupAnimationPopup::textChanged(CCTextInputNode* p0) {
        using r841 = decltype(std::declval<SetupAnimationPopup>().textChanged(std::declval<CCTextInputNode*>()));
        using f841 = r841(*)(SetupAnimationPopup*, CCTextInputNode*);
        return reinterpret_cast<f841>(base+0x20ab30)(this, p0);
    }

    decltype(std::declval<SetupAnimationPopup>().updateTargetID()) SetupAnimationPopup::updateTargetID() {
        using r842 = decltype(std::declval<SetupAnimationPopup>().updateTargetID());
        using f842 = r842(*)(SetupAnimationPopup*);
        return reinterpret_cast<f842>(base+0x20a910)(this);
    }

    decltype(std::declval<SetupCollisionTriggerPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) SetupCollisionTriggerPopup::create(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r843 = decltype(std::declval<SetupCollisionTriggerPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f843 = r843(*)(EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f843>(base+0x1d6120)(p0, p1);

    }

    decltype(std::declval<SetupCollisionTriggerPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>())) SetupCollisionTriggerPopup::onTargetIDArrow(cocos2d::CCObject* p0) {
        using r844 = decltype(std::declval<SetupCollisionTriggerPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>()));
        using f844 = r844(*)(SetupCollisionTriggerPopup*, cocos2d::CCObject*);
        return reinterpret_cast<f844>(base+0x1d77b0)(this, p0);
    }

    decltype(std::declval<SetupCollisionTriggerPopup>().textChanged(std::declval<CCTextInputNode*>())) SetupCollisionTriggerPopup::textChanged(CCTextInputNode* p0) {
        using r845 = decltype(std::declval<SetupCollisionTriggerPopup>().textChanged(std::declval<CCTextInputNode*>()));
        using f845 = r845(*)(SetupCollisionTriggerPopup*, CCTextInputNode*);
        return reinterpret_cast<f845>(base+0x1d84d0)(this, p0);
    }

    decltype(std::declval<SetupCollisionTriggerPopup>().updateTargetID()) SetupCollisionTriggerPopup::updateTargetID() {
        using r846 = decltype(std::declval<SetupCollisionTriggerPopup>().updateTargetID());
        using f846 = r846(*)(SetupCollisionTriggerPopup*);
        return reinterpret_cast<f846>(base+0x1d82b0)(this);
    }

    decltype(std::declval<SetupCountTriggerPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) SetupCountTriggerPopup::create(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r847 = decltype(std::declval<SetupCountTriggerPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f847 = r847(*)(EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f847>(base+0x15c6c0)(p0, p1);

    }

    decltype(std::declval<SetupCountTriggerPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>())) SetupCountTriggerPopup::onTargetIDArrow(cocos2d::CCObject* p0) {
        using r848 = decltype(std::declval<SetupCountTriggerPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>()));
        using f848 = r848(*)(SetupCountTriggerPopup*, cocos2d::CCObject*);
        return reinterpret_cast<f848>(base+0x15dd40)(this, p0);
    }

    decltype(std::declval<SetupCountTriggerPopup>().textChanged(std::declval<CCTextInputNode*>())) SetupCountTriggerPopup::textChanged(CCTextInputNode* p0) {
        using r849 = decltype(std::declval<SetupCountTriggerPopup>().textChanged(std::declval<CCTextInputNode*>()));
        using f849 = r849(*)(SetupCountTriggerPopup*, CCTextInputNode*);
        return reinterpret_cast<f849>(base+0x15e9a0)(this, p0);
    }

    decltype(std::declval<SetupCountTriggerPopup>().updateTargetID()) SetupCountTriggerPopup::updateTargetID() {
        using r850 = decltype(std::declval<SetupCountTriggerPopup>().updateTargetID());
        using f850 = r850(*)(SetupCountTriggerPopup*);
        return reinterpret_cast<f850>(base+0x15e8a0)(this);
    }

    decltype(std::declval<SetupInstantCountPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) SetupInstantCountPopup::create(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r851 = decltype(std::declval<SetupInstantCountPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f851 = r851(*)(EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f851>(base+0x352c10)(p0, p1);

    }

    decltype(std::declval<SetupInstantCountPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>())) SetupInstantCountPopup::onTargetIDArrow(cocos2d::CCObject* p0) {
        using r852 = decltype(std::declval<SetupInstantCountPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>()));
        using f852 = r852(*)(SetupInstantCountPopup*, cocos2d::CCObject*);
        return reinterpret_cast<f852>(base+0x354520)(this, p0);
    }

    decltype(std::declval<SetupInstantCountPopup>().textChanged(std::declval<CCTextInputNode*>())) SetupInstantCountPopup::textChanged(CCTextInputNode* p0) {
        using r853 = decltype(std::declval<SetupInstantCountPopup>().textChanged(std::declval<CCTextInputNode*>()));
        using f853 = r853(*)(SetupInstantCountPopup*, CCTextInputNode*);
        return reinterpret_cast<f853>(base+0x355270)(this, p0);
    }

    decltype(std::declval<SetupInstantCountPopup>().updateTargetID()) SetupInstantCountPopup::updateTargetID() {
        using r854 = decltype(std::declval<SetupInstantCountPopup>().updateTargetID());
        using f854 = r854(*)(SetupInstantCountPopup*);
        return reinterpret_cast<f854>(base+0x355170)(this);
    }

    decltype(std::declval<SetupInteractObjectPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) SetupInteractObjectPopup::create(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r855 = decltype(std::declval<SetupInteractObjectPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f855 = r855(*)(EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f855>(base+0x29a400)(p0, p1);

    }

    decltype(std::declval<SetupInteractObjectPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>())) SetupInteractObjectPopup::onTargetIDArrow(cocos2d::CCObject* p0) {
        using r856 = decltype(std::declval<SetupInteractObjectPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>()));
        using f856 = r856(*)(SetupInteractObjectPopup*, cocos2d::CCObject*);
        return reinterpret_cast<f856>(base+0x29bbc0)(this, p0);
    }

    decltype(std::declval<SetupInteractObjectPopup>().textChanged(std::declval<CCTextInputNode*>())) SetupInteractObjectPopup::textChanged(CCTextInputNode* p0) {
        using r857 = decltype(std::declval<SetupInteractObjectPopup>().textChanged(std::declval<CCTextInputNode*>()));
        using f857 = r857(*)(SetupInteractObjectPopup*, CCTextInputNode*);
        return reinterpret_cast<f857>(base+0x29c2b0)(this, p0);
    }

    decltype(std::declval<SetupInteractObjectPopup>().updateTargetID()) SetupInteractObjectPopup::updateTargetID() {
        using r858 = decltype(std::declval<SetupInteractObjectPopup>().updateTargetID());
        using f858 = r858(*)(SetupInteractObjectPopup*);
        return reinterpret_cast<f858>(base+0x29c120)(this);
    }

    decltype(std::declval<SetupObjectTogglePopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) SetupObjectTogglePopup::create(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r859 = decltype(std::declval<SetupObjectTogglePopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f859 = r859(*)(EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f859>(base+0x1c0860)(p0, p1);

    }

    decltype(std::declval<SetupObjectTogglePopup>().init(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) SetupObjectTogglePopup::init(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r860 = decltype(std::declval<SetupObjectTogglePopup>().init(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f860 = r860(*)(SetupObjectTogglePopup*, EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f860>(base+0x1c0a40)(this, p0, p1);
    }

    decltype(std::declval<SetupObjectTogglePopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>())) SetupObjectTogglePopup::onTargetIDArrow(cocos2d::CCObject* p0) {
        using r861 = decltype(std::declval<SetupObjectTogglePopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>()));
        using f861 = r861(*)(SetupObjectTogglePopup*, cocos2d::CCObject*);
        return reinterpret_cast<f861>(base+0x1c1c40)(this, p0);
    }

    decltype(std::declval<SetupObjectTogglePopup>().textChanged(std::declval<CCTextInputNode*>())) SetupObjectTogglePopup::textChanged(CCTextInputNode* p0) {
        using r862 = decltype(std::declval<SetupObjectTogglePopup>().textChanged(std::declval<CCTextInputNode*>()));
        using f862 = r862(*)(SetupObjectTogglePopup*, CCTextInputNode*);
        return reinterpret_cast<f862>(base+0x1c2660)(this, p0);
    }

    decltype(std::declval<SetupObjectTogglePopup>().updateTargetID()) SetupObjectTogglePopup::updateTargetID() {
        using r863 = decltype(std::declval<SetupObjectTogglePopup>().updateTargetID());
        using f863 = r863(*)(SetupObjectTogglePopup*);
        return reinterpret_cast<f863>(base+0x1c2440)(this);
    }

    decltype(std::declval<SetupOpacityPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) SetupOpacityPopup::create(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r864 = decltype(std::declval<SetupOpacityPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f864 = r864(*)(EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f864>(base+0x32b70)(p0, p1);

    }

    decltype(std::declval<SetupOpacityPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>())) SetupOpacityPopup::onTargetIDArrow(cocos2d::CCObject* p0) {
        using r865 = decltype(std::declval<SetupOpacityPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>()));
        using f865 = r865(*)(SetupOpacityPopup*, cocos2d::CCObject*);
        return reinterpret_cast<f865>(base+0x340a0)(this, p0);
    }

    decltype(std::declval<SetupOpacityPopup>().textChanged(std::declval<CCTextInputNode*>())) SetupOpacityPopup::textChanged(CCTextInputNode* p0) {
        using r866 = decltype(std::declval<SetupOpacityPopup>().textChanged(std::declval<CCTextInputNode*>()));
        using f866 = r866(*)(SetupOpacityPopup*, CCTextInputNode*);
        return reinterpret_cast<f866>(base+0x34a60)(this, p0);
    }

    decltype(std::declval<SetupOpacityPopup>().updateTargetID()) SetupOpacityPopup::updateTargetID() {
        using r867 = decltype(std::declval<SetupOpacityPopup>().updateTargetID());
        using f867 = r867(*)(SetupOpacityPopup*);
        return reinterpret_cast<f867>(base+0x34760)(this);
    }

    decltype(std::declval<SetupPickupTriggerPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) SetupPickupTriggerPopup::create(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r868 = decltype(std::declval<SetupPickupTriggerPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f868 = r868(*)(EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f868>(base+0x35e70)(p0, p1);

    }

    decltype(std::declval<SetupPickupTriggerPopup>().onItemIDArrow(std::declval<cocos2d::CCObject*>())) SetupPickupTriggerPopup::onItemIDArrow(cocos2d::CCObject* p0) {
        using r869 = decltype(std::declval<SetupPickupTriggerPopup>().onItemIDArrow(std::declval<cocos2d::CCObject*>()));
        using f869 = r869(*)(SetupPickupTriggerPopup*, cocos2d::CCObject*);
        return reinterpret_cast<f869>(base+0x37100)(this, p0);
    }

    decltype(std::declval<SetupPickupTriggerPopup>().onNextItemID(std::declval<cocos2d::CCObject*>())) SetupPickupTriggerPopup::onNextItemID(cocos2d::CCObject* p0) {
        using r870 = decltype(std::declval<SetupPickupTriggerPopup>().onNextItemID(std::declval<cocos2d::CCObject*>()));
        using f870 = r870(*)(SetupPickupTriggerPopup*, cocos2d::CCObject*);
        return reinterpret_cast<f870>(base+0x37260)(this, p0);
    }

    decltype(std::declval<SetupPickupTriggerPopup>().textChanged(std::declval<CCTextInputNode*>())) SetupPickupTriggerPopup::textChanged(CCTextInputNode* p0) {
        using r871 = decltype(std::declval<SetupPickupTriggerPopup>().textChanged(std::declval<CCTextInputNode*>()));
        using f871 = r871(*)(SetupPickupTriggerPopup*, CCTextInputNode*);
        return reinterpret_cast<f871>(base+0x37ca0)(this, p0);
    }

    decltype(std::declval<SetupPickupTriggerPopup>().updateItemID()) SetupPickupTriggerPopup::updateItemID() {
        using r872 = decltype(std::declval<SetupPickupTriggerPopup>().updateItemID());
        using f872 = r872(*)(SetupPickupTriggerPopup*);
        return reinterpret_cast<f872>(base+0x37ab0)(this);
    }

    decltype(std::declval<SetupShakePopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) SetupShakePopup::create(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r873 = decltype(std::declval<SetupShakePopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f873 = r873(*)(EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f873>(base+0x3adc00)(p0, p1);

    }

    decltype(std::declval<SetupSpawnPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) SetupSpawnPopup::create(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r874 = decltype(std::declval<SetupSpawnPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f874 = r874(*)(EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f874>(base+0x139790)(p0, p1);

    }

    decltype(std::declval<SetupSpawnPopup>().createToggleButton(std::declval<gd::string>(), std::declval<cocos2d::SEL_MenuHandler>(), std::declval<bool>(), std::declval<cocos2d::CCMenu*>(), std::declval<cocos2d::CCPoint>(), std::declval<cocos2d::CCArray*>())) SetupSpawnPopup::createToggleButton(gd::string p0, cocos2d::SEL_MenuHandler p1, bool p2, cocos2d::CCMenu* p3, cocos2d::CCPoint p4, cocos2d::CCArray* p5) {
        using r875 = decltype(std::declval<SetupSpawnPopup>().createToggleButton(std::declval<gd::string>(), std::declval<cocos2d::SEL_MenuHandler>(), std::declval<bool>(), std::declval<cocos2d::CCMenu*>(), std::declval<cocos2d::CCPoint>(), std::declval<cocos2d::CCArray*>()));
        using f875 = r875(*)(SetupSpawnPopup*, gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*);
        return reinterpret_cast<f875>(base+0x13b0e0)(this, p0, p1, p2, p3, p4, p5);
    }

    decltype(std::declval<SetupSpawnPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>())) SetupSpawnPopup::onTargetIDArrow(cocos2d::CCObject* p0) {
        using r876 = decltype(std::declval<SetupSpawnPopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>()));
        using f876 = r876(*)(SetupSpawnPopup*, cocos2d::CCObject*);
        return reinterpret_cast<f876>(base+0x13ad80)(this, p0);
    }

    decltype(std::declval<SetupSpawnPopup>().textChanged(std::declval<CCTextInputNode*>())) SetupSpawnPopup::textChanged(CCTextInputNode* p0) {
        using r877 = decltype(std::declval<SetupSpawnPopup>().textChanged(std::declval<CCTextInputNode*>()));
        using f877 = r877(*)(SetupSpawnPopup*, CCTextInputNode*);
        return reinterpret_cast<f877>(base+0x13b990)(this, p0);
    }

    decltype(std::declval<SetupSpawnPopup>().updateTargetID()) SetupSpawnPopup::updateTargetID() {
        using r878 = decltype(std::declval<SetupSpawnPopup>().updateTargetID());
        using f878 = r878(*)(SetupSpawnPopup*);
        return reinterpret_cast<f878>(base+0x13b770)(this);
    }

    decltype(std::declval<SetupTouchTogglePopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) SetupTouchTogglePopup::create(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r879 = decltype(std::declval<SetupTouchTogglePopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f879 = r879(*)(EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f879>(base+0x1576a0)(p0, p1);

    }

    decltype(std::declval<SetupTouchTogglePopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>())) SetupTouchTogglePopup::onTargetIDArrow(cocos2d::CCObject* p0) {
        using r880 = decltype(std::declval<SetupTouchTogglePopup>().onTargetIDArrow(std::declval<cocos2d::CCObject*>()));
        using f880 = r880(*)(SetupTouchTogglePopup*, cocos2d::CCObject*);
        return reinterpret_cast<f880>(base+0x158b60)(this, p0);
    }

    decltype(std::declval<SetupTouchTogglePopup>().textChanged(std::declval<CCTextInputNode*>())) SetupTouchTogglePopup::textChanged(CCTextInputNode* p0) {
        using r881 = decltype(std::declval<SetupTouchTogglePopup>().textChanged(std::declval<CCTextInputNode*>()));
        using f881 = r881(*)(SetupTouchTogglePopup*, CCTextInputNode*);
        return reinterpret_cast<f881>(base+0x1596a0)(this, p0);
    }

    decltype(std::declval<SetupTouchTogglePopup>().updateTargetID()) SetupTouchTogglePopup::updateTargetID() {
        using r882 = decltype(std::declval<SetupTouchTogglePopup>().updateTargetID());
        using f882 = r882(*)(SetupTouchTogglePopup*);
        return reinterpret_cast<f882>(base+0x159480)(this);
    }

    decltype(std::declval<PauseLayer>().create(std::declval<bool>())) PauseLayer::create(bool p0) {
        using r883 = decltype(std::declval<PauseLayer>().create(std::declval<bool>()));
        using f883 = r883(*)(bool);
        return reinterpret_cast<f883>(base+0x20b1e0)(p0);

    }

    decltype(std::declval<PauseLayer>().onEdit(std::declval<cocos2d::CCObject*>())) PauseLayer::onEdit(cocos2d::CCObject* p0) {
        using r884 = decltype(std::declval<PauseLayer>().onEdit(std::declval<cocos2d::CCObject*>()));
        using f884 = r884(*)(PauseLayer*, cocos2d::CCObject*);
        return reinterpret_cast<f884>(base+0x20c630)(this, p0);
    }

    decltype(std::declval<TopArtistsLayer>().create()) TopArtistsLayer::create() {
        using r885 = decltype(std::declval<TopArtistsLayer>().create());
        using f885 = r885(*)();
        return reinterpret_cast<f885>(base+0x192a90)();

    }

    decltype(std::declval<TopArtistsLayer>().setupLeaderboard(std::declval<cocos2d::CCArray*>())) TopArtistsLayer::setupLeaderboard(cocos2d::CCArray* p0) {
        using r886 = decltype(std::declval<TopArtistsLayer>().setupLeaderboard(std::declval<cocos2d::CCArray*>()));
        using f886 = r886(*)(TopArtistsLayer*, cocos2d::CCArray*);
        return reinterpret_cast<f886>(base+0x193420)(this, p0);
    }

    decltype(std::declval<TopArtistsLayer>().init()) TopArtistsLayer::init() {
        using r887 = decltype(std::declval<TopArtistsLayer>().init());
        using f887 = r887(*)(TopArtistsLayer*);
        return reinterpret_cast<f887>(base+0x192c30)(this);
    }

    decltype(std::declval<TopArtistsLayer>().loadPage(std::declval<int>())) TopArtistsLayer::loadPage(int p0) {
        using r888 = decltype(std::declval<TopArtistsLayer>().loadPage(std::declval<int>()));
        using f888 = r888(*)(TopArtistsLayer*, int);
        return reinterpret_cast<f888>(base+0x193b60)(this, p0);
    }

    decltype(std::declval<TopArtistsLayer>().setupPageInfo(std::declval<gd::string>(), std::declval<char const*>())) TopArtistsLayer::setupPageInfo(gd::string p0, char const* p1) {
        using r889 = decltype(std::declval<TopArtistsLayer>().setupPageInfo(std::declval<gd::string>(), std::declval<char const*>()));
        using f889 = r889(*)(TopArtistsLayer*, gd::string, char const*);
        return reinterpret_cast<f889>(base+0x193730)(this, p0, p1);
    }

    decltype(std::declval<MenuGameLayer>().resetPlayer()) MenuGameLayer::resetPlayer() {
        using r890 = decltype(std::declval<MenuGameLayer>().resetPlayer());
        using f890 = r890(*)(MenuGameLayer*);
        return reinterpret_cast<f890>(base+0x28fdc0)(this);
    }

    decltype(std::declval<MenuGameLayer>().update(std::declval<float>())) MenuGameLayer::update(float p0) {
        using r891 = decltype(std::declval<MenuGameLayer>().update(std::declval<float>()));
        using f891 = r891(*)(MenuGameLayer*, float);
        return reinterpret_cast<f891>(base+0x28fa70)(this, p0);
    }

    decltype(std::declval<MoreVideoOptionsLayer>().create()) MoreVideoOptionsLayer::create() {
        using r892 = decltype(std::declval<MoreVideoOptionsLayer>().create());
        using f892 = r892(*)();
        return reinterpret_cast<f892>(base+0x443c10)();

    }

    decltype(std::declval<MoreVideoOptionsLayer>().init()) MoreVideoOptionsLayer::init() {
        using r893 = decltype(std::declval<MoreVideoOptionsLayer>().init());
        using f893 = r893(*)(MoreVideoOptionsLayer*);
        return reinterpret_cast<f893>(base+0x444150)(this);
    }

    decltype(std::declval<AudioEffectsLayer>().audioStep(std::declval<float>())) AudioEffectsLayer::audioStep(float p0) {
        using r894 = decltype(std::declval<AudioEffectsLayer>().audioStep(std::declval<float>()));
        using f894 = r894(*)(AudioEffectsLayer*, float);
        return reinterpret_cast<f894>(base+0x271f40)(this, p0);
    }

    decltype(std::declval<AudioEffectsLayer>().create(std::declval<gd::string>())) AudioEffectsLayer::create(gd::string p0) {
        using r895 = decltype(std::declval<AudioEffectsLayer>().create(std::declval<gd::string>()));
        using f895 = r895(*)(gd::string);
        return reinterpret_cast<f895>(base+0x271a00)(p0);

    }

    decltype(std::declval<AudioEffectsLayer>().resetAudioVars()) AudioEffectsLayer::resetAudioVars() {
        using r896 = decltype(std::declval<AudioEffectsLayer>().resetAudioVars());
        using f896 = r896(*)(AudioEffectsLayer*);
        return reinterpret_cast<f896>(base+0x271ee0)(this);
    }

    decltype(std::declval<CollisionBlockPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>())) CollisionBlockPopup::create(EffectGameObject* p0, cocos2d::CCArray* p1) {
        using r897 = decltype(std::declval<CollisionBlockPopup>().create(std::declval<EffectGameObject*>(), std::declval<cocos2d::CCArray*>()));
        using f897 = r897(*)(EffectGameObject*, cocos2d::CCArray*);
        return reinterpret_cast<f897>(base+0x130010)(p0, p1);

    }

    decltype(std::declval<CollisionBlockPopup>().onNextItemID(std::declval<cocos2d::CCObject*>())) CollisionBlockPopup::onNextItemID(cocos2d::CCObject* p0) {
        using r898 = decltype(std::declval<CollisionBlockPopup>().onNextItemID(std::declval<cocos2d::CCObject*>()));
        using f898 = r898(*)(CollisionBlockPopup*, cocos2d::CCObject*);
        return reinterpret_cast<f898>(base+0x130e60)(this, p0);
    }

    decltype(std::declval<CreatorLayer>().onMyLevels(std::declval<cocos2d::CCObject*>())) CreatorLayer::onMyLevels(cocos2d::CCObject* p0) {
        using r899 = decltype(std::declval<CreatorLayer>().onMyLevels(std::declval<cocos2d::CCObject*>()));
        using f899 = r899(*)(CreatorLayer*, cocos2d::CCObject*);
        return reinterpret_cast<f899>(base+0x142b70)(this, p0);
    }

    decltype(std::declval<CreatorLayer>().onSavedLevels(std::declval<cocos2d::CCObject*>())) CreatorLayer::onSavedLevels(cocos2d::CCObject* p0) {
        using r900 = decltype(std::declval<CreatorLayer>().onSavedLevels(std::declval<cocos2d::CCObject*>()));
        using f900 = r900(*)(CreatorLayer*, cocos2d::CCObject*);
        return reinterpret_cast<f900>(base+0x142860)(this, p0);
    }

    decltype(std::declval<CustomSongLayer>().init(std::declval<LevelSettingsObject*>())) CustomSongLayer::init(LevelSettingsObject* p0) {
        using r901 = decltype(std::declval<CustomSongLayer>().init(std::declval<LevelSettingsObject*>()));
        using f901 = r901(*)(CustomSongLayer*, LevelSettingsObject*);
        return reinterpret_cast<f901>(base+0xf06f0)(this, p0);
    }

    decltype(std::declval<CustomSongLayer>().onArtists(std::declval<cocos2d::CCObject*>())) CustomSongLayer::onArtists(cocos2d::CCObject* p0) {
        using r902 = decltype(std::declval<CustomSongLayer>().onArtists(std::declval<cocos2d::CCObject*>()));
        using f902 = r902(*)(CustomSongLayer*, cocos2d::CCObject*);
        return reinterpret_cast<f902>(base+0xf1950)(this, p0);
    }

    decltype(std::declval<CustomSongLayer>().onSongBrowser(std::declval<cocos2d::CCObject*>())) CustomSongLayer::onSongBrowser(cocos2d::CCObject* p0) {
        using r903 = decltype(std::declval<CustomSongLayer>().onSongBrowser(std::declval<cocos2d::CCObject*>()));
        using f903 = r903(*)(CustomSongLayer*, cocos2d::CCObject*);
        return reinterpret_cast<f903>(base+0xf18a0)(this, p0);
    }

    decltype(std::declval<EditorOptionsLayer>().onButtonsPerRow(std::declval<cocos2d::CCObject*>())) EditorOptionsLayer::onButtonsPerRow(cocos2d::CCObject* p0) {
        using r904 = decltype(std::declval<EditorOptionsLayer>().onButtonsPerRow(std::declval<cocos2d::CCObject*>()));
        using f904 = r904(*)(EditorOptionsLayer*, cocos2d::CCObject*);
        return reinterpret_cast<f904>(base+0x147b30)(this, p0);
    }

    decltype(std::declval<EndLevelLayer>().create()) EndLevelLayer::create() {
        using r905 = decltype(std::declval<EndLevelLayer>().create());
        using f905 = r905(*)();
        return reinterpret_cast<f905>(base+0x2787d0)();

    }

    EditorPauseLayer::~EditorPauseLayer() {
        jumpDestructor(0x13c3b0)
    }

    decltype(std::declval<EditorPauseLayer>().keyBackClicked()) EditorPauseLayer::keyBackClicked() {
        using r907 = decltype(std::declval<EditorPauseLayer>().keyBackClicked());
        using f907 = r907(*)(EditorPauseLayer*);
        return reinterpret_cast<f907>(base+0x13f320)(this);
    }

    decltype(std::declval<EditorPauseLayer>().keyDown(std::declval<cocos2d::enumKeyCodes>())) EditorPauseLayer::keyDown(cocos2d::enumKeyCodes p0) {
        using r908 = decltype(std::declval<EditorPauseLayer>().keyDown(std::declval<cocos2d::enumKeyCodes>()));
        using f908 = r908(*)(EditorPauseLayer*, cocos2d::enumKeyCodes);
        return reinterpret_cast<f908>(base+0x13f3a0)(this, p0);
    }

    decltype(std::declval<EditorPauseLayer>().customSetup()) EditorPauseLayer::customSetup() {
        using r909 = decltype(std::declval<EditorPauseLayer>().customSetup());
        using f909 = r909(*)(EditorPauseLayer*);
        return reinterpret_cast<f909>(base+0x13cc00)(this);
    }

    decltype(std::declval<EditorPauseLayer>().FLAlert_Clicked(std::declval<FLAlertLayer*>(), std::declval<bool>())) EditorPauseLayer::FLAlert_Clicked(FLAlertLayer* p0, bool p1) {
        using r910 = decltype(std::declval<EditorPauseLayer>().FLAlert_Clicked(std::declval<FLAlertLayer*>(), std::declval<bool>()));
        using f910 = r910(*)(EditorPauseLayer*, FLAlertLayer*, bool);
        return reinterpret_cast<f910>(base+0x13f1b0)(this, p0, p1);
    }

    decltype(std::declval<EditorPauseLayer>().create(std::declval<LevelEditorLayer*>())) EditorPauseLayer::create(LevelEditorLayer* p0) {
        using r911 = decltype(std::declval<EditorPauseLayer>().create(std::declval<LevelEditorLayer*>()));
        using f911 = r911(*)(LevelEditorLayer*);
        return reinterpret_cast<f911>(base+0x13c680)(p0);

    }

    decltype(std::declval<EditorPauseLayer>().saveLevel()) EditorPauseLayer::saveLevel() {
        using r912 = decltype(std::declval<EditorPauseLayer>().saveLevel());
        using f912 = r912(*)(EditorPauseLayer*);
        return reinterpret_cast<f912>(base+0x13ebd0)(this);
    }

    decltype(std::declval<EditorPauseLayer>().init(std::declval<LevelEditorLayer*>())) EditorPauseLayer::init(LevelEditorLayer* p0) {
        using r913 = decltype(std::declval<EditorPauseLayer>().init(std::declval<LevelEditorLayer*>()));
        using f913 = r913(*)(EditorPauseLayer*, LevelEditorLayer*);
        return reinterpret_cast<f913>(base+0x13c7a0)(this, p0);
    }

    decltype(std::declval<ScrollingLayer>().create(std::declval<cocos2d::CCSize>(), std::declval<cocos2d::CCPoint>(), std::declval<float>())) ScrollingLayer::create(cocos2d::CCSize p0, cocos2d::CCPoint p1, float p2) {
        using r914 = decltype(std::declval<ScrollingLayer>().create(std::declval<cocos2d::CCSize>(), std::declval<cocos2d::CCPoint>(), std::declval<float>()));
        using f914 = r914(*)(cocos2d::CCSize, cocos2d::CCPoint, float);
        return reinterpret_cast<f914>(base+0x41a900)(p0, p1, p2);

    }

    GJListLayer::~GJListLayer() {
        jumpDestructor(0x344350)
    }

    CurrencyRewardLayer::~CurrencyRewardLayer() {
        jumpDestructor(0x447950)
    }

    decltype(std::declval<CurrencyRewardLayer>().update(std::declval<float>())) CurrencyRewardLayer::update(float p0) {
        using r917 = decltype(std::declval<CurrencyRewardLayer>().update(std::declval<float>()));
        using f917 = r917(*)(CurrencyRewardLayer*, float);
        return reinterpret_cast<f917>(base+0x44a5c0)(this, p0);
    }

    DialogLayer::~DialogLayer() {
        jumpDestructor(0x204720)
    }

    decltype(std::declval<DialogLayer>().onEnter()) DialogLayer::onEnter() {
        using r919 = decltype(std::declval<DialogLayer>().onEnter());
        using f919 = r919(*)(DialogLayer*);
        return reinterpret_cast<f919>(base+0x205900)(this);
    }

    decltype(std::declval<DialogLayer>().ccTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) DialogLayer::ccTouchBegan(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r920 = decltype(std::declval<DialogLayer>().ccTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f920 = r920(*)(DialogLayer*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f920>(base+0x205790)(this, p0, p1);
    }

    decltype(std::declval<DialogLayer>().ccTouchMoved(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) DialogLayer::ccTouchMoved(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r921 = decltype(std::declval<DialogLayer>().ccTouchMoved(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f921 = r921(*)(DialogLayer*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f921>(base+0x205820)(this, p0, p1);
    }

    decltype(std::declval<DialogLayer>().ccTouchEnded(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) DialogLayer::ccTouchEnded(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r922 = decltype(std::declval<DialogLayer>().ccTouchEnded(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f922 = r922(*)(DialogLayer*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f922>(base+0x2057e0)(this, p0, p1);
    }

    decltype(std::declval<DialogLayer>().ccTouchCancelled(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) DialogLayer::ccTouchCancelled(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r923 = decltype(std::declval<DialogLayer>().ccTouchCancelled(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f923 = r923(*)(DialogLayer*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f923>(base+0x205840)(this, p0, p1);
    }

    decltype(std::declval<DialogLayer>().registerWithTouchDispatcher()) DialogLayer::registerWithTouchDispatcher() {
        using r924 = decltype(std::declval<DialogLayer>().registerWithTouchDispatcher());
        using f924 = r924(*)(DialogLayer*);
        return reinterpret_cast<f924>(base+0x205890)(this);
    }

    decltype(std::declval<DialogLayer>().keyBackClicked()) DialogLayer::keyBackClicked() {
        using r925 = decltype(std::declval<DialogLayer>().keyBackClicked());
        using f925 = r925(*)(DialogLayer*);
        return reinterpret_cast<f925>(base+0x2056a0)(this);
    }

    decltype(std::declval<DialogLayer>().keyDown(std::declval<cocos2d::enumKeyCodes>())) DialogLayer::keyDown(cocos2d::enumKeyCodes p0) {
        using r926 = decltype(std::declval<DialogLayer>().keyDown(std::declval<cocos2d::enumKeyCodes>()));
        using f926 = r926(*)(DialogLayer*, cocos2d::enumKeyCodes);
        return reinterpret_cast<f926>(base+0x205ce0)(this, p0);
    }

    decltype(std::declval<DialogLayer>().fadeInTextFinished(std::declval<TextArea*>())) DialogLayer::fadeInTextFinished(TextArea* p0) {
        using r927 = decltype(std::declval<DialogLayer>().fadeInTextFinished(std::declval<TextArea*>()));
        using f927 = r927(*)(DialogLayer*, TextArea*);
        return reinterpret_cast<f927>(base+0x205930)(this, p0);
    }

    GJCommentListLayer::~GJCommentListLayer() {
        jumpDestructor(0x1482a0)
    }

    decltype(std::declval<GJCommentListLayer>().create(std::declval<BoomListView*>(), std::declval<char const*>(), std::declval<cocos2d::_ccColor4B>(), std::declval<float>(), std::declval<float>(), std::declval<bool>())) GJCommentListLayer::create(BoomListView* p0, char const* p1, cocos2d::_ccColor4B p2, float p3, float p4, bool p5) {
        using r929 = decltype(std::declval<GJCommentListLayer>().create(std::declval<BoomListView*>(), std::declval<char const*>(), std::declval<cocos2d::_ccColor4B>(), std::declval<float>(), std::declval<float>(), std::declval<bool>()));
        using f929 = r929(*)(BoomListView*, char const*, cocos2d::_ccColor4B, float, float, bool);
        return reinterpret_cast<f929>(base+0x147d00)(p0, p1, p2, p3, p4, p5);

    }

    MenuLayer::~MenuLayer() {
        jumpDestructor(0x1d1230)
    }

    decltype(std::declval<MenuLayer>().init()) MenuLayer::init() {
        using r931 = decltype(std::declval<MenuLayer>().init());
        using f931 = r931(*)(MenuLayer*);
        return reinterpret_cast<f931>(base+0x1d14b0)(this);
    }

    decltype(std::declval<MenuLayer>().keyBackClicked()) MenuLayer::keyBackClicked() {
        using r932 = decltype(std::declval<MenuLayer>().keyBackClicked());
        using f932 = r932(*)(MenuLayer*);
        return reinterpret_cast<f932>(base+0x1d3160)(this);
    }

    decltype(std::declval<MenuLayer>().keyDown(std::declval<cocos2d::enumKeyCodes>())) MenuLayer::keyDown(cocos2d::enumKeyCodes p0) {
        using r933 = decltype(std::declval<MenuLayer>().keyDown(std::declval<cocos2d::enumKeyCodes>()));
        using f933 = r933(*)(MenuLayer*, cocos2d::enumKeyCodes);
        return reinterpret_cast<f933>(base+0x1d33d0)(this, p0);
    }

    decltype(std::declval<MenuLayer>().googlePlaySignedIn()) MenuLayer::googlePlaySignedIn() {
        using r934 = decltype(std::declval<MenuLayer>().googlePlaySignedIn());
        using f934 = r934(*)(MenuLayer*);
        return reinterpret_cast<f934>(base+0x1d2f30)(this);
    }

    decltype(std::declval<MenuLayer>().FLAlert_Clicked(std::declval<FLAlertLayer*>(), std::declval<bool>())) MenuLayer::FLAlert_Clicked(FLAlertLayer* p0, bool p1) {
        using r935 = decltype(std::declval<MenuLayer>().FLAlert_Clicked(std::declval<FLAlertLayer*>(), std::declval<bool>()));
        using f935 = r935(*)(MenuLayer*, FLAlertLayer*, bool);
        return reinterpret_cast<f935>(base+0x1d3190)(this, p0, p1);
    }

    decltype(std::declval<MenuLayer>().onMoreGames(std::declval<cocos2d::CCObject*>())) MenuLayer::onMoreGames(cocos2d::CCObject* p0) {
        using r936 = decltype(std::declval<MenuLayer>().onMoreGames(std::declval<cocos2d::CCObject*>()));
        using f936 = r936(*)(MenuLayer*, cocos2d::CCObject*);
        return reinterpret_cast<f936>(base+0x1d2ad0)(this, p0);
    }

    decltype(std::declval<MenuLayer>().onQuit(std::declval<cocos2d::CCObject*>())) MenuLayer::onQuit(cocos2d::CCObject* p0) {
        using r937 = decltype(std::declval<MenuLayer>().onQuit(std::declval<cocos2d::CCObject*>()));
        using f937 = r937(*)(MenuLayer*, cocos2d::CCObject*);
        return reinterpret_cast<f937>(base+0x1d2b40)(this, p0);
    }

    decltype(std::declval<MenuLayer>().scene(std::declval<bool>())) MenuLayer::scene(bool p0) {
        using r938 = decltype(std::declval<MenuLayer>().scene(std::declval<bool>()));
        using f938 = r938(*)(MenuLayer*, bool);
        return reinterpret_cast<f938>(base+0x1d12d0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().addCircle(std::declval<CCCircleWave*>())) PlayLayer::addCircle(CCCircleWave* p0) {
        using r939 = decltype(std::declval<PlayLayer>().addCircle(std::declval<CCCircleWave*>()));
        using f939 = r939(*)(PlayLayer*, CCCircleWave*);
        return reinterpret_cast<f939>(base+0x7e0f0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().addObject(std::declval<GameObject*>())) PlayLayer::addObject(GameObject* p0) {
        using r940 = decltype(std::declval<PlayLayer>().addObject(std::declval<GameObject*>()));
        using f940 = r940(*)(PlayLayer*, GameObject*);
        return reinterpret_cast<f940>(base+0x70e50)(this, p0);
    }

    decltype(std::declval<PlayLayer>().addToGroupOld(std::declval<GameObject*>())) PlayLayer::addToGroupOld(GameObject* p0) {
        using r941 = decltype(std::declval<PlayLayer>().addToGroupOld(std::declval<GameObject*>()));
        using f941 = r941(*)(PlayLayer*, GameObject*);
        return reinterpret_cast<f941>(base+0x77680)(this, p0);
    }

    decltype(std::declval<PlayLayer>().addToSpeedObjects(std::declval<GameObject*>())) PlayLayer::addToSpeedObjects(GameObject* p0) {
        using r942 = decltype(std::declval<PlayLayer>().addToSpeedObjects(std::declval<GameObject*>()));
        using f942 = r942(*)(PlayLayer*, GameObject*);
        return reinterpret_cast<f942>(base+0x7cfc0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().animateInDualGround(std::declval<GameObject*>(), std::declval<float>(), std::declval<bool>())) PlayLayer::animateInDualGround(GameObject* p0, float p1, bool p2) {
        using r943 = decltype(std::declval<PlayLayer>().animateInDualGround(std::declval<GameObject*>(), std::declval<float>(), std::declval<bool>()));
        using f943 = r943(*)(PlayLayer*, GameObject*, float, bool);
        return reinterpret_cast<f943>(base+0x7d710)(this, p0, p1, p2);
    }

    decltype(std::declval<PlayLayer>().animateInGround(std::declval<bool>())) PlayLayer::animateInGround(bool p0) {
        using r944 = decltype(std::declval<PlayLayer>().animateInGround(std::declval<bool>()));
        using f944 = r944(*)(PlayLayer*, bool);
        return reinterpret_cast<f944>(base+0x7d9d0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().animateOutGround(std::declval<bool>())) PlayLayer::animateOutGround(bool p0) {
        using r945 = decltype(std::declval<PlayLayer>().animateOutGround(std::declval<bool>()));
        using f945 = r945(*)(PlayLayer*, bool);
        return reinterpret_cast<f945>(base+0x6f350)(this, p0);
    }

    decltype(std::declval<PlayLayer>().animateOutGroundFinished()) PlayLayer::animateOutGroundFinished() {
        using r946 = decltype(std::declval<PlayLayer>().animateOutGroundFinished());
        using f946 = r946(*)(PlayLayer*);
        return reinterpret_cast<f946>(base+0x7de80)(this);
    }

    decltype(std::declval<PlayLayer>().applyEnterEffect(std::declval<GameObject*>())) PlayLayer::applyEnterEffect(GameObject* p0) {
        using r947 = decltype(std::declval<PlayLayer>().applyEnterEffect(std::declval<GameObject*>()));
        using f947 = r947(*)(PlayLayer*, GameObject*);
        return reinterpret_cast<f947>(base+0x7c310)(this, p0);
    }

    decltype(std::declval<PlayLayer>().calculateColorValues(std::declval<EffectGameObject*>(), std::declval<EffectGameObject*>(), std::declval<int>(), std::declval<float>(), std::declval<ColorActionSprite*>(), std::declval<GJEffectManager*>())) PlayLayer::calculateColorValues(EffectGameObject* p0, EffectGameObject* p1, int p2, float p3, ColorActionSprite* p4, GJEffectManager* p5) {
        using r948 = decltype(std::declval<PlayLayer>().calculateColorValues(std::declval<EffectGameObject*>(), std::declval<EffectGameObject*>(), std::declval<int>(), std::declval<float>(), std::declval<ColorActionSprite*>(), std::declval<GJEffectManager*>()));
        using f948 = r948(*)(PlayLayer*, EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*);
        return reinterpret_cast<f948>(base+0x7aa10)(this, p0, p1, p2, p3, p4, p5);
    }

    decltype(std::declval<PlayLayer>().cameraMoveX(std::declval<float>(), std::declval<float>(), std::declval<float>())) PlayLayer::cameraMoveX(float p0, float p1, float p2) {
        using r949 = decltype(std::declval<PlayLayer>().cameraMoveX(std::declval<float>(), std::declval<float>(), std::declval<float>()));
        using f949 = r949(*)(PlayLayer*, float, float, float);
        return reinterpret_cast<f949>(base+0x7cbe0)(this, p0, p1, p2);
    }

    decltype(std::declval<PlayLayer>().cameraMoveY(std::declval<float>(), std::declval<float>(), std::declval<float>())) PlayLayer::cameraMoveY(float p0, float p1, float p2) {
        using r950 = decltype(std::declval<PlayLayer>().cameraMoveY(std::declval<float>(), std::declval<float>(), std::declval<float>()));
        using f950 = r950(*)(PlayLayer*, float, float, float);
        return reinterpret_cast<f950>(base+0x7cc60)(this, p0, p1, p2);
    }

    decltype(std::declval<PlayLayer>().checkCollisions(std::declval<PlayerObject*>(), std::declval<float>())) PlayLayer::checkCollisions(PlayerObject* p0, float p1) {
        using r951 = decltype(std::declval<PlayLayer>().checkCollisions(std::declval<PlayerObject*>(), std::declval<float>()));
        using f951 = r951(*)(PlayLayer*, PlayerObject*, float);
        return reinterpret_cast<f951>(base+0x78c90)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().circleWaveWillBeRemoved(std::declval<CCCircleWave*>())) PlayLayer::circleWaveWillBeRemoved(CCCircleWave* p0) {
        using r952 = decltype(std::declval<PlayLayer>().circleWaveWillBeRemoved(std::declval<CCCircleWave*>()));
        using f952 = r952(*)(PlayLayer*, CCCircleWave*);
        return reinterpret_cast<f952>(base+0x7e110)(this, p0);
    }

    decltype(std::declval<PlayLayer>().claimParticle(std::declval<gd::string>())) PlayLayer::claimParticle(gd::string p0) {
        using r953 = decltype(std::declval<PlayLayer>().claimParticle(std::declval<gd::string>()));
        using f953 = r953(*)(PlayLayer*, gd::string);
        return reinterpret_cast<f953>(base+0x76ba0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().clearPickedUpItems()) PlayLayer::clearPickedUpItems() {
        using r954 = decltype(std::declval<PlayLayer>().clearPickedUpItems());
        using f954 = r954(*)(PlayLayer*);
        return reinterpret_cast<f954>(base+0x7cfa0)(this);
    }

    decltype(std::declval<PlayLayer>().colorObject(std::declval<int>(), std::declval<cocos2d::_ccColor3B>())) PlayLayer::colorObject(int p0, cocos2d::_ccColor3B p1) {
        using r955 = decltype(std::declval<PlayLayer>().colorObject(std::declval<int>(), std::declval<cocos2d::_ccColor3B>()));
        using f955 = r955(*)(PlayLayer*, int, cocos2d::_ccColor3B);
        return reinterpret_cast<f955>(base+0x77810)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().commitJumps()) PlayLayer::commitJumps() {
        using r956 = decltype(std::declval<PlayLayer>().commitJumps());
        using f956 = r956(*)(PlayLayer*);
        return reinterpret_cast<f956>(base+0x737e0)(this);
    }

    decltype(std::declval<PlayLayer>().create(std::declval<GJGameLevel*>())) PlayLayer::create(GJGameLevel* p0) {
        using r957 = decltype(std::declval<PlayLayer>().create(std::declval<GJGameLevel*>()));
        using f957 = r957(*)(GJGameLevel*);
        return reinterpret_cast<f957>(base+0x6b590)(p0);

    }

    decltype(std::declval<PlayLayer>().createCheckpoint()) PlayLayer::createCheckpoint() {
        using r958 = decltype(std::declval<PlayLayer>().createCheckpoint());
        using f958 = r958(*)(PlayLayer*);
        return reinterpret_cast<f958>(base+0x7e470)(this);
    }

    decltype(std::declval<PlayLayer>().createObjectsFromSetup(std::declval<gd::string>())) PlayLayer::createObjectsFromSetup(gd::string p0) {
        using r959 = decltype(std::declval<PlayLayer>().createObjectsFromSetup(std::declval<gd::string>()));
        using f959 = r959(*)(PlayLayer*, gd::string);
        return reinterpret_cast<f959>(base+0x6d130)(this, p0);
    }

    decltype(std::declval<PlayLayer>().createParticle(std::declval<int>(), std::declval<char const*>(), std::declval<int>(), std::declval<cocos2d::tCCPositionType>())) PlayLayer::createParticle(int p0, char const* p1, int p2, cocos2d::tCCPositionType p3) {
        using r960 = decltype(std::declval<PlayLayer>().createParticle(std::declval<int>(), std::declval<char const*>(), std::declval<int>(), std::declval<cocos2d::tCCPositionType>()));
        using f960 = r960(*)(PlayLayer*, int, char const*, int, cocos2d::tCCPositionType);
        return reinterpret_cast<f960>(base+0x76800)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<PlayLayer>().currencyWillExit(std::declval<CurrencyRewardLayer*>())) PlayLayer::currencyWillExit(CurrencyRewardLayer* p0) {
        using r961 = decltype(std::declval<PlayLayer>().currencyWillExit(std::declval<CurrencyRewardLayer*>()));
        using f961 = r961(*)(PlayLayer*, CurrencyRewardLayer*);
        return reinterpret_cast<f961>(base+0x7e070)(this, p0);
    }

    decltype(std::declval<PlayLayer>().delayedResetLevel()) PlayLayer::delayedResetLevel() {
        using r962 = decltype(std::declval<PlayLayer>().delayedResetLevel());
        using f962 = r962(*)(PlayLayer*);
        return reinterpret_cast<f962>(base+0x7e050)(this);
    }

    decltype(std::declval<PlayLayer>().destroyPlayer(std::declval<PlayerObject*>(), std::declval<GameObject*>())) PlayLayer::destroyPlayer(PlayerObject* p0, GameObject* p1) {
        using r963 = decltype(std::declval<PlayLayer>().destroyPlayer(std::declval<PlayerObject*>(), std::declval<GameObject*>()));
        using f963 = r963(*)(PlayLayer*, PlayerObject*, GameObject*);
        return reinterpret_cast<f963>(base+0x7ab80)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().dialogClosed(std::declval<DialogLayer*>())) PlayLayer::dialogClosed(DialogLayer* p0) {
        using r964 = decltype(std::declval<PlayLayer>().dialogClosed(std::declval<DialogLayer*>()));
        using f964 = r964(*)(PlayLayer*, DialogLayer*);
        return reinterpret_cast<f964>(base+0x7e0b0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().draw()) PlayLayer::draw() {
        using r965 = decltype(std::declval<PlayLayer>().draw());
        using f965 = r965(*)(PlayLayer*);
        return reinterpret_cast<f965>(base+0x7d160)(this);
    }

    decltype(std::declval<PlayLayer>().enterDualMode(std::declval<GameObject*>(), std::declval<bool>())) PlayLayer::enterDualMode(GameObject* p0, bool p1) {
        using r966 = decltype(std::declval<PlayLayer>().enterDualMode(std::declval<GameObject*>(), std::declval<bool>()));
        using f966 = r966(*)(PlayLayer*, GameObject*, bool);
        return reinterpret_cast<f966>(base+0x7d6a0)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().exitAirMode()) PlayLayer::exitAirMode() {
        using r967 = decltype(std::declval<PlayLayer>().exitAirMode());
        using f967 = r967(*)(PlayLayer*);
        return reinterpret_cast<f967>(base+0x7dd40)(this);
    }

    decltype(std::declval<PlayLayer>().exitBirdMode(std::declval<PlayerObject*>())) PlayLayer::exitBirdMode(PlayerObject* p0) {
        using r968 = decltype(std::declval<PlayLayer>().exitBirdMode(std::declval<PlayerObject*>()));
        using f968 = r968(*)(PlayLayer*, PlayerObject*);
        return reinterpret_cast<f968>(base+0x7dd80)(this, p0);
    }

    decltype(std::declval<PlayLayer>().exitDartMode(std::declval<PlayerObject*>())) PlayLayer::exitDartMode(PlayerObject* p0) {
        using r969 = decltype(std::declval<PlayLayer>().exitDartMode(std::declval<PlayerObject*>()));
        using f969 = r969(*)(PlayLayer*, PlayerObject*);
        return reinterpret_cast<f969>(base+0x7ddd0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().exitFlyMode(std::declval<PlayerObject*>())) PlayLayer::exitFlyMode(PlayerObject* p0) {
        using r970 = decltype(std::declval<PlayLayer>().exitFlyMode(std::declval<PlayerObject*>()));
        using f970 = r970(*)(PlayLayer*, PlayerObject*);
        return reinterpret_cast<f970>(base+0x7dcf0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().exitRobotMode(std::declval<PlayerObject*>())) PlayLayer::exitRobotMode(PlayerObject* p0) {
        using r971 = decltype(std::declval<PlayLayer>().exitRobotMode(std::declval<PlayerObject*>()));
        using f971 = r971(*)(PlayLayer*, PlayerObject*);
        return reinterpret_cast<f971>(base+0x7de20)(this, p0);
    }

    decltype(std::declval<PlayLayer>().exitRollMode(std::declval<PlayerObject*>())) PlayLayer::exitRollMode(PlayerObject* p0) {
        using r972 = decltype(std::declval<PlayLayer>().exitRollMode(std::declval<PlayerObject*>()));
        using f972 = r972(*)(PlayLayer*, PlayerObject*);
        return reinterpret_cast<f972>(base+0x7de60)(this, p0);
    }

    decltype(std::declval<PlayLayer>().exitSpiderMode(std::declval<PlayerObject*>())) PlayLayer::exitSpiderMode(PlayerObject* p0) {
        using r973 = decltype(std::declval<PlayLayer>().exitSpiderMode(std::declval<PlayerObject*>()));
        using f973 = r973(*)(PlayLayer*, PlayerObject*);
        return reinterpret_cast<f973>(base+0x7de40)(this, p0);
    }

    decltype(std::declval<PlayLayer>().flipFinished()) PlayLayer::flipFinished() {
        using r974 = decltype(std::declval<PlayLayer>().flipFinished());
        using f974 = r974(*)(PlayLayer*);
        return reinterpret_cast<f974>(base+0x7e150)(this);
    }

    decltype(std::declval<PlayLayer>().flipGravity(std::declval<PlayerObject*>(), std::declval<bool>(), std::declval<bool>())) PlayLayer::flipGravity(PlayerObject* p0, bool p1, bool p2) {
        using r975 = decltype(std::declval<PlayLayer>().flipGravity(std::declval<PlayerObject*>(), std::declval<bool>(), std::declval<bool>()));
        using f975 = r975(*)(PlayLayer*, PlayerObject*, bool, bool);
        return reinterpret_cast<f975>(base+0x7cd10)(this, p0, p1, p2);
    }

    decltype(std::declval<PlayLayer>().flipObjects()) PlayLayer::flipObjects() {
        using r976 = decltype(std::declval<PlayLayer>().flipObjects());
        using f976 = r976(*)(PlayLayer*);
        return reinterpret_cast<f976>(base+0x76130)(this);
    }

    decltype(std::declval<PlayLayer>().fullReset()) PlayLayer::fullReset() {
        using r977 = decltype(std::declval<PlayLayer>().fullReset());
        using f977 = r977(*)(PlayLayer*);
        return reinterpret_cast<f977>(base+0x7f8e0)(this);
    }

    decltype(std::declval<PlayLayer>().getLastCheckpoint()) PlayLayer::getLastCheckpoint() {
        using r978 = decltype(std::declval<PlayLayer>().getLastCheckpoint());
        using f978 = r978(*)(PlayLayer*);
        return reinterpret_cast<f978>(base+0x7f840)(this);
    }

    decltype(std::declval<PlayLayer>().getMaxPortalY()) PlayLayer::getMaxPortalY() {
        using r979 = decltype(std::declval<PlayLayer>().getMaxPortalY());
        using f979 = r979(*)(PlayLayer*);
        return reinterpret_cast<f979>(base+0x7b4e0)(this);
    }

    decltype(std::declval<PlayLayer>().getMinPortalY()) PlayLayer::getMinPortalY() {
        using r980 = decltype(std::declval<PlayLayer>().getMinPortalY());
        using f980 = r980(*)(PlayLayer*);
        return reinterpret_cast<f980>(base+0x7b550)(this);
    }

    decltype(std::declval<PlayLayer>().getObjectsState()) PlayLayer::getObjectsState() {
        using r981 = decltype(std::declval<PlayLayer>().getObjectsState());
        using f981 = r981(*)(PlayLayer*);
        return reinterpret_cast<f981>(base+0x7e9d0)(this);
    }

    decltype(std::declval<PlayLayer>().getOtherPlayer(std::declval<PlayerObject*>())) PlayLayer::getOtherPlayer(PlayerObject* p0) {
        using r982 = decltype(std::declval<PlayLayer>().getOtherPlayer(std::declval<PlayerObject*>()));
        using f982 = r982(*)(PlayLayer*, PlayerObject*);
        return reinterpret_cast<f982>(base+0x7dcc0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().getParticleKey(std::declval<int>(), std::declval<char const*>(), std::declval<int>(), std::declval<cocos2d::tCCPositionType>())) PlayLayer::getParticleKey(int p0, char const* p1, int p2, cocos2d::tCCPositionType p3) {
        using r983 = decltype(std::declval<PlayLayer>().getParticleKey(std::declval<int>(), std::declval<char const*>(), std::declval<int>(), std::declval<cocos2d::tCCPositionType>()));
        using f983 = r983(*)(PlayLayer*, int, char const*, int, cocos2d::tCCPositionType);
        return reinterpret_cast<f983>(base+0x764d0)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<PlayLayer>().getParticleKey2(std::declval<gd::string>())) PlayLayer::getParticleKey2(gd::string p0) {
        using r984 = decltype(std::declval<PlayLayer>().getParticleKey2(std::declval<gd::string>()));
        using f984 = r984(*)(PlayLayer*, gd::string);
        return reinterpret_cast<f984>(base+0x767b0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().getRelativeMod(std::declval<cocos2d::CCPoint>(), std::declval<float>(), std::declval<float>(), std::declval<float>())) PlayLayer::getRelativeMod(cocos2d::CCPoint p0, float p1, float p2, float p3) {
        using r985 = decltype(std::declval<PlayLayer>().getRelativeMod(std::declval<cocos2d::CCPoint>(), std::declval<float>(), std::declval<float>(), std::declval<float>()));
        using f985 = r985(*)(PlayLayer*, cocos2d::CCPoint, float, float, float);
        return reinterpret_cast<f985>(base+0x7c2a0)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<PlayLayer>().getTempMilliTime()) PlayLayer::getTempMilliTime() {
        using r986 = decltype(std::declval<PlayLayer>().getTempMilliTime());
        using f986 = r986(*)(PlayLayer*);
        return reinterpret_cast<f986>(base+0x778e0)(this);
    }

    decltype(std::declval<PlayLayer>().gravityEffectFinished()) PlayLayer::gravityEffectFinished() {
        using r987 = decltype(std::declval<PlayLayer>().gravityEffectFinished());
        using f987 = r987(*)(PlayLayer*);
        return reinterpret_cast<f987>(base+0x7cec0)(this);
    }

    decltype(std::declval<PlayLayer>().hasItem(std::declval<int>())) PlayLayer::hasItem(int p0) {
        using r988 = decltype(std::declval<PlayLayer>().hasItem(std::declval<int>()));
        using f988 = r988(*)(PlayLayer*, int);
        return reinterpret_cast<f988>(base+0x7cee0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().hasUniqueCoin(std::declval<GameObject*>())) PlayLayer::hasUniqueCoin(GameObject* p0) {
        using r989 = decltype(std::declval<PlayLayer>().hasUniqueCoin(std::declval<GameObject*>()));
        using f989 = r989(*)(PlayLayer*, GameObject*);
        return reinterpret_cast<f989>(base+0x77510)(this, p0);
    }

    decltype(std::declval<PlayLayer>().incrementJumps()) PlayLayer::incrementJumps() {
        using r990 = decltype(std::declval<PlayLayer>().incrementJumps());
        using f990 = r990(*)(PlayLayer*);
        return reinterpret_cast<f990>(base+0x7ff40)(this);
    }

    decltype(std::declval<PlayLayer>().init(std::declval<GJGameLevel*>())) PlayLayer::init(GJGameLevel* p0) {
        using r991 = decltype(std::declval<PlayLayer>().init(std::declval<GJGameLevel*>()));
        using f991 = r991(*)(PlayLayer*, GJGameLevel*);
        return reinterpret_cast<f991>(base+0x6b5f0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().isFlipping()) PlayLayer::isFlipping() {
        using r992 = decltype(std::declval<PlayLayer>().isFlipping());
        using f992 = r992(*)(PlayLayer*);
        return reinterpret_cast<f992>(base+0x76100)(this);
    }

    decltype(std::declval<PlayLayer>().levelComplete()) PlayLayer::levelComplete() {
        using r993 = decltype(std::declval<PlayLayer>().levelComplete());
        using f993 = r993(*)(PlayLayer*);
        return reinterpret_cast<f993>(base+0x72b80)(this);
    }

    decltype(std::declval<PlayLayer>().lightningFlash(std::declval<cocos2d::CCPoint>(), std::declval<cocos2d::CCPoint>(), std::declval<cocos2d::_ccColor3B>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<bool>(), std::declval<float>())) PlayLayer::lightningFlash(cocos2d::CCPoint p0, cocos2d::CCPoint p1, cocos2d::_ccColor3B p2, float p3, float p4, int p5, bool p6, float p7) {
        using r994 = decltype(std::declval<PlayLayer>().lightningFlash(std::declval<cocos2d::CCPoint>(), std::declval<cocos2d::CCPoint>(), std::declval<cocos2d::_ccColor3B>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<bool>(), std::declval<float>()));
        using f994 = r994(*)(PlayLayer*, cocos2d::CCPoint, cocos2d::CCPoint, cocos2d::_ccColor3B, float, float, int, bool, float);
        return reinterpret_cast<f994>(base+0x75cc0)(this, p0, p1, p2, p3, p4, p5, p6, p7);
    }

    decltype(std::declval<PlayLayer>().lightningFlash(std::declval<cocos2d::CCPoint>(), std::declval<cocos2d::_ccColor3B>())) PlayLayer::lightningFlash(cocos2d::CCPoint p0, cocos2d::_ccColor3B p1) {
        using r995 = decltype(std::declval<PlayLayer>().lightningFlash(std::declval<cocos2d::CCPoint>(), std::declval<cocos2d::_ccColor3B>()));
        using f995 = r995(*)(PlayLayer*, cocos2d::CCPoint, cocos2d::_ccColor3B);
        return reinterpret_cast<f995>(base+0x75bf0)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().loadDefaultColors()) PlayLayer::loadDefaultColors() {
        using r996 = decltype(std::declval<PlayLayer>().loadDefaultColors());
        using f996 = r996(*)(PlayLayer*);
        return reinterpret_cast<f996>(base+0x6ef30)(this);
    }

    decltype(std::declval<PlayLayer>().loadFromCheckpoint(std::declval<CheckpointObject*>())) PlayLayer::loadFromCheckpoint(CheckpointObject* p0) {
        using r997 = decltype(std::declval<PlayLayer>().loadFromCheckpoint(std::declval<CheckpointObject*>()));
        using f997 = r997(*)(PlayLayer*, CheckpointObject*);
        return reinterpret_cast<f997>(base+0x7f000)(this, p0);
    }

    decltype(std::declval<PlayLayer>().loadLastCheckpoint()) PlayLayer::loadLastCheckpoint() {
        using r998 = decltype(std::declval<PlayLayer>().loadLastCheckpoint());
        using f998 = r998(*)(PlayLayer*);
        return reinterpret_cast<f998>(base+0x7efc0)(this);
    }

    decltype(std::declval<PlayLayer>().loadSavedObjectsState(std::declval<gd::string>())) PlayLayer::loadSavedObjectsState(gd::string p0) {
        using r999 = decltype(std::declval<PlayLayer>().loadSavedObjectsState(std::declval<gd::string>()));
        using f999 = r999(*)(PlayLayer*, gd::string);
        return reinterpret_cast<f999>(base+0x7f3d0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().markCheckpoint()) PlayLayer::markCheckpoint() {
        using r1000 = decltype(std::declval<PlayLayer>().markCheckpoint());
        using f1000 = r1000(*)(PlayLayer*);
        return reinterpret_cast<f1000>(base+0x7ef60)(this);
    }

    decltype(std::declval<PlayLayer>().moveCameraToPos(std::declval<cocos2d::CCPoint>())) PlayLayer::moveCameraToPos(cocos2d::CCPoint p0) {
        using r1001 = decltype(std::declval<PlayLayer>().moveCameraToPos(std::declval<cocos2d::CCPoint>()));
        using f1001 = r1001(*)(PlayLayer*, cocos2d::CCPoint);
        return reinterpret_cast<f1001>(base+0x7c980)(this, p0);
    }

    decltype(std::declval<PlayLayer>().onEnterTransitionDidFinish()) PlayLayer::onEnterTransitionDidFinish() {
        using r1002 = decltype(std::declval<PlayLayer>().onEnterTransitionDidFinish());
        using f1002 = r1002(*)(PlayLayer*);
        return reinterpret_cast<f1002>(base+0x806e0)(this);
    }

    decltype(std::declval<PlayLayer>().onExit()) PlayLayer::onExit() {
        using r1003 = decltype(std::declval<PlayLayer>().onExit());
        using f1003 = r1003(*)(PlayLayer*);
        return reinterpret_cast<f1003>(base+0x80710)(this);
    }

    decltype(std::declval<PlayLayer>().onQuit()) PlayLayer::onQuit() {
        using r1004 = decltype(std::declval<PlayLayer>().onQuit());
        using f1004 = r1004(*)(PlayLayer*);
        return reinterpret_cast<f1004>(base+0x72710)(this);
    }

    decltype(std::declval<PlayLayer>().optimizeColorGroups()) PlayLayer::optimizeColorGroups() {
        using r1005 = decltype(std::declval<PlayLayer>().optimizeColorGroups());
        using f1005 = r1005(*)(PlayLayer*);
        return reinterpret_cast<f1005>(base+0x6dad0)(this);
    }

    decltype(std::declval<PlayLayer>().optimizeOpacityGroups()) PlayLayer::optimizeOpacityGroups() {
        using r1006 = decltype(std::declval<PlayLayer>().optimizeOpacityGroups());
        using f1006 = r1006(*)(PlayLayer*);
        return reinterpret_cast<f1006>(base+0x6dc20)(this);
    }

    decltype(std::declval<PlayLayer>().optimizeSaveRequiredGroups()) PlayLayer::optimizeSaveRequiredGroups() {
        using r1007 = decltype(std::declval<PlayLayer>().optimizeSaveRequiredGroups());
        using f1007 = r1007(*)(PlayLayer*);
        return reinterpret_cast<f1007>(base+0x6dd70)(this);
    }

    decltype(std::declval<PlayLayer>().pauseGame(std::declval<bool>())) PlayLayer::pauseGame(bool p0) {
        using r1008 = decltype(std::declval<PlayLayer>().pauseGame(std::declval<bool>()));
        using f1008 = r1008(*)(PlayLayer*, bool);
        return reinterpret_cast<f1008>(base+0x802d0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().pickupItem(std::declval<GameObject*>())) PlayLayer::pickupItem(GameObject* p0) {
        using r1009 = decltype(std::declval<PlayLayer>().pickupItem(std::declval<GameObject*>()));
        using f1009 = r1009(*)(PlayLayer*, GameObject*);
        return reinterpret_cast<f1009>(base+0x7c1d0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().playAnimationCommand(std::declval<int>(), std::declval<int>())) PlayLayer::playAnimationCommand(int p0, int p1) {
        using r1010 = decltype(std::declval<PlayLayer>().playAnimationCommand(std::declval<int>(), std::declval<int>()));
        using f1010 = r1010(*)(PlayLayer*, int, int);
        return reinterpret_cast<f1010>(base+0x75930)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().playEndAnimationToPos(std::declval<cocos2d::CCPoint>())) PlayLayer::playEndAnimationToPos(cocos2d::CCPoint p0) {
        using r1011 = decltype(std::declval<PlayLayer>().playEndAnimationToPos(std::declval<cocos2d::CCPoint>()));
        using f1011 = r1011(*)(PlayLayer*, cocos2d::CCPoint);
        return reinterpret_cast<f1011>(base+0x759a0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().playExitDualEffect(std::declval<PlayerObject*>())) PlayLayer::playExitDualEffect(PlayerObject* p0) {
        using r1012 = decltype(std::declval<PlayLayer>().playExitDualEffect(std::declval<PlayerObject*>()));
        using f1012 = r1012(*)(PlayLayer*, PlayerObject*);
        return reinterpret_cast<f1012>(base+0x7d1d0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().playFlashEffect(std::declval<float>(), std::declval<int>(), std::declval<float>())) PlayLayer::playFlashEffect(float p0, int p1, float p2) {
        using r1013 = decltype(std::declval<PlayLayer>().playFlashEffect(std::declval<float>(), std::declval<int>(), std::declval<float>()));
        using f1013 = r1013(*)(PlayLayer*, float, int, float);
        return reinterpret_cast<f1013>(base+0x75e50)(this, p0, p1, p2);
    }

    decltype(std::declval<PlayLayer>().playGravityEffect(std::declval<bool>())) PlayLayer::playGravityEffect(bool p0) {
        using r1014 = decltype(std::declval<PlayLayer>().playGravityEffect(std::declval<bool>()));
        using f1014 = r1014(*)(PlayLayer*, bool);
        return reinterpret_cast<f1014>(base+0x7b5a0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().playSpeedParticle(std::declval<float>())) PlayLayer::playSpeedParticle(float p0) {
        using r1015 = decltype(std::declval<PlayLayer>().playSpeedParticle(std::declval<float>()));
        using f1015 = r1015(*)(PlayLayer*, float);
        return reinterpret_cast<f1015>(base+0x77030)(this, p0);
    }

    decltype(std::declval<PlayLayer>().playerWillSwitchMode(std::declval<PlayerObject*>(), std::declval<GameObject*>())) PlayLayer::playerWillSwitchMode(PlayerObject* p0, GameObject* p1) {
        using r1016 = decltype(std::declval<PlayLayer>().playerWillSwitchMode(std::declval<PlayerObject*>(), std::declval<GameObject*>()));
        using f1016 = r1016(*)(PlayLayer*, PlayerObject*, GameObject*);
        return reinterpret_cast<f1016>(base+0x7b820)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().prepareSpawnObjects()) PlayLayer::prepareSpawnObjects() {
        using r1017 = decltype(std::declval<PlayLayer>().prepareSpawnObjects());
        using f1017 = r1017(*)(PlayLayer*);
        return reinterpret_cast<f1017>(base+0x7fc00)(this);
    }

    decltype(std::declval<PlayLayer>().processItems()) PlayLayer::processItems() {
        using r1018 = decltype(std::declval<PlayLayer>().processItems());
        using f1018 = r1018(*)(PlayLayer*);
        return reinterpret_cast<f1018>(base+0x735c0)(this);
    }

    decltype(std::declval<PlayLayer>().processLoadedMoveActions()) PlayLayer::processLoadedMoveActions() {
        using r1019 = decltype(std::declval<PlayLayer>().processLoadedMoveActions());
        using f1019 = r1019(*)(PlayLayer*);
        return reinterpret_cast<f1019>(base+0x7a7c0)(this);
    }

    decltype(std::declval<PlayLayer>().recordAction(std::declval<bool>(), std::declval<PlayerObject*>())) PlayLayer::recordAction(bool p0, PlayerObject* p1) {
        using r1020 = decltype(std::declval<PlayLayer>().recordAction(std::declval<bool>(), std::declval<PlayerObject*>()));
        using f1020 = r1020(*)(PlayLayer*, bool, PlayerObject*);
        return reinterpret_cast<f1020>(base+0x7e190)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().registerActiveObject(std::declval<GameObject*>())) PlayLayer::registerActiveObject(GameObject* p0) {
        using r1021 = decltype(std::declval<PlayLayer>().registerActiveObject(std::declval<GameObject*>()));
        using f1021 = r1021(*)(PlayLayer*, GameObject*);
        return reinterpret_cast<f1021>(base+0x77620)(this, p0);
    }

    decltype(std::declval<PlayLayer>().registerStateObject(std::declval<GameObject*>())) PlayLayer::registerStateObject(GameObject* p0) {
        using r1022 = decltype(std::declval<PlayLayer>().registerStateObject(std::declval<GameObject*>()));
        using f1022 = r1022(*)(PlayLayer*, GameObject*);
        return reinterpret_cast<f1022>(base+0x777b0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().removeAllObjects()) PlayLayer::removeAllObjects() {
        using r1023 = decltype(std::declval<PlayLayer>().removeAllObjects());
        using f1023 = r1023(*)(PlayLayer*);
        return reinterpret_cast<f1023>(base+0x727b0)(this);
    }

    decltype(std::declval<PlayLayer>().removeFromGroupOld(std::declval<GameObject*>())) PlayLayer::removeFromGroupOld(GameObject* p0) {
        using r1024 = decltype(std::declval<PlayLayer>().removeFromGroupOld(std::declval<GameObject*>()));
        using f1024 = r1024(*)(PlayLayer*, GameObject*);
        return reinterpret_cast<f1024>(base+0x77750)(this, p0);
    }

    decltype(std::declval<PlayLayer>().removeLastCheckpoint()) PlayLayer::removeLastCheckpoint() {
        using r1025 = decltype(std::declval<PlayLayer>().removeLastCheckpoint());
        using f1025 = r1025(*)(PlayLayer*);
        return reinterpret_cast<f1025>(base+0x7f870)(this);
    }

    decltype(std::declval<PlayLayer>().removePlayer2()) PlayLayer::removePlayer2() {
        using r1026 = decltype(std::declval<PlayLayer>().removePlayer2());
        using f1026 = r1026(*)(PlayLayer*);
        return reinterpret_cast<f1026>(base+0x7d630)(this);
    }

    decltype(std::declval<PlayLayer>().resetLevel()) PlayLayer::resetLevel() {
        using r1027 = decltype(std::declval<PlayLayer>().resetLevel());
        using f1027 = r1027(*)(PlayLayer*);
        return reinterpret_cast<f1027>(base+0x71c50)(this);
    }

    decltype(std::declval<PlayLayer>().resume()) PlayLayer::resume() {
        using r1028 = decltype(std::declval<PlayLayer>().resume());
        using f1028 = r1028(*)(PlayLayer*);
        return reinterpret_cast<f1028>(base+0x80480)(this);
    }

    decltype(std::declval<PlayLayer>().resumeAndRestart()) PlayLayer::resumeAndRestart() {
        using r1029 = decltype(std::declval<PlayLayer>().resumeAndRestart());
        using f1029 = r1029(*)(PlayLayer*);
        return reinterpret_cast<f1029>(base+0x80400)(this);
    }

    decltype(std::declval<PlayLayer>().saveRecordAction(std::declval<bool>(), std::declval<PlayerObject*>())) PlayLayer::saveRecordAction(bool p0, PlayerObject* p1) {
        using r1030 = decltype(std::declval<PlayLayer>().saveRecordAction(std::declval<bool>(), std::declval<PlayerObject*>()));
        using f1030 = r1030(*)(PlayLayer*, bool, PlayerObject*);
        return reinterpret_cast<f1030>(base+0x78750)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().scene(std::declval<GJGameLevel*>())) PlayLayer::scene(GJGameLevel* p0) {
        using r1031 = decltype(std::declval<PlayLayer>().scene(std::declval<GJGameLevel*>()));
        using f1031 = r1031(*)(PlayLayer*, GJGameLevel*);
        return reinterpret_cast<f1031>(base+0x6b500)(this, p0);
    }

    decltype(std::declval<PlayLayer>().setupLevelStart(std::declval<LevelSettingsObject*>())) PlayLayer::setupLevelStart(LevelSettingsObject* p0) {
        using r1032 = decltype(std::declval<PlayLayer>().setupLevelStart(std::declval<LevelSettingsObject*>()));
        using f1032 = r1032(*)(PlayLayer*, LevelSettingsObject*);
        return reinterpret_cast<f1032>(base+0x6f560)(this, p0);
    }

    decltype(std::declval<PlayLayer>().setupReplay(std::declval<gd::string>())) PlayLayer::setupReplay(gd::string p0) {
        using r1033 = decltype(std::declval<PlayLayer>().setupReplay(std::declval<gd::string>()));
        using f1033 = r1033(*)(PlayLayer*, gd::string);
        return reinterpret_cast<f1033>(base+0x7e1e0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().shakeCamera(std::declval<float>(), std::declval<float>(), std::declval<float>())) PlayLayer::shakeCamera(float p0, float p1, float p2) {
        using r1034 = decltype(std::declval<PlayLayer>().shakeCamera(std::declval<float>(), std::declval<float>(), std::declval<float>()));
        using f1034 = r1034(*)(PlayLayer*, float, float, float);
        return reinterpret_cast<f1034>(base+0x744a0)(this, p0, p1, p2);
    }

    decltype(std::declval<PlayLayer>().shouldBlend(std::declval<int>())) PlayLayer::shouldBlend(int p0) {
        using r1035 = decltype(std::declval<PlayLayer>().shouldBlend(std::declval<int>()));
        using f1035 = r1035(*)(PlayLayer*, int);
        return reinterpret_cast<f1035>(base+0x771b0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().showCompleteEffect()) PlayLayer::showCompleteEffect() {
        using r1036 = decltype(std::declval<PlayLayer>().showCompleteEffect());
        using f1036 = r1036(*)(PlayLayer*);
        return reinterpret_cast<f1036>(base+0x738e0)(this);
    }

    decltype(std::declval<PlayLayer>().showCompleteText()) PlayLayer::showCompleteText() {
        using r1037 = decltype(std::declval<PlayLayer>().showCompleteText());
        using f1037 = r1037(*)(PlayLayer*);
        return reinterpret_cast<f1037>(base+0x73be0)(this);
    }

    decltype(std::declval<PlayLayer>().showEndLayer()) PlayLayer::showEndLayer() {
        using r1038 = decltype(std::declval<PlayLayer>().showEndLayer());
        using f1038 = r1038(*)(PlayLayer*);
        return reinterpret_cast<f1038>(base+0x74450)(this);
    }

    decltype(std::declval<PlayLayer>().showHint()) PlayLayer::showHint() {
        using r1039 = decltype(std::declval<PlayLayer>().showHint());
        using f1039 = r1039(*)(PlayLayer*);
        return reinterpret_cast<f1039>(base+0x7deb0)(this);
    }

    decltype(std::declval<PlayLayer>().showNewBest(std::declval<bool>(), std::declval<int>(), std::declval<int>(), std::declval<bool>(), std::declval<bool>(), std::declval<bool>())) PlayLayer::showNewBest(bool p0, int p1, int p2, bool p3, bool p4, bool p5) {
        using r1040 = decltype(std::declval<PlayLayer>().showNewBest(std::declval<bool>(), std::declval<int>(), std::declval<int>(), std::declval<bool>(), std::declval<bool>(), std::declval<bool>()));
        using f1040 = r1040(*)(PlayLayer*, bool, int, int, bool, bool, bool);
        return reinterpret_cast<f1040>(base+0x74580)(this, p0, p1, p2, p3, p4, p5);
    }

    decltype(std::declval<PlayLayer>().showRetryLayer()) PlayLayer::showRetryLayer() {
        using r1041 = decltype(std::declval<PlayLayer>().showRetryLayer());
        using f1041 = r1041(*)(PlayLayer*);
        return reinterpret_cast<f1041>(base+0x75ba0)(this);
    }

    decltype(std::declval<PlayLayer>().showTwoPlayerGuide()) PlayLayer::showTwoPlayerGuide() {
        using r1042 = decltype(std::declval<PlayLayer>().showTwoPlayerGuide());
        using f1042 = r1042(*)(PlayLayer*);
        return reinterpret_cast<f1042>(base+0x6df00)(this);
    }

    decltype(std::declval<PlayLayer>().sortGroups()) PlayLayer::sortGroups() {
        using r1043 = decltype(std::declval<PlayLayer>().sortGroups());
        using f1043 = r1043(*)(PlayLayer*);
        return reinterpret_cast<f1043>(base+0x6d9e0)(this);
    }

    decltype(std::declval<PlayLayer>().spawnCircle()) PlayLayer::spawnCircle() {
        using r1044 = decltype(std::declval<PlayLayer>().spawnCircle());
        using f1044 = r1044(*)(PlayLayer*);
        return reinterpret_cast<f1044>(base+0x73820)(this);
    }

    decltype(std::declval<PlayLayer>().spawnFirework()) PlayLayer::spawnFirework() {
        using r1045 = decltype(std::declval<PlayLayer>().spawnFirework());
        using f1045 = r1045(*)(PlayLayer*);
        return reinterpret_cast<f1045>(base+0x74200)(this);
    }

    decltype(std::declval<PlayLayer>().spawnParticle(std::declval<char const*>(), std::declval<int>(), std::declval<cocos2d::tCCPositionType>(), std::declval<cocos2d::CCPoint>())) PlayLayer::spawnParticle(char const* p0, int p1, cocos2d::tCCPositionType p2, cocos2d::CCPoint p3) {
        using r1046 = decltype(std::declval<PlayLayer>().spawnParticle(std::declval<char const*>(), std::declval<int>(), std::declval<cocos2d::tCCPositionType>(), std::declval<cocos2d::CCPoint>()));
        using f1046 = r1046(*)(PlayLayer*, char const*, int, cocos2d::tCCPositionType, cocos2d::CCPoint);
        return reinterpret_cast<f1046>(base+0x76330)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<PlayLayer>().spawnPlayer2()) PlayLayer::spawnPlayer2() {
        using r1047 = decltype(std::declval<PlayLayer>().spawnPlayer2());
        using f1047 = r1047(*)(PlayLayer*);
        return reinterpret_cast<f1047>(base+0x7d170)(this);
    }

    decltype(std::declval<PlayLayer>().startGame()) PlayLayer::startGame() {
        using r1048 = decltype(std::declval<PlayLayer>().startGame());
        using f1048 = r1048(*)(PlayLayer*);
        return reinterpret_cast<f1048>(base+0x726b0)(this);
    }

    decltype(std::declval<PlayLayer>().startMusic()) PlayLayer::startMusic() {
        using r1049 = decltype(std::declval<PlayLayer>().startMusic());
        using f1049 = r1049(*)(PlayLayer*);
        return reinterpret_cast<f1049>(base+0x72910)(this);
    }

    decltype(std::declval<PlayLayer>().startRecording()) PlayLayer::startRecording() {
        using r1050 = decltype(std::declval<PlayLayer>().startRecording());
        using f1050 = r1050(*)(PlayLayer*);
        return reinterpret_cast<f1050>(base+0x7fec0)(this);
    }

    decltype(std::declval<PlayLayer>().startRecordingDelayed()) PlayLayer::startRecordingDelayed() {
        using r1051 = decltype(std::declval<PlayLayer>().startRecordingDelayed());
        using f1051 = r1051(*)(PlayLayer*);
        return reinterpret_cast<f1051>(base+0x7fed0)(this);
    }

    decltype(std::declval<PlayLayer>().stopCameraShake()) PlayLayer::stopCameraShake() {
        using r1052 = decltype(std::declval<PlayLayer>().stopCameraShake());
        using f1052 = r1052(*)(PlayLayer*);
        return reinterpret_cast<f1052>(base+0x75900)(this);
    }

    decltype(std::declval<PlayLayer>().stopRecording()) PlayLayer::stopRecording() {
        using r1053 = decltype(std::declval<PlayLayer>().stopRecording());
        using f1053 = r1053(*)(PlayLayer*);
        return reinterpret_cast<f1053>(base+0x6d090)(this);
    }

    decltype(std::declval<PlayLayer>().storeCheckpoint(std::declval<CheckpointObject*>())) PlayLayer::storeCheckpoint(CheckpointObject* p0) {
        using r1054 = decltype(std::declval<PlayLayer>().storeCheckpoint(std::declval<CheckpointObject*>()));
        using f1054 = r1054(*)(PlayLayer*, CheckpointObject*);
        return reinterpret_cast<f1054>(base+0x7ef10)(this, p0);
    }

    decltype(std::declval<PlayLayer>().switchToFlyMode(std::declval<PlayerObject*>(), std::declval<GameObject*>(), std::declval<bool>(), std::declval<int>())) PlayLayer::switchToFlyMode(PlayerObject* p0, GameObject* p1, bool p2, int p3) {
        using r1055 = decltype(std::declval<PlayLayer>().switchToFlyMode(std::declval<PlayerObject*>(), std::declval<GameObject*>(), std::declval<bool>(), std::declval<int>()));
        using f1055 = r1055(*)(PlayLayer*, PlayerObject*, GameObject*, bool, int);
        return reinterpret_cast<f1055>(base+0x7baf0)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<PlayLayer>().switchToRobotMode(std::declval<PlayerObject*>(), std::declval<GameObject*>(), std::declval<bool>())) PlayLayer::switchToRobotMode(PlayerObject* p0, GameObject* p1, bool p2) {
        using r1056 = decltype(std::declval<PlayLayer>().switchToRobotMode(std::declval<PlayerObject*>(), std::declval<GameObject*>(), std::declval<bool>()));
        using f1056 = r1056(*)(PlayLayer*, PlayerObject*, GameObject*, bool);
        return reinterpret_cast<f1056>(base+0x7bc80)(this, p0, p1, p2);
    }

    decltype(std::declval<PlayLayer>().switchToRollMode(std::declval<PlayerObject*>(), std::declval<GameObject*>(), std::declval<bool>())) PlayLayer::switchToRollMode(PlayerObject* p0, GameObject* p1, bool p2) {
        using r1057 = decltype(std::declval<PlayLayer>().switchToRollMode(std::declval<PlayerObject*>(), std::declval<GameObject*>(), std::declval<bool>()));
        using f1057 = r1057(*)(PlayLayer*, PlayerObject*, GameObject*, bool);
        return reinterpret_cast<f1057>(base+0x7bbe0)(this, p0, p1, p2);
    }

    decltype(std::declval<PlayLayer>().switchToSpiderMode(std::declval<PlayerObject*>(), std::declval<GameObject*>(), std::declval<bool>())) PlayLayer::switchToSpiderMode(PlayerObject* p0, GameObject* p1, bool p2) {
        using r1058 = decltype(std::declval<PlayLayer>().switchToSpiderMode(std::declval<PlayerObject*>(), std::declval<GameObject*>(), std::declval<bool>()));
        using f1058 = r1058(*)(PlayLayer*, PlayerObject*, GameObject*, bool);
        return reinterpret_cast<f1058>(base+0x7bd20)(this, p0, p1, p2);
    }

    decltype(std::declval<PlayLayer>().timeForXPos(std::declval<float>())) PlayLayer::timeForXPos(float p0) {
        using r1059 = decltype(std::declval<PlayLayer>().timeForXPos(std::declval<float>()));
        using f1059 = r1059(*)(PlayLayer*, float);
        return reinterpret_cast<f1059>(base+0x7d120)(this, p0);
    }

    decltype(std::declval<PlayLayer>().timeForXPos2(std::declval<float>(), std::declval<bool>())) PlayLayer::timeForXPos2(float p0, bool p1) {
        using r1060 = decltype(std::declval<PlayLayer>().timeForXPos2(std::declval<float>(), std::declval<bool>()));
        using f1060 = r1060(*)(PlayLayer*, float, bool);
        return reinterpret_cast<f1060>(base+0x293eb0)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().toggleBGEffectVisibility(std::declval<bool>())) PlayLayer::toggleBGEffectVisibility(bool p0) {
        using r1061 = decltype(std::declval<PlayLayer>().toggleBGEffectVisibility(std::declval<bool>()));
        using f1061 = r1061(*)(PlayLayer*, bool);
        return reinterpret_cast<f1061>(base+0x7fe80)(this, p0);
    }

    decltype(std::declval<PlayLayer>().toggleDualMode(std::declval<GameObject*>(), std::declval<bool>(), std::declval<PlayerObject*>(), std::declval<bool>())) PlayLayer::toggleDualMode(GameObject* p0, bool p1, PlayerObject* p2, bool p3) {
        using r1062 = decltype(std::declval<PlayLayer>().toggleDualMode(std::declval<GameObject*>(), std::declval<bool>(), std::declval<PlayerObject*>(), std::declval<bool>()));
        using f1062 = r1062(*)(PlayLayer*, GameObject*, bool, PlayerObject*, bool);
        return reinterpret_cast<f1062>(base+0x7bf90)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<PlayLayer>().toggleFlipped(std::declval<bool>(), std::declval<bool>())) PlayLayer::toggleFlipped(bool p0, bool p1) {
        using r1063 = decltype(std::declval<PlayLayer>().toggleFlipped(std::declval<bool>(), std::declval<bool>()));
        using f1063 = r1063(*)(PlayLayer*, bool, bool);
        return reinterpret_cast<f1063>(base+0x7bdc0)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().toggleGhostEffect(std::declval<int>())) PlayLayer::toggleGhostEffect(int p0) {
        using r1064 = decltype(std::declval<PlayLayer>().toggleGhostEffect(std::declval<int>()));
        using f1064 = r1064(*)(PlayLayer*, int);
        return reinterpret_cast<f1064>(base+0x7fe40)(this, p0);
    }

    decltype(std::declval<PlayLayer>().toggleGlitter(std::declval<bool>())) PlayLayer::toggleGlitter(bool p0) {
        using r1065 = decltype(std::declval<PlayLayer>().toggleGlitter(std::declval<bool>()));
        using f1065 = r1065(*)(PlayLayer*, bool);
        return reinterpret_cast<f1065>(base+0x70e00)(this, p0);
    }

    decltype(std::declval<PlayLayer>().togglePracticeMode(std::declval<bool>())) PlayLayer::togglePracticeMode(bool p0) {
        using r1066 = decltype(std::declval<PlayLayer>().togglePracticeMode(std::declval<bool>()));
        using f1066 = r1066(*)(PlayLayer*, bool);
        return reinterpret_cast<f1066>(base+0x7f9e0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().toggleProgressbar()) PlayLayer::toggleProgressbar() {
        using r1067 = decltype(std::declval<PlayLayer>().toggleProgressbar());
        using f1067 = r1067(*)(PlayLayer*);
        return reinterpret_cast<f1067>(base+0x6eeb0)(this);
    }

    decltype(std::declval<PlayLayer>().tryStartRecord()) PlayLayer::tryStartRecord() {
        using r1068 = decltype(std::declval<PlayLayer>().tryStartRecord());
        using f1068 = r1068(*)(PlayLayer*);
        return reinterpret_cast<f1068>(base+0x7fe00)(this);
    }

    decltype(std::declval<PlayLayer>().unclaimParticle(std::declval<char const*>(), std::declval<cocos2d::CCParticleSystemQuad*>())) PlayLayer::unclaimParticle(char const* p0, cocos2d::CCParticleSystemQuad* p1) {
        using r1069 = decltype(std::declval<PlayLayer>().unclaimParticle(std::declval<char const*>(), std::declval<cocos2d::CCParticleSystemQuad*>()));
        using f1069 = r1069(*)(PlayLayer*, char const*, cocos2d::CCParticleSystemQuad*);
        return reinterpret_cast<f1069>(base+0x76e00)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().unregisterActiveObject(std::declval<GameObject*>())) PlayLayer::unregisterActiveObject(GameObject* p0) {
        using r1070 = decltype(std::declval<PlayLayer>().unregisterActiveObject(std::declval<GameObject*>()));
        using f1070 = r1070(*)(PlayLayer*, GameObject*);
        return reinterpret_cast<f1070>(base+0x77660)(this, p0);
    }

    decltype(std::declval<PlayLayer>().unregisterStateObject(std::declval<GameObject*>())) PlayLayer::unregisterStateObject(GameObject* p0) {
        using r1071 = decltype(std::declval<PlayLayer>().unregisterStateObject(std::declval<GameObject*>()));
        using f1071 = r1071(*)(PlayLayer*, GameObject*);
        return reinterpret_cast<f1071>(base+0x777f0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().update(std::declval<float>())) PlayLayer::update(float p0) {
        using r1072 = decltype(std::declval<PlayLayer>().update(std::declval<float>()));
        using f1072 = r1072(*)(PlayLayer*, float);
        return reinterpret_cast<f1072>(base+0x77900)(this, p0);
    }

    decltype(std::declval<PlayLayer>().updateAttempts()) PlayLayer::updateAttempts() {
        using r1073 = decltype(std::declval<PlayLayer>().updateAttempts());
        using f1073 = r1073(*)(PlayLayer*);
        return reinterpret_cast<f1073>(base+0x7fcd0)(this);
    }

    decltype(std::declval<PlayLayer>().updateCamera(std::declval<float>())) PlayLayer::updateCamera(float p0) {
        using r1074 = decltype(std::declval<PlayLayer>().updateCamera(std::declval<float>()));
        using f1074 = r1074(*)(PlayLayer*, float);
        return reinterpret_cast<f1074>(base+0x6e2b0)(this, p0);
    }

    decltype(std::declval<PlayLayer>().updateColor(std::declval<cocos2d::_ccColor3B>(), std::declval<float>(), std::declval<int>(), std::declval<bool>(), std::declval<float>(), std::declval<cocos2d::_ccHSVValue>(), std::declval<int>(), std::declval<bool>(), std::declval<int>(), std::declval<EffectGameObject*>())) PlayLayer::updateColor(cocos2d::_ccColor3B p0, float p1, int p2, bool p3, float p4, cocos2d::_ccHSVValue p5, int p6, bool p7, int p8, EffectGameObject* p9) {
        using r1075 = decltype(std::declval<PlayLayer>().updateColor(std::declval<cocos2d::_ccColor3B>(), std::declval<float>(), std::declval<int>(), std::declval<bool>(), std::declval<float>(), std::declval<cocos2d::_ccHSVValue>(), std::declval<int>(), std::declval<bool>(), std::declval<int>(), std::declval<EffectGameObject*>()));
        using f1075 = r1075(*)(PlayLayer*, cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*);
        return reinterpret_cast<f1075>(base+0x7c7f0)(this, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    }

    decltype(std::declval<PlayLayer>().updateDualGround(std::declval<PlayerObject*>(), std::declval<int>(), std::declval<bool>())) PlayLayer::updateDualGround(PlayerObject* p0, int p1, bool p2) {
        using r1076 = decltype(std::declval<PlayLayer>().updateDualGround(std::declval<PlayerObject*>(), std::declval<int>(), std::declval<bool>()));
        using f1076 = r1076(*)(PlayLayer*, PlayerObject*, int, bool);
        return reinterpret_cast<f1076>(base+0x7caa0)(this, p0, p1, p2);
    }

    decltype(std::declval<PlayLayer>().updateEffectPositions()) PlayLayer::updateEffectPositions() {
        using r1077 = decltype(std::declval<PlayLayer>().updateEffectPositions());
        using f1077 = r1077(*)(PlayLayer*);
        return reinterpret_cast<f1077>(base+0x7a6d0)(this);
    }

    decltype(std::declval<PlayLayer>().updateLevelColors()) PlayLayer::updateLevelColors() {
        using r1078 = decltype(std::declval<PlayLayer>().updateLevelColors());
        using f1078 = r1078(*)(PlayLayer*);
        return reinterpret_cast<f1078>(base+0x6f1e0)(this);
    }

    decltype(std::declval<PlayLayer>().updateMoveObjectsLastPosition()) PlayLayer::updateMoveObjectsLastPosition() {
        using r1079 = decltype(std::declval<PlayLayer>().updateMoveObjectsLastPosition());
        using f1079 = r1079(*)(PlayLayer*);
        return reinterpret_cast<f1079>(base+0x7a720)(this);
    }

    decltype(std::declval<PlayLayer>().updateProgressbar()) PlayLayer::updateProgressbar() {
        using r1080 = decltype(std::declval<PlayLayer>().updateProgressbar());
        using f1080 = r1080(*)(PlayLayer*);
        return reinterpret_cast<f1080>(base+0x6ed70)(this);
    }

    decltype(std::declval<PlayLayer>().updateReplay(std::declval<float>())) PlayLayer::updateReplay(float p0) {
        using r1081 = decltype(std::declval<PlayLayer>().updateReplay(std::declval<float>()));
        using f1081 = r1081(*)(PlayLayer*, float);
        return reinterpret_cast<f1081>(base+0x78b60)(this, p0);
    }

    decltype(std::declval<PlayLayer>().updateTimeMod(std::declval<float>(), std::declval<bool>())) PlayLayer::updateTimeMod(float p0, bool p1) {
        using r1082 = decltype(std::declval<PlayLayer>().updateTimeMod(std::declval<float>(), std::declval<bool>()));
        using f1082 = r1082(*)(PlayLayer*, float, bool);
        return reinterpret_cast<f1082>(base+0x786f0)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().updateTweenAction(std::declval<float>(), std::declval<char const*>())) PlayLayer::updateTweenAction(float p0, char const* p1) {
        using r1083 = decltype(std::declval<PlayLayer>().updateTweenAction(std::declval<float>(), std::declval<char const*>()));
        using f1083 = r1083(*)(PlayLayer*, float, char const*);
        return reinterpret_cast<f1083>(base+0x7ffb0)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().updateVisibility()) PlayLayer::updateVisibility() {
        using r1084 = decltype(std::declval<PlayLayer>().updateVisibility());
        using f1084 = r1084(*)(PlayLayer*);
        return reinterpret_cast<f1084>(base+0x6fb90)(this);
    }

    decltype(std::declval<PlayLayer>().vfDChk()) PlayLayer::vfDChk() {
        using r1085 = decltype(std::declval<PlayLayer>().vfDChk());
        using f1085 = r1085(*)(PlayLayer*);
        return reinterpret_cast<f1085>(base+0x7fcb0)(this);
    }

    decltype(std::declval<PlayLayer>().visit()) PlayLayer::visit() {
        using r1086 = decltype(std::declval<PlayLayer>().visit());
        using f1086 = r1086(*)(PlayLayer*);
        return reinterpret_cast<f1086>(base+0x75ef0)(this);
    }

    decltype(std::declval<PlayLayer>().visitWithColorFlash()) PlayLayer::visitWithColorFlash() {
        using r1087 = decltype(std::declval<PlayLayer>().visitWithColorFlash());
        using f1087 = r1087(*)(PlayLayer*);
        return reinterpret_cast<f1087>(base+0x761f0)(this);
    }

    decltype(std::declval<PlayLayer>().willSwitchToMode(std::declval<int>(), std::declval<PlayerObject*>())) PlayLayer::willSwitchToMode(int p0, PlayerObject* p1) {
        using r1088 = decltype(std::declval<PlayLayer>().willSwitchToMode(std::declval<int>(), std::declval<PlayerObject*>()));
        using f1088 = r1088(*)(PlayLayer*, int, PlayerObject*);
        return reinterpret_cast<f1088>(base+0x7b9e0)(this, p0, p1);
    }

    decltype(std::declval<PlayLayer>().xPosForTime(std::declval<float>())) PlayLayer::xPosForTime(float p0) {
        using r1089 = decltype(std::declval<PlayLayer>().xPosForTime(std::declval<float>()));
        using f1089 = r1089(*)(PlayLayer*, float);
        return reinterpret_cast<f1089>(base+0x7d140)(this, p0);
    }

    PlayLayer::~PlayLayer() {
        jumpDestructor(0x6b090)
    }

    LevelEditorLayer::~LevelEditorLayer() {
        jumpDestructor(0x90e80)
    }

    decltype(std::declval<LevelEditorLayer>().update(std::declval<float>())) LevelEditorLayer::update(float p0) {
        using r1092 = decltype(std::declval<LevelEditorLayer>().update(std::declval<float>()));
        using f1092 = r1092(*)(LevelEditorLayer*, float);
        return reinterpret_cast<f1092>(base+0xa1b70)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().draw()) LevelEditorLayer::draw() {
        using r1093 = decltype(std::declval<LevelEditorLayer>().draw());
        using f1093 = r1093(*)(LevelEditorLayer*);
        return reinterpret_cast<f1093>(base+0xa2a70)(this);
    }

    decltype(std::declval<LevelEditorLayer>().updateColor(std::declval<cocos2d::_ccColor3B>(), std::declval<float>(), std::declval<int>(), std::declval<bool>(), std::declval<float>(), std::declval<cocos2d::_ccHSVValue>(), std::declval<int>(), std::declval<bool>(), std::declval<int>(), std::declval<EffectGameObject*>())) LevelEditorLayer::updateColor(cocos2d::_ccColor3B p0, float p1, int p2, bool p3, float p4, cocos2d::_ccHSVValue p5, int p6, bool p7, int p8, EffectGameObject* p9) {
        using r1094 = decltype(std::declval<LevelEditorLayer>().updateColor(std::declval<cocos2d::_ccColor3B>(), std::declval<float>(), std::declval<int>(), std::declval<bool>(), std::declval<float>(), std::declval<cocos2d::_ccHSVValue>(), std::declval<int>(), std::declval<bool>(), std::declval<int>(), std::declval<EffectGameObject*>()));
        using f1094 = r1094(*)(LevelEditorLayer*, cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*);
        return reinterpret_cast<f1094>(base+0x9c200)(this, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    }

    decltype(std::declval<LevelEditorLayer>().flipGravity(std::declval<PlayerObject*>(), std::declval<bool>(), std::declval<bool>())) LevelEditorLayer::flipGravity(PlayerObject* p0, bool p1, bool p2) {
        using r1095 = decltype(std::declval<LevelEditorLayer>().flipGravity(std::declval<PlayerObject*>(), std::declval<bool>(), std::declval<bool>()));
        using f1095 = r1095(*)(LevelEditorLayer*, PlayerObject*, bool, bool);
        return reinterpret_cast<f1095>(base+0xa04e0)(this, p0, p1, p2);
    }

    decltype(std::declval<LevelEditorLayer>().calculateColorValues(std::declval<EffectGameObject*>(), std::declval<EffectGameObject*>(), std::declval<int>(), std::declval<float>(), std::declval<ColorActionSprite*>(), std::declval<GJEffectManager*>())) LevelEditorLayer::calculateColorValues(EffectGameObject* p0, EffectGameObject* p1, int p2, float p3, ColorActionSprite* p4, GJEffectManager* p5) {
        using r1096 = decltype(std::declval<LevelEditorLayer>().calculateColorValues(std::declval<EffectGameObject*>(), std::declval<EffectGameObject*>(), std::declval<int>(), std::declval<float>(), std::declval<ColorActionSprite*>(), std::declval<GJEffectManager*>()));
        using f1096 = r1096(*)(LevelEditorLayer*, EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*);
        return reinterpret_cast<f1096>(base+0x9c590)(this, p0, p1, p2, p3, p4, p5);
    }

    decltype(std::declval<LevelEditorLayer>().addToGroup(std::declval<GameObject*>(), std::declval<int>(), std::declval<bool>())) LevelEditorLayer::addToGroup(GameObject* p0, int p1, bool p2) {
        using r1097 = decltype(std::declval<LevelEditorLayer>().addToGroup(std::declval<GameObject*>(), std::declval<int>(), std::declval<bool>()));
        using f1097 = r1097(*)(LevelEditorLayer*, GameObject*, int, bool);
        return reinterpret_cast<f1097>(base+0x9dab0)(this, p0, p1, p2);
    }

    decltype(std::declval<LevelEditorLayer>().removeFromGroup(std::declval<GameObject*>(), std::declval<int>())) LevelEditorLayer::removeFromGroup(GameObject* p0, int p1) {
        using r1098 = decltype(std::declval<LevelEditorLayer>().removeFromGroup(std::declval<GameObject*>(), std::declval<int>()));
        using f1098 = r1098(*)(LevelEditorLayer*, GameObject*, int);
        return reinterpret_cast<f1098>(base+0x9db60)(this, p0, p1);
    }

    decltype(std::declval<LevelEditorLayer>().timeForXPos(std::declval<float>())) LevelEditorLayer::timeForXPos(float p0) {
        using r1099 = decltype(std::declval<LevelEditorLayer>().timeForXPos(std::declval<float>()));
        using f1099 = r1099(*)(LevelEditorLayer*, float);
        return reinterpret_cast<f1099>(base+0x9c7d0)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().xPosForTime(std::declval<float>())) LevelEditorLayer::xPosForTime(float p0) {
        using r1100 = decltype(std::declval<LevelEditorLayer>().xPosForTime(std::declval<float>()));
        using f1100 = r1100(*)(LevelEditorLayer*, float);
        return reinterpret_cast<f1100>(base+0x9c800)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().levelSettingsUpdated()) LevelEditorLayer::levelSettingsUpdated() {
        using r1101 = decltype(std::declval<LevelEditorLayer>().levelSettingsUpdated());
        using f1101 = r1101(*)(LevelEditorLayer*);
        return reinterpret_cast<f1101>(base+0x93f30)(this);
    }

    decltype(std::declval<LevelEditorLayer>().activateTriggerEffect(std::declval<EffectGameObject*>(), std::declval<float>(), std::declval<float>(), std::declval<float>())) LevelEditorLayer::activateTriggerEffect(EffectGameObject* p0, float p1, float p2, float p3) {
        using r1102 = decltype(std::declval<LevelEditorLayer>().activateTriggerEffect(std::declval<EffectGameObject*>(), std::declval<float>(), std::declval<float>(), std::declval<float>()));
        using f1102 = r1102(*)(LevelEditorLayer*, EffectGameObject*, float, float, float);
        return reinterpret_cast<f1102>(base+0x9b520)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<LevelEditorLayer>().addObjectFromString(std::declval<gd::string>())) LevelEditorLayer::addObjectFromString(gd::string p0) {
        using r1103 = decltype(std::declval<LevelEditorLayer>().addObjectFromString(std::declval<gd::string>()));
        using f1103 = r1103(*)(LevelEditorLayer*, gd::string);
        return reinterpret_cast<f1103>(base+0x94640)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().addSpecial(std::declval<GameObject*>())) LevelEditorLayer::addSpecial(GameObject* p0) {
        using r1104 = decltype(std::declval<LevelEditorLayer>().addSpecial(std::declval<GameObject*>()));
        using f1104 = r1104(*)(LevelEditorLayer*, GameObject*);
        return reinterpret_cast<f1104>(base+0x94f30)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().addToRedoList(std::declval<UndoObject*>())) LevelEditorLayer::addToRedoList(UndoObject* p0) {
        using r1105 = decltype(std::declval<LevelEditorLayer>().addToRedoList(std::declval<UndoObject*>()));
        using f1105 = r1105(*)(LevelEditorLayer*, UndoObject*);
        return reinterpret_cast<f1105>(base+0x96f80)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().addToUndoList(std::declval<UndoObject*>(), std::declval<bool>())) LevelEditorLayer::addToUndoList(UndoObject* p0, bool p1) {
        using r1106 = decltype(std::declval<LevelEditorLayer>().addToUndoList(std::declval<UndoObject*>(), std::declval<bool>()));
        using f1106 = r1106(*)(LevelEditorLayer*, UndoObject*, bool);
        return reinterpret_cast<f1106>(base+0x94e20)(this, p0, p1);
    }

    decltype(std::declval<LevelEditorLayer>().animateInDualGround(std::declval<GameObject*>(), std::declval<float>(), std::declval<bool>())) LevelEditorLayer::animateInDualGround(GameObject* p0, float p1, bool p2) {
        using r1107 = decltype(std::declval<LevelEditorLayer>().animateInDualGround(std::declval<GameObject*>(), std::declval<float>(), std::declval<bool>()));
        using f1107 = r1107(*)(LevelEditorLayer*, GameObject*, float, bool);
        return reinterpret_cast<f1107>(base+0xa2780)(this, p0, p1, p2);
    }

    decltype(std::declval<LevelEditorLayer>().checkCollisions(std::declval<PlayerObject*>(), std::declval<float>())) LevelEditorLayer::checkCollisions(PlayerObject* p0, float p1) {
        using r1108 = decltype(std::declval<LevelEditorLayer>().checkCollisions(std::declval<PlayerObject*>(), std::declval<float>()));
        using f1108 = r1108(*)(LevelEditorLayer*, PlayerObject*, float);
        return reinterpret_cast<f1108>(base+0x9e620)(this, p0, p1);
    }

    decltype(std::declval<LevelEditorLayer>().create(std::declval<GJGameLevel*>())) LevelEditorLayer::create(GJGameLevel* p0) {
        using r1109 = decltype(std::declval<LevelEditorLayer>().create(std::declval<GJGameLevel*>()));
        using f1109 = r1109(*)(GJGameLevel*);
        return reinterpret_cast<f1109>(base+0x90fb0)(p0);

    }

    decltype(std::declval<LevelEditorLayer>().createBackground()) LevelEditorLayer::createBackground() {
        using r1110 = decltype(std::declval<LevelEditorLayer>().createBackground());
        using f1110 = r1110(*)(LevelEditorLayer*);
        return reinterpret_cast<f1110>(base+0x929f0)(this);
    }

    decltype(std::declval<LevelEditorLayer>().createGroundLayer()) LevelEditorLayer::createGroundLayer() {
        using r1111 = decltype(std::declval<LevelEditorLayer>().createGroundLayer());
        using f1111 = r1111(*)(LevelEditorLayer*);
        return reinterpret_cast<f1111>(base+0x92840)(this);
    }

    decltype(std::declval<LevelEditorLayer>().createObject(std::declval<int>(), std::declval<cocos2d::CCPoint>(), std::declval<bool>())) LevelEditorLayer::createObject(int p0, cocos2d::CCPoint p1, bool p2) {
        using r1112 = decltype(std::declval<LevelEditorLayer>().createObject(std::declval<int>(), std::declval<cocos2d::CCPoint>(), std::declval<bool>()));
        using f1112 = r1112(*)(LevelEditorLayer*, int, cocos2d::CCPoint, bool);
        return reinterpret_cast<f1112>(base+0x957c0)(this, p0, p1, p2);
    }

    decltype(std::declval<LevelEditorLayer>().createObjectsFromSetup(std::declval<gd::string>())) LevelEditorLayer::createObjectsFromSetup(gd::string p0) {
        using r1113 = decltype(std::declval<LevelEditorLayer>().createObjectsFromSetup(std::declval<gd::string>()));
        using f1113 = r1113(*)(LevelEditorLayer*, gd::string);
        return reinterpret_cast<f1113>(base+0x92230)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().createObjectsFromString(std::declval<gd::string>(), std::declval<bool>())) LevelEditorLayer::createObjectsFromString(gd::string p0, bool p1) {
        using r1114 = decltype(std::declval<LevelEditorLayer>().createObjectsFromString(std::declval<gd::string>(), std::declval<bool>()));
        using f1114 = r1114(*)(LevelEditorLayer*, gd::string, bool);
        return reinterpret_cast<f1114>(base+0x94730)(this, p0, p1);
    }

    decltype(std::declval<LevelEditorLayer>().getLastObjectX()) LevelEditorLayer::getLastObjectX() {
        using r1115 = decltype(std::declval<LevelEditorLayer>().getLastObjectX());
        using f1115 = r1115(*)(LevelEditorLayer*);
        return reinterpret_cast<f1115>(base+0x9c860)(this);
    }

    decltype(std::declval<LevelEditorLayer>().getLevelString()) LevelEditorLayer::getLevelString() {
        using r1116 = decltype(std::declval<LevelEditorLayer>().getLevelString());
        using f1116 = r1116(*)(LevelEditorLayer*);
        return reinterpret_cast<f1116>(base+0x97790)(this);
    }

    decltype(std::declval<LevelEditorLayer>().getNextColorChannel()) LevelEditorLayer::getNextColorChannel() {
        using r1117 = decltype(std::declval<LevelEditorLayer>().getNextColorChannel());
        using f1117 = r1117(*)(LevelEditorLayer*);
        return reinterpret_cast<f1117>(base+0x9a610)(this);
    }

    decltype(std::declval<LevelEditorLayer>().getNextFreeBlockID(std::declval<cocos2d::CCArray*>())) LevelEditorLayer::getNextFreeBlockID(cocos2d::CCArray* p0) {
        using r1118 = decltype(std::declval<LevelEditorLayer>().getNextFreeBlockID(std::declval<cocos2d::CCArray*>()));
        using f1118 = r1118(*)(LevelEditorLayer*, cocos2d::CCArray*);
        return reinterpret_cast<f1118>(base+0x9a4e0)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().getNextFreeGroupID(std::declval<cocos2d::CCArray*>())) LevelEditorLayer::getNextFreeGroupID(cocos2d::CCArray* p0) {
        using r1119 = decltype(std::declval<LevelEditorLayer>().getNextFreeGroupID(std::declval<cocos2d::CCArray*>()));
        using f1119 = r1119(*)(LevelEditorLayer*, cocos2d::CCArray*);
        return reinterpret_cast<f1119>(base+0x9a1b0)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().getNextFreeItemID(std::declval<cocos2d::CCArray*>())) LevelEditorLayer::getNextFreeItemID(cocos2d::CCArray* p0) {
        using r1120 = decltype(std::declval<LevelEditorLayer>().getNextFreeItemID(std::declval<cocos2d::CCArray*>()));
        using f1120 = r1120(*)(LevelEditorLayer*, cocos2d::CCArray*);
        return reinterpret_cast<f1120>(base+0x9a390)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().getObjectRect(std::declval<GameObject*>(), std::declval<bool>())) LevelEditorLayer::getObjectRect(GameObject* p0, bool p1) {
        using r1121 = decltype(std::declval<LevelEditorLayer>().getObjectRect(std::declval<GameObject*>(), std::declval<bool>()));
        using f1121 = r1121(*)(LevelEditorLayer*, GameObject*, bool);
        return reinterpret_cast<f1121>(base+0x96240)(this, p0, p1);
    }

    decltype(std::declval<LevelEditorLayer>().getRelativeOffset(std::declval<GameObject*>())) LevelEditorLayer::getRelativeOffset(GameObject* p0) {
        using r1122 = decltype(std::declval<LevelEditorLayer>().getRelativeOffset(std::declval<GameObject*>()));
        using f1122 = r1122(*)(LevelEditorLayer*, GameObject*);
        return reinterpret_cast<f1122>(base+0x96840)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().handleAction(std::declval<bool>(), std::declval<cocos2d::CCArray*>())) LevelEditorLayer::handleAction(bool p0, cocos2d::CCArray* p1) {
        using r1123 = decltype(std::declval<LevelEditorLayer>().handleAction(std::declval<bool>(), std::declval<cocos2d::CCArray*>()));
        using f1123 = r1123(*)(LevelEditorLayer*, bool, cocos2d::CCArray*);
        return reinterpret_cast<f1123>(base+0x97020)(this, p0, p1);
    }

    decltype(std::declval<LevelEditorLayer>().init(std::declval<GJGameLevel*>())) LevelEditorLayer::init(GJGameLevel* p0) {
        using r1124 = decltype(std::declval<LevelEditorLayer>().init(std::declval<GJGameLevel*>()));
        using f1124 = r1124(*)(LevelEditorLayer*, GJGameLevel*);
        return reinterpret_cast<f1124>(base+0x91010)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().objectAtPosition(std::declval<cocos2d::CCPoint>())) LevelEditorLayer::objectAtPosition(cocos2d::CCPoint p0) {
        using r1125 = decltype(std::declval<LevelEditorLayer>().objectAtPosition(std::declval<cocos2d::CCPoint>()));
        using f1125 = r1125(*)(LevelEditorLayer*, cocos2d::CCPoint);
        return reinterpret_cast<f1125>(base+0x960c0)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().objectMoved(std::declval<GameObject*>())) LevelEditorLayer::objectMoved(GameObject* p0) {
        using r1126 = decltype(std::declval<LevelEditorLayer>().objectMoved(std::declval<GameObject*>()));
        using f1126 = r1126(*)(LevelEditorLayer*, GameObject*);
        return reinterpret_cast<f1126>(base+0x999f0)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().objectsInRect(std::declval<cocos2d::CCRect>(), std::declval<bool>())) LevelEditorLayer::objectsInRect(cocos2d::CCRect p0, bool p1) {
        using r1127 = decltype(std::declval<LevelEditorLayer>().objectsInRect(std::declval<cocos2d::CCRect>(), std::declval<bool>()));
        using f1127 = r1127(*)(LevelEditorLayer*, cocos2d::CCRect, bool);
        return reinterpret_cast<f1127>(base+0x95e60)(this, p0, p1);
    }

    decltype(std::declval<LevelEditorLayer>().onPlaytest()) LevelEditorLayer::onPlaytest() {
        using r1128 = decltype(std::declval<LevelEditorLayer>().onPlaytest());
        using f1128 = r1128(*)(LevelEditorLayer*);
        return reinterpret_cast<f1128>(base+0xa06b0)(this);
    }

    decltype(std::declval<LevelEditorLayer>().onStopPlaytest()) LevelEditorLayer::onStopPlaytest() {
        using r1129 = decltype(std::declval<LevelEditorLayer>().onStopPlaytest());
        using f1129 = r1129(*)(LevelEditorLayer*);
        return reinterpret_cast<f1129>(base+0xa1780)(this);
    }

    decltype(std::declval<LevelEditorLayer>().playMusic()) LevelEditorLayer::playMusic() {
        using r1130 = decltype(std::declval<LevelEditorLayer>().playMusic());
        using f1130 = r1130(*)(LevelEditorLayer*);
        return reinterpret_cast<f1130>(base+0xa13c0)(this);
    }

    decltype(std::declval<LevelEditorLayer>().recreateGroups()) LevelEditorLayer::recreateGroups() {
        using r1131 = decltype(std::declval<LevelEditorLayer>().recreateGroups());
        using f1131 = r1131(*)(LevelEditorLayer*);
        return reinterpret_cast<f1131>(base+0x9dbf0)(this);
    }

    decltype(std::declval<LevelEditorLayer>().redoLastAction()) LevelEditorLayer::redoLastAction() {
        using r1132 = decltype(std::declval<LevelEditorLayer>().redoLastAction());
        using f1132 = r1132(*)(LevelEditorLayer*);
        return reinterpret_cast<f1132>(base+0x97750)(this);
    }

    decltype(std::declval<LevelEditorLayer>().removeAllObjects()) LevelEditorLayer::removeAllObjects() {
        using r1133 = decltype(std::declval<LevelEditorLayer>().removeAllObjects());
        using f1133 = r1133(*)(LevelEditorLayer*);
        return reinterpret_cast<f1133>(base+0x93d80)(this);
    }

    decltype(std::declval<LevelEditorLayer>().removeAllObjectsOfType(std::declval<int>())) LevelEditorLayer::removeAllObjectsOfType(int p0) {
        using r1134 = decltype(std::declval<LevelEditorLayer>().removeAllObjectsOfType(std::declval<int>()));
        using f1134 = r1134(*)(LevelEditorLayer*, int);
        return reinterpret_cast<f1134>(base+0x96d40)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().removeObject(std::declval<GameObject*>(), std::declval<bool>())) LevelEditorLayer::removeObject(GameObject* p0, bool p1) {
        using r1135 = decltype(std::declval<LevelEditorLayer>().removeObject(std::declval<GameObject*>(), std::declval<bool>()));
        using f1135 = r1135(*)(LevelEditorLayer*, GameObject*, bool);
        return reinterpret_cast<f1135>(base+0x96890)(this, p0, p1);
    }

    decltype(std::declval<LevelEditorLayer>().removeSpecial(std::declval<GameObject*>())) LevelEditorLayer::removeSpecial(GameObject* p0) {
        using r1136 = decltype(std::declval<LevelEditorLayer>().removeSpecial(std::declval<GameObject*>()));
        using f1136 = r1136(*)(LevelEditorLayer*, GameObject*);
        return reinterpret_cast<f1136>(base+0x969c0)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().resetMovingObjects()) LevelEditorLayer::resetMovingObjects() {
        using r1137 = decltype(std::declval<LevelEditorLayer>().resetMovingObjects());
        using f1137 = r1137(*)(LevelEditorLayer*);
        return reinterpret_cast<f1137>(base+0x9ddc0)(this);
    }

    decltype(std::declval<LevelEditorLayer>().resetObjectVector()) LevelEditorLayer::resetObjectVector() {
        using r1138 = decltype(std::declval<LevelEditorLayer>().resetObjectVector());
        using f1138 = r1138(*)(LevelEditorLayer*);
        return reinterpret_cast<f1138>(base+0x9c4b0)(this);
    }

    decltype(std::declval<LevelEditorLayer>().resetToggledGroups()) LevelEditorLayer::resetToggledGroups() {
        using r1139 = decltype(std::declval<LevelEditorLayer>().resetToggledGroups());
        using f1139 = r1139(*)(LevelEditorLayer*);
        return reinterpret_cast<f1139>(base+0x9aa70)(this);
    }

    decltype(std::declval<LevelEditorLayer>().resetToggledGroupsAndObjects()) LevelEditorLayer::resetToggledGroupsAndObjects() {
        using r1140 = decltype(std::declval<LevelEditorLayer>().resetToggledGroupsAndObjects());
        using f1140 = r1140(*)(LevelEditorLayer*);
        return reinterpret_cast<f1140>(base+0x9c3c0)(this);
    }

    decltype(std::declval<LevelEditorLayer>().resetUnusedColorChannels()) LevelEditorLayer::resetUnusedColorChannels() {
        using r1141 = decltype(std::declval<LevelEditorLayer>().resetUnusedColorChannels());
        using f1141 = r1141(*)(LevelEditorLayer*);
        return reinterpret_cast<f1141>(base+0x9a870)(this);
    }

    decltype(std::declval<LevelEditorLayer>().rotationForSlopeNearObject(std::declval<GameObject*>())) LevelEditorLayer::rotationForSlopeNearObject(GameObject* p0) {
        using r1142 = decltype(std::declval<LevelEditorLayer>().rotationForSlopeNearObject(std::declval<GameObject*>()));
        using f1142 = r1142(*)(LevelEditorLayer*, GameObject*);
        return reinterpret_cast<f1142>(base+0x95cd0)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().runColorEffect(std::declval<EffectGameObject*>(), std::declval<int>(), std::declval<float>(), std::declval<float>(), std::declval<bool>())) LevelEditorLayer::runColorEffect(EffectGameObject* p0, int p1, float p2, float p3, bool p4) {
        using r1143 = decltype(std::declval<LevelEditorLayer>().runColorEffect(std::declval<EffectGameObject*>(), std::declval<int>(), std::declval<float>(), std::declval<float>(), std::declval<bool>()));
        using f1143 = r1143(*)(LevelEditorLayer*, EffectGameObject*, int, float, float, bool);
        return reinterpret_cast<f1143>(base+0x9bd30)(this, p0, p1, p2, p3, p4);
    }

    decltype(std::declval<LevelEditorLayer>().scene(std::declval<GJGameLevel*>())) LevelEditorLayer::scene(GJGameLevel* p0) {
        using r1144 = decltype(std::declval<LevelEditorLayer>().scene(std::declval<GJGameLevel*>()));
        using f1144 = r1144(*)(LevelEditorLayer*, GJGameLevel*);
        return reinterpret_cast<f1144>(base+0x90f20)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().setupLevelStart(std::declval<LevelSettingsObject*>())) LevelEditorLayer::setupLevelStart(LevelSettingsObject* p0) {
        using r1145 = decltype(std::declval<LevelEditorLayer>().setupLevelStart(std::declval<LevelSettingsObject*>()));
        using f1145 = r1145(*)(LevelEditorLayer*, LevelSettingsObject*);
        return reinterpret_cast<f1145>(base+0xa0ca0)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().sortStickyGroups()) LevelEditorLayer::sortStickyGroups() {
        using r1146 = decltype(std::declval<LevelEditorLayer>().sortStickyGroups());
        using f1146 = r1146(*)(LevelEditorLayer*);
        return reinterpret_cast<f1146>(base+0x92b10)(this);
    }

    decltype(std::declval<LevelEditorLayer>().stopTriggersInGroup(std::declval<int>(), std::declval<float>())) LevelEditorLayer::stopTriggersInGroup(int p0, float p1) {
        using r1147 = decltype(std::declval<LevelEditorLayer>().stopTriggersInGroup(std::declval<int>(), std::declval<float>()));
        using f1147 = r1147(*)(LevelEditorLayer*, int, float);
        return reinterpret_cast<f1147>(base+0x9c030)(this, p0, p1);
    }

    decltype(std::declval<LevelEditorLayer>().toggleDualMode(std::declval<GameObject*>(), std::declval<bool>(), std::declval<PlayerObject*>(), std::declval<bool>())) LevelEditorLayer::toggleDualMode(GameObject* p0, bool p1, PlayerObject* p2, bool p3) {
        using r1148 = decltype(std::declval<LevelEditorLayer>().toggleDualMode(std::declval<GameObject*>(), std::declval<bool>(), std::declval<PlayerObject*>(), std::declval<bool>()));
        using f1148 = r1148(*)(LevelEditorLayer*, GameObject*, bool, PlayerObject*, bool);
        return reinterpret_cast<f1148>(base+0xa0200)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<LevelEditorLayer>().toggleGroupPreview(std::declval<int>(), std::declval<bool>())) LevelEditorLayer::toggleGroupPreview(int p0, bool p1) {
        using r1149 = decltype(std::declval<LevelEditorLayer>().toggleGroupPreview(std::declval<int>(), std::declval<bool>()));
        using f1149 = r1149(*)(LevelEditorLayer*, int, bool);
        return reinterpret_cast<f1149>(base+0x9bea0)(this, p0, p1);
    }

    decltype(std::declval<LevelEditorLayer>().transferDefaultColors(std::declval<GJEffectManager*>(), std::declval<GJEffectManager*>())) LevelEditorLayer::transferDefaultColors(GJEffectManager* p0, GJEffectManager* p1) {
        using r1150 = decltype(std::declval<LevelEditorLayer>().transferDefaultColors(std::declval<GJEffectManager*>(), std::declval<GJEffectManager*>()));
        using f1150 = r1150(*)(LevelEditorLayer*, GJEffectManager*, GJEffectManager*);
        return reinterpret_cast<f1150>(base+0x9ab50)(this, p0, p1);
    }

    decltype(std::declval<LevelEditorLayer>().undoLastAction()) LevelEditorLayer::undoLastAction() {
        using r1151 = decltype(std::declval<LevelEditorLayer>().undoLastAction());
        using f1151 = r1151(*)(LevelEditorLayer*);
        return reinterpret_cast<f1151>(base+0x97770)(this);
    }

    decltype(std::declval<LevelEditorLayer>().updateBGAndGColors()) LevelEditorLayer::updateBGAndGColors() {
        using r1152 = decltype(std::declval<LevelEditorLayer>().updateBGAndGColors());
        using f1152 = r1152(*)(LevelEditorLayer*);
        return reinterpret_cast<f1152>(base+0x9b9b0)(this);
    }

    decltype(std::declval<LevelEditorLayer>().updateBlendValues()) LevelEditorLayer::updateBlendValues() {
        using r1153 = decltype(std::declval<LevelEditorLayer>().updateBlendValues());
        using f1153 = r1153(*)(LevelEditorLayer*);
        return reinterpret_cast<f1153>(base+0x9bc60)(this);
    }

    decltype(std::declval<LevelEditorLayer>().updateDualGround(std::declval<PlayerObject*>(), std::declval<int>(), std::declval<bool>())) LevelEditorLayer::updateDualGround(PlayerObject* p0, int p1, bool p2) {
        using r1154 = decltype(std::declval<LevelEditorLayer>().updateDualGround(std::declval<PlayerObject*>(), std::declval<int>(), std::declval<bool>()));
        using f1154 = r1154(*)(LevelEditorLayer*, PlayerObject*, int, bool);
        return reinterpret_cast<f1154>(base+0xa1a60)(this, p0, p1, p2);
    }

    decltype(std::declval<LevelEditorLayer>().updateEditorMode()) LevelEditorLayer::updateEditorMode() {
        using r1155 = decltype(std::declval<LevelEditorLayer>().updateEditorMode());
        using f1155 = r1155(*)(LevelEditorLayer*);
        return reinterpret_cast<f1155>(base+0x93b50)(this);
    }

    decltype(std::declval<LevelEditorLayer>().updateGameObjectsNew()) LevelEditorLayer::updateGameObjectsNew() {
        using r1156 = decltype(std::declval<LevelEditorLayer>().updateGameObjectsNew());
        using f1156 = r1156(*)(LevelEditorLayer*);
        return reinterpret_cast<f1156>(base+0x9adc0)(this);
    }

    decltype(std::declval<LevelEditorLayer>().updateGround(std::declval<float>())) LevelEditorLayer::updateGround(float p0) {
        using r1157 = decltype(std::declval<LevelEditorLayer>().updateGround(std::declval<float>()));
        using f1157 = r1157(*)(LevelEditorLayer*, float);
        return reinterpret_cast<f1157>(base+0x93a60)(this, p0);
    }

    decltype(std::declval<LevelEditorLayer>().updateGroundWidth()) LevelEditorLayer::updateGroundWidth() {
        using r1158 = decltype(std::declval<LevelEditorLayer>().updateGroundWidth());
        using f1158 = r1158(*)(LevelEditorLayer*);
        return reinterpret_cast<f1158>(base+0x92af0)(this);
    }

    decltype(std::declval<LevelEditorLayer>().updateOptions()) LevelEditorLayer::updateOptions() {
        using r1159 = decltype(std::declval<LevelEditorLayer>().updateOptions());
        using f1159 = r1159(*)(LevelEditorLayer*);
        return reinterpret_cast<f1159>(base+0x91ed0)(this);
    }

    decltype(std::declval<LevelEditorLayer>().updateToggledGroups()) LevelEditorLayer::updateToggledGroups() {
        using r1160 = decltype(std::declval<LevelEditorLayer>().updateToggledGroups());
        using f1160 = r1160(*)(LevelEditorLayer*);
        return reinterpret_cast<f1160>(base+0x9bb10)(this);
    }

    decltype(std::declval<LevelEditorLayer>().updateVisibility(std::declval<float>())) LevelEditorLayer::updateVisibility(float p0) {
        using r1161 = decltype(std::declval<LevelEditorLayer>().updateVisibility(std::declval<float>()));
        using f1161 = r1161(*)(LevelEditorLayer*, float);
        return reinterpret_cast<f1161>(base+0x92c70)(this, p0);
    }

    decltype(std::declval<EditorUI>().constrainGameLayerPosition()) EditorUI::constrainGameLayerPosition() {
        using r1162 = decltype(std::declval<EditorUI>().constrainGameLayerPosition());
        using f1162 = r1162(*)(EditorUI*);
        return reinterpret_cast<f1162>(base+0x1c6d0)(this);
    }

    decltype(std::declval<EditorUI>().create(std::declval<LevelEditorLayer*>())) EditorUI::create(LevelEditorLayer* p0) {
        using r1163 = decltype(std::declval<EditorUI>().create(std::declval<LevelEditorLayer*>()));
        using f1163 = r1163(*)(EditorUI*, LevelEditorLayer*);
        return reinterpret_cast<f1163>(base+0x8a80)(this, p0);
    }

    decltype(std::declval<EditorUI>().deselectAll()) EditorUI::deselectAll() {
        using r1164 = decltype(std::declval<EditorUI>().deselectAll());
        using f1164 = r1164(*)(EditorUI*);
        return reinterpret_cast<f1164>(base+0x1f300)(this);
    }

    decltype(std::declval<EditorUI>().onDeselectAll(std::declval<cocos2d::CCObject*>())) EditorUI::onDeselectAll(cocos2d::CCObject* p0) {
        using r1165 = decltype(std::declval<EditorUI>().onDeselectAll(std::declval<cocos2d::CCObject*>()));
        using f1165 = r1165(*)(EditorUI*, cocos2d::CCObject*);
        return reinterpret_cast<f1165>(base+0x19cd0)(this, p0);
    }

    decltype(std::declval<EditorUI>().disableButton(std::declval<CreateMenuItem*>())) EditorUI::disableButton(CreateMenuItem* p0) {
        using r1166 = decltype(std::declval<EditorUI>().disableButton(std::declval<CreateMenuItem*>()));
        using f1166 = r1166(*)(EditorUI*, CreateMenuItem*);
        return reinterpret_cast<f1166>(base+0x1c0f0)(this, p0);
    }

    decltype(std::declval<EditorUI>().editButtonUsable()) EditorUI::editButtonUsable() {
        using r1167 = decltype(std::declval<EditorUI>().editButtonUsable());
        using f1167 = r1167(*)(EditorUI*);
        return reinterpret_cast<f1167>(base+0x28f30)(this);
    }

    decltype(std::declval<EditorUI>().editObject(std::declval<cocos2d::CCObject*>())) EditorUI::editObject(cocos2d::CCObject* p0) {
        using r1168 = decltype(std::declval<EditorUI>().editObject(std::declval<cocos2d::CCObject*>()));
        using f1168 = r1168(*)(EditorUI*, cocos2d::CCObject*);
        return reinterpret_cast<f1168>(base+0x195a0)(this, p0);
    }

    decltype(std::declval<EditorUI>().enableButton(std::declval<CreateMenuItem*>())) EditorUI::enableButton(CreateMenuItem* p0) {
        using r1169 = decltype(std::declval<EditorUI>().enableButton(std::declval<CreateMenuItem*>()));
        using f1169 = r1169(*)(EditorUI*, CreateMenuItem*);
        return reinterpret_cast<f1169>(base+0x1bff0)(this, p0);
    }

    decltype(std::declval<EditorUI>().getCreateBtn(std::declval<int>(), std::declval<int>())) EditorUI::getCreateBtn(int p0, int p1) {
        using r1170 = decltype(std::declval<EditorUI>().getCreateBtn(std::declval<int>(), std::declval<int>()));
        using f1170 = r1170(*)(EditorUI*, int, int);
        return reinterpret_cast<f1170>(base+0x1f6c0)(this, p0, p1);
    }

    decltype(std::declval<EditorUI>().getGroupCenter(std::declval<cocos2d::CCArray*>(), std::declval<bool>())) EditorUI::getGroupCenter(cocos2d::CCArray* p0, bool p1) {
        using r1171 = decltype(std::declval<EditorUI>().getGroupCenter(std::declval<cocos2d::CCArray*>(), std::declval<bool>()));
        using f1171 = r1171(*)(EditorUI*, cocos2d::CCArray*, bool);
        return reinterpret_cast<f1171>(base+0x23470)(this, p0, p1);
    }

    decltype(std::declval<EditorUI>().getSelectedObjects()) EditorUI::getSelectedObjects() {
        using r1172 = decltype(std::declval<EditorUI>().getSelectedObjects());
        using f1172 = r1172(*)(EditorUI*);
        return reinterpret_cast<f1172>(base+0x23f30)(this);
    }

    decltype(std::declval<EditorUI>().init(std::declval<LevelEditorLayer*>())) EditorUI::init(LevelEditorLayer* p0) {
        using r1173 = decltype(std::declval<EditorUI>().init(std::declval<LevelEditorLayer*>()));
        using f1173 = r1173(*)(EditorUI*, LevelEditorLayer*);
        return reinterpret_cast<f1173>(base+0x8ae0)(this, p0);
    }

    decltype(std::declval<EditorUI>().keyDown(std::declval<cocos2d::enumKeyCodes>())) EditorUI::keyDown(cocos2d::enumKeyCodes p0) {
        using r1174 = decltype(std::declval<EditorUI>().keyDown(std::declval<cocos2d::enumKeyCodes>()));
        using f1174 = r1174(*)(EditorUI*, cocos2d::enumKeyCodes);
        return reinterpret_cast<f1174>(base+0x30790)(this, p0);
    }

    decltype(std::declval<EditorUI>().moveObject(std::declval<GameObject*>(), std::declval<cocos2d::CCPoint>())) EditorUI::moveObject(GameObject* p0, cocos2d::CCPoint p1) {
        using r1175 = decltype(std::declval<EditorUI>().moveObject(std::declval<GameObject*>(), std::declval<cocos2d::CCPoint>()));
        using f1175 = r1175(*)(EditorUI*, GameObject*, cocos2d::CCPoint);
        return reinterpret_cast<f1175>(base+0x24b10)(this, p0, p1);
    }

    decltype(std::declval<EditorUI>().onDuplicate(std::declval<cocos2d::CCObject*>())) EditorUI::onDuplicate(cocos2d::CCObject* p0) {
        using r1176 = decltype(std::declval<EditorUI>().onDuplicate(std::declval<cocos2d::CCObject*>()));
        using f1176 = r1176(*)(EditorUI*, cocos2d::CCObject*);
        return reinterpret_cast<f1176>(base+0x18ba0)(this, p0);
    }

    decltype(std::declval<EditorUI>().pasteObjects(std::declval<gd::string>())) EditorUI::pasteObjects(gd::string p0) {
        using r1177 = decltype(std::declval<EditorUI>().pasteObjects(std::declval<gd::string>()));
        using f1177 = r1177(*)(EditorUI*, gd::string);
        return reinterpret_cast<f1177>(base+0x232d0)(this, p0);
    }

    decltype(std::declval<EditorUI>().playerTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) EditorUI::playerTouchBegan(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r1178 = decltype(std::declval<EditorUI>().playerTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f1178 = r1178(*)(EditorUI*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f1178>(base+0x2ebf0)(this, p0, p1);
    }

    decltype(std::declval<EditorUI>().playtestStopped()) EditorUI::playtestStopped() {
        using r1179 = decltype(std::declval<EditorUI>().playtestStopped());
        using f1179 = r1179(*)(EditorUI*);
        return reinterpret_cast<f1179>(base+0x24790)(this);
    }

    decltype(std::declval<EditorUI>().redoLastAction(std::declval<cocos2d::CCObject*>())) EditorUI::redoLastAction(cocos2d::CCObject* p0) {
        using r1180 = decltype(std::declval<EditorUI>().redoLastAction(std::declval<cocos2d::CCObject*>()));
        using f1180 = r1180(*)(EditorUI*, cocos2d::CCObject*);
        return reinterpret_cast<f1180>(base+0xb8e0)(this, p0);
    }

    decltype(std::declval<EditorUI>().replaceGroupID(std::declval<GameObject*>(), std::declval<int>(), std::declval<int>())) EditorUI::replaceGroupID(GameObject* p0, int p1, int p2) {
        using r1181 = decltype(std::declval<EditorUI>().replaceGroupID(std::declval<GameObject*>(), std::declval<int>(), std::declval<int>()));
        using f1181 = r1181(*)(EditorUI*, GameObject*, int, int);
        return reinterpret_cast<f1181>(base+0x27470)(this, p0, p1, p2);
    }

    decltype(std::declval<EditorUI>().scaleChanged(std::declval<float>())) EditorUI::scaleChanged(float p0) {
        using r1182 = decltype(std::declval<EditorUI>().scaleChanged(std::declval<float>()));
        using f1182 = r1182(*)(EditorUI*, float);
        return reinterpret_cast<f1182>(base+0x25490)(this, p0);
    }

    decltype(std::declval<EditorUI>().scaleObjects(std::declval<cocos2d::CCArray*>(), std::declval<float>(), std::declval<cocos2d::CCPoint>())) EditorUI::scaleObjects(cocos2d::CCArray* p0, float p1, cocos2d::CCPoint p2) {
        using r1183 = decltype(std::declval<EditorUI>().scaleObjects(std::declval<cocos2d::CCArray*>(), std::declval<float>(), std::declval<cocos2d::CCPoint>()));
        using f1183 = r1183(*)(EditorUI*, cocos2d::CCArray*, float, cocos2d::CCPoint);
        return reinterpret_cast<f1183>(base+0x252e0)(this, p0, p1, p2);
    }

    decltype(std::declval<EditorUI>().selectObjects(std::declval<cocos2d::CCArray*>(), std::declval<bool>())) EditorUI::selectObjects(cocos2d::CCArray* p0, bool p1) {
        using r1184 = decltype(std::declval<EditorUI>().selectObjects(std::declval<cocos2d::CCArray*>(), std::declval<bool>()));
        using f1184 = r1184(*)(EditorUI*, cocos2d::CCArray*, bool);
        return reinterpret_cast<f1184>(base+0x23940)(this, p0, p1);
    }

    decltype(std::declval<EditorUI>().setupCreateMenu()) EditorUI::setupCreateMenu() {
        using r1185 = decltype(std::declval<EditorUI>().setupCreateMenu());
        using f1185 = r1185(*)(EditorUI*);
        return reinterpret_cast<f1185>(base+0xcb50)(this);
    }

    decltype(std::declval<EditorUI>().undoLastAction(std::declval<cocos2d::CCObject*>())) EditorUI::undoLastAction(cocos2d::CCObject* p0) {
        using r1186 = decltype(std::declval<EditorUI>().undoLastAction(std::declval<cocos2d::CCObject*>()));
        using f1186 = r1186(*)(EditorUI*, cocos2d::CCObject*);
        return reinterpret_cast<f1186>(base+0xb830)(this, p0);
    }

    decltype(std::declval<EditorUI>().updateButtons()) EditorUI::updateButtons() {
        using r1187 = decltype(std::declval<EditorUI>().updateButtons());
        using f1187 = r1187(*)(EditorUI*);
        return reinterpret_cast<f1187>(base+0x1a300)(this);
    }

    decltype(std::declval<EditorUI>().updateObjectInfoLabel()) EditorUI::updateObjectInfoLabel() {
        using r1188 = decltype(std::declval<EditorUI>().updateObjectInfoLabel());
        using f1188 = r1188(*)(EditorUI*);
        return reinterpret_cast<f1188>(base+0x1cb10)(this);
    }

    decltype(std::declval<EditorUI>().updateSlider()) EditorUI::updateSlider() {
        using r1189 = decltype(std::declval<EditorUI>().updateSlider());
        using f1189 = r1189(*)(EditorUI*);
        return reinterpret_cast<f1189>(base+0x18a90)(this);
    }

    decltype(std::declval<EditorUI>().updateZoom(std::declval<float>())) EditorUI::updateZoom(float p0) {
        using r1190 = decltype(std::declval<EditorUI>().updateZoom(std::declval<float>()));
        using f1190 = r1190(*)(EditorUI*, float);
        return reinterpret_cast<f1190>(base+0x248c0)(this, p0);
    }

    decltype(std::declval<ButtonSprite>().create(std::declval<char const*>())) ButtonSprite::create(char const* p0) {
        using r1191 = decltype(std::declval<ButtonSprite>().create(std::declval<char const*>()));
        using f1191 = r1191(*)(char const*);
        return reinterpret_cast<f1191>(base+0x4fa10)(p0);

    }

    decltype(std::declval<ButtonSprite>().create(std::declval<char const*>(), std::declval<int>(), std::declval<int>(), std::declval<float>(), std::declval<bool>())) ButtonSprite::create(char const* p0, int p1, int p2, float p3, bool p4) {
        using r1192 = decltype(std::declval<ButtonSprite>().create(std::declval<char const*>(), std::declval<int>(), std::declval<int>(), std::declval<float>(), std::declval<bool>()));
        using f1192 = r1192(*)(char const*, int, int, float, bool);
        return reinterpret_cast<f1192>(base+0x4fa40)(p0, p1, p2, p3, p4);

    }

    decltype(std::declval<ButtonSprite>().updateBGImage(std::declval<char const*>())) ButtonSprite::updateBGImage(char const* p0) {
        using r1193 = decltype(std::declval<ButtonSprite>().updateBGImage(std::declval<char const*>()));
        using f1193 = r1193(*)(ButtonSprite*, char const*);
        return reinterpret_cast<f1193>(base+0x502d0)(this, p0);
    }

    decltype(std::declval<ButtonSprite>().create(std::declval<char const*>(), std::declval<float>())) ButtonSprite::create(char const* p0, float p1) {
        using r1194 = decltype(std::declval<ButtonSprite>().create(std::declval<char const*>(), std::declval<float>()));
        using f1194 = r1194(*)(char const*, float);
        return reinterpret_cast<f1194>(base+0x4fa60)(p0, p1);

    }

    decltype(std::declval<ButtonSprite>().create(std::declval<cocos2d::CCSprite*>(), std::declval<int>(), std::declval<int>(), std::declval<float>(), std::declval<float>(), std::declval<bool>(), std::declval<char const*>(), std::declval<bool>())) ButtonSprite::create(cocos2d::CCSprite* p0, int p1, int p2, float p3, float p4, bool p5, char const* p6, bool p7) {
        using r1195 = decltype(std::declval<ButtonSprite>().create(std::declval<cocos2d::CCSprite*>(), std::declval<int>(), std::declval<int>(), std::declval<float>(), std::declval<float>(), std::declval<bool>(), std::declval<char const*>(), std::declval<bool>()));
        using f1195 = r1195(*)(cocos2d::CCSprite*, int, int, float, float, bool, char const*, bool);
        return reinterpret_cast<f1195>(base+0x4fa90)(p0, p1, p2, p3, p4, p5, p6, p7);

    }

    decltype(std::declval<CCTextInputNode>().create(std::declval<float>(), std::declval<float>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<int>(), std::declval<char const*>())) CCTextInputNode::create(float p0, float p1, char const* p2, char const* p3, int p4, char const* p5) {
        using r1196 = decltype(std::declval<CCTextInputNode>().create(std::declval<float>(), std::declval<float>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<int>(), std::declval<char const*>()));
        using f1196 = r1196(*)(float, float, char const*, char const*, int, char const*);
        return reinterpret_cast<f1196>(base+0x5cfb0)(p0, p1, p2, p3, p4, p5);

    }

    decltype(std::declval<CCTextInputNode>().getString()) CCTextInputNode::getString() {
        using r1197 = decltype(std::declval<CCTextInputNode>().getString());
        using f1197 = r1197(*)(CCTextInputNode*);
        return reinterpret_cast<f1197>(base+0x5d6f0)(this);
    }

    decltype(std::declval<CCTextInputNode>().refreshLabel()) CCTextInputNode::refreshLabel() {
        using r1198 = decltype(std::declval<CCTextInputNode>().refreshLabel());
        using f1198 = r1198(*)(CCTextInputNode*);
        return reinterpret_cast<f1198>(base+0x5d730)(this);
    }

    decltype(std::declval<CCTextInputNode>().setAllowedChars(std::declval<gd::string>())) CCTextInputNode::setAllowedChars(gd::string p0) {
        using r1199 = decltype(std::declval<CCTextInputNode>().setAllowedChars(std::declval<gd::string>()));
        using f1199 = r1199(*)(CCTextInputNode*, gd::string);
        return reinterpret_cast<f1199>(base+0x5d360)(this, p0);
    }

    decltype(std::declval<CCTextInputNode>().setLabelNormalColor(std::declval<cocos2d::_ccColor3B>())) CCTextInputNode::setLabelNormalColor(cocos2d::_ccColor3B p0) {
        using r1200 = decltype(std::declval<CCTextInputNode>().setLabelNormalColor(std::declval<cocos2d::_ccColor3B>()));
        using f1200 = r1200(*)(CCTextInputNode*, cocos2d::_ccColor3B);
        return reinterpret_cast<f1200>(base+0x5dab0)(this, p0);
    }

    decltype(std::declval<CCTextInputNode>().setLabelPlaceholderColor(std::declval<cocos2d::_ccColor3B>())) CCTextInputNode::setLabelPlaceholderColor(cocos2d::_ccColor3B p0) {
        using r1201 = decltype(std::declval<CCTextInputNode>().setLabelPlaceholderColor(std::declval<cocos2d::_ccColor3B>()));
        using f1201 = r1201(*)(CCTextInputNode*, cocos2d::_ccColor3B);
        return reinterpret_cast<f1201>(base+0x5da90)(this, p0);
    }

    decltype(std::declval<CCTextInputNode>().setLabelPlaceholderScale(std::declval<float>())) CCTextInputNode::setLabelPlaceholderScale(float p0) {
        using r1202 = decltype(std::declval<CCTextInputNode>().setLabelPlaceholderScale(std::declval<float>()));
        using f1202 = r1202(*)(CCTextInputNode*, float);
        return reinterpret_cast<f1202>(base+0x5da70)(this, p0);
    }

    decltype(std::declval<CCTextInputNode>().setMaxLabelScale(std::declval<float>())) CCTextInputNode::setMaxLabelScale(float p0) {
        using r1203 = decltype(std::declval<CCTextInputNode>().setMaxLabelScale(std::declval<float>()));
        using f1203 = r1203(*)(CCTextInputNode*, float);
        return reinterpret_cast<f1203>(base+0x5da30)(this, p0);
    }

    decltype(std::declval<CCTextInputNode>().setMaxLabelWidth(std::declval<float>())) CCTextInputNode::setMaxLabelWidth(float p0) {
        using r1204 = decltype(std::declval<CCTextInputNode>().setMaxLabelWidth(std::declval<float>()));
        using f1204 = r1204(*)(CCTextInputNode*, float);
        return reinterpret_cast<f1204>(base+0x5da50)(this, p0);
    }

    decltype(std::declval<CCTextInputNode>().setString(std::declval<gd::string>())) CCTextInputNode::setString(gd::string p0) {
        using r1205 = decltype(std::declval<CCTextInputNode>().setString(std::declval<gd::string>()));
        using f1205 = r1205(*)(CCTextInputNode*, gd::string);
        return reinterpret_cast<f1205>(base+0x5d3e0)(this, p0);
    }

    decltype(std::declval<CCTextInputNode>().updateLabel(std::declval<gd::string>())) CCTextInputNode::updateLabel(gd::string p0) {
        using r1206 = decltype(std::declval<CCTextInputNode>().updateLabel(std::declval<gd::string>()));
        using f1206 = r1206(*)(CCTextInputNode*, gd::string);
        return reinterpret_cast<f1206>(base+0x5d4a0)(this, p0);
    }

    decltype(std::declval<CCTextInputNode>().forceOffset()) CCTextInputNode::forceOffset() {
        using r1207 = decltype(std::declval<CCTextInputNode>().forceOffset());
        using f1207 = r1207(*)(CCTextInputNode*);
        return reinterpret_cast<f1207>(base+0x5ec70)(this);
    }

    decltype(std::declval<CCTextInputNode>().registerWithTouchDispatcher()) CCTextInputNode::registerWithTouchDispatcher() {
        using r1208 = decltype(std::declval<CCTextInputNode>().registerWithTouchDispatcher());
        using f1208 = r1208(*)(CCTextInputNode*);
        return reinterpret_cast<f1208>(base+0x5eec0)(this);
    }

    decltype(std::declval<CCTextInputNode>().init(std::declval<float>(), std::declval<float>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<int>(), std::declval<char const*>())) CCTextInputNode::init(float p0, float p1, char const* p2, char const* p3, int p4, char const* p5) {
        using r1209 = decltype(std::declval<CCTextInputNode>().init(std::declval<float>(), std::declval<float>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<int>(), std::declval<char const*>()));
        using f1209 = r1209(*)(CCTextInputNode*, float, float, char const*, char const*, int, char const*);
        return reinterpret_cast<f1209>(base+0x5d180)(this, p0, p1, p2, p3, p4, p5);
    }

    CCTextInputNode::~CCTextInputNode() {
        jumpDestructor(0x5ceb0)
    }

    decltype(std::declval<CCTextInputNode>().visit()) CCTextInputNode::visit() {
        using r1211 = decltype(std::declval<CCTextInputNode>().visit());
        using f1211 = r1211(*)(CCTextInputNode*);
        return reinterpret_cast<f1211>(base+0x5d380)(this);
    }

    decltype(std::declval<CCTextInputNode>().ccTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) CCTextInputNode::ccTouchBegan(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r1212 = decltype(std::declval<CCTextInputNode>().ccTouchBegan(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f1212 = r1212(*)(CCTextInputNode*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f1212>(base+0x5ec80)(this, p0, p1);
    }

    decltype(std::declval<CCTextInputNode>().ccTouchCancelled(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) CCTextInputNode::ccTouchCancelled(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r1213 = decltype(std::declval<CCTextInputNode>().ccTouchCancelled(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f1213 = r1213(*)(CCTextInputNode*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f1213>(base+0x5ee80)(this, p0, p1);
    }

    decltype(std::declval<CCTextInputNode>().ccTouchEnded(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) CCTextInputNode::ccTouchEnded(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r1214 = decltype(std::declval<CCTextInputNode>().ccTouchEnded(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f1214 = r1214(*)(CCTextInputNode*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f1214>(base+0x5ee60)(this, p0, p1);
    }

    decltype(std::declval<CCTextInputNode>().ccTouchMoved(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>())) CCTextInputNode::ccTouchMoved(cocos2d::CCTouch* p0, cocos2d::CCEvent* p1) {
        using r1215 = decltype(std::declval<CCTextInputNode>().ccTouchMoved(std::declval<cocos2d::CCTouch*>(), std::declval<cocos2d::CCEvent*>()));
        using f1215 = r1215(*)(CCTextInputNode*, cocos2d::CCTouch*, cocos2d::CCEvent*);
        return reinterpret_cast<f1215>(base+0x5eea0)(this, p0, p1);
    }

    decltype(std::declval<CCTextInputNode>().textChanged()) CCTextInputNode::textChanged() {
        using r1216 = decltype(std::declval<CCTextInputNode>().textChanged());
        using f1216 = r1216(*)(CCTextInputNode*);
        return reinterpret_cast<f1216>(base+0x5dd70)(this);
    }

    decltype(std::declval<CCTextInputNode>().onClickTrackNode(std::declval<bool>())) CCTextInputNode::onClickTrackNode(bool p0) {
        using r1217 = decltype(std::declval<CCTextInputNode>().onClickTrackNode(std::declval<bool>()));
        using f1217 = r1217(*)(CCTextInputNode*, bool);
        return reinterpret_cast<f1217>(base+0x5dd40)(this, p0);
    }

    decltype(std::declval<CCTextInputNode>().keyboardWillShow(std::declval<cocos2d::CCIMEKeyboardNotificationInfo&>())) CCTextInputNode::keyboardWillShow(cocos2d::CCIMEKeyboardNotificationInfo& p0) {
        using r1218 = decltype(std::declval<CCTextInputNode>().keyboardWillShow(std::declval<cocos2d::CCIMEKeyboardNotificationInfo&>()));
        using f1218 = r1218(*)(CCTextInputNode*, cocos2d::CCIMEKeyboardNotificationInfo&);
        return reinterpret_cast<f1218>(base+0x5dad0)(this, p0);
    }

    decltype(std::declval<CCTextInputNode>().keyboardWillHide(std::declval<cocos2d::CCIMEKeyboardNotificationInfo&>())) CCTextInputNode::keyboardWillHide(cocos2d::CCIMEKeyboardNotificationInfo& p0) {
        using r1219 = decltype(std::declval<CCTextInputNode>().keyboardWillHide(std::declval<cocos2d::CCIMEKeyboardNotificationInfo&>()));
        using f1219 = r1219(*)(CCTextInputNode*, cocos2d::CCIMEKeyboardNotificationInfo&);
        return reinterpret_cast<f1219>(base+0x5dc20)(this, p0);
    }

    decltype(std::declval<CCTextInputNode>().onTextFieldInsertText(std::declval<cocos2d::CCTextFieldTTF*>(), std::declval<char const*>(), std::declval<int>())) CCTextInputNode::onTextFieldInsertText(cocos2d::CCTextFieldTTF* p0, char const* p1, int p2) {
        using r1220 = decltype(std::declval<CCTextInputNode>().onTextFieldInsertText(std::declval<cocos2d::CCTextFieldTTF*>(), std::declval<char const*>(), std::declval<int>()));
        using f1220 = r1220(*)(CCTextInputNode*, cocos2d::CCTextFieldTTF*, char const*, int);
        return reinterpret_cast<f1220>(base+0x5de50)(this, p0, p1, p2);
    }

    decltype(std::declval<CCTextInputNode>().onTextFieldAttachWithIME(std::declval<cocos2d::CCTextFieldTTF*>())) CCTextInputNode::onTextFieldAttachWithIME(cocos2d::CCTextFieldTTF* p0) {
        using r1221 = decltype(std::declval<CCTextInputNode>().onTextFieldAttachWithIME(std::declval<cocos2d::CCTextFieldTTF*>()));
        using f1221 = r1221(*)(CCTextInputNode*, cocos2d::CCTextFieldTTF*);
        return reinterpret_cast<f1221>(base+0x5e2c0)(this, p0);
    }

    decltype(std::declval<CCTextInputNode>().onTextFieldDetachWithIME(std::declval<cocos2d::CCTextFieldTTF*>())) CCTextInputNode::onTextFieldDetachWithIME(cocos2d::CCTextFieldTTF* p0) {
        using r1222 = decltype(std::declval<CCTextInputNode>().onTextFieldDetachWithIME(std::declval<cocos2d::CCTextFieldTTF*>()));
        using f1222 = r1222(*)(CCTextInputNode*, cocos2d::CCTextFieldTTF*);
        return reinterpret_cast<f1222>(base+0x5e610)(this, p0);
    }

    TextArea::~TextArea() {
        jumpDestructor(0x19faa0)
    }

    decltype(std::declval<TextArea>().draw()) TextArea::draw() {
        using r1224 = decltype(std::declval<TextArea>().draw());
        using f1224 = r1224(*)(TextArea*);
        return reinterpret_cast<f1224>(base+0x19f890)(this);
    }

    decltype(std::declval<TextArea>().setOpacity(std::declval<unsigned char>())) TextArea::setOpacity(unsigned char p0) {
        using r1225 = decltype(std::declval<TextArea>().setOpacity(std::declval<unsigned char>()));
        using f1225 = r1225(*)(TextArea*, unsigned char);
        return reinterpret_cast<f1225>(base+0x19f760)(this, p0);
    }

    decltype(std::declval<TextArea>().create(std::declval<gd::string>(), std::declval<char const*>(), std::declval<float>(), std::declval<float>(), std::declval<cocos2d::CCPoint>(), std::declval<float>(), std::declval<bool>())) TextArea::create(gd::string p0, char const* p1, float p2, float p3, cocos2d::CCPoint p4, float p5, bool p6) {
        using r1226 = decltype(std::declval<TextArea>().create(std::declval<gd::string>(), std::declval<char const*>(), std::declval<float>(), std::declval<float>(), std::declval<cocos2d::CCPoint>(), std::declval<float>(), std::declval<bool>()));
        using f1226 = r1226(*)(gd::string, char const*, float, float, cocos2d::CCPoint, float, bool);
        return reinterpret_cast<f1226>(base+0x19eb40)(p0, p1, p2, p3, p4, p5, p6);

    }

    decltype(std::declval<Slider>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::SEL_MenuHandler>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<float>())) Slider::create(cocos2d::CCNode* p0, cocos2d::SEL_MenuHandler p1, char const* p2, char const* p3, char const* p4, char const* p5, float p6) {
        using r1227 = decltype(std::declval<Slider>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::SEL_MenuHandler>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<char const*>(), std::declval<float>()));
        using f1227 = r1227(*)(cocos2d::CCNode*, cocos2d::SEL_MenuHandler, char const*, char const*, char const*, char const*, float);
        return reinterpret_cast<f1227>(base+0x18dd80)(p0, p1, p2, p3, p4, p5, p6);

    }

    decltype(std::declval<Slider>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::SEL_MenuHandler>(), std::declval<float>())) Slider::create(cocos2d::CCNode* p0, cocos2d::SEL_MenuHandler p1, float p2) {
        using r1228 = decltype(std::declval<Slider>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::SEL_MenuHandler>(), std::declval<float>()));
        using f1228 = r1228(*)(cocos2d::CCNode*, cocos2d::SEL_MenuHandler, float);
        return reinterpret_cast<f1228>(base+0x18dc40)(p0, p1, p2);

    }

    decltype(std::declval<Slider>().getValue()) Slider::getValue() {
        using r1229 = decltype(std::declval<Slider>().getValue());
        using f1229 = r1229(*)(Slider*);
        return reinterpret_cast<f1229>(base+0x18e0c0)(this);
    }

    decltype(std::declval<Slider>().setBarVisibility(std::declval<bool>())) Slider::setBarVisibility(bool p0) {
        using r1230 = decltype(std::declval<Slider>().setBarVisibility(std::declval<bool>()));
        using f1230 = r1230(*)(Slider*, bool);
        return reinterpret_cast<f1230>(base+0x18e280)(this, p0);
    }

    decltype(std::declval<Slider>().setValue(std::declval<float>())) Slider::setValue(float p0) {
        using r1231 = decltype(std::declval<Slider>().setValue(std::declval<float>()));
        using f1231 = r1231(*)(Slider*, float);
        return reinterpret_cast<f1231>(base+0x18e170)(this, p0);
    }

    decltype(std::declval<SliderThumb>().getValue()) SliderThumb::getValue() {
        using r1232 = decltype(std::declval<SliderThumb>().getValue());
        using f1232 = r1232(*)(SliderThumb*);
        return reinterpret_cast<f1232>(base+0x18ce80)(this);
    }

    BoomScrollLayer::BoomScrollLayer() {
        using r1233 = BoomScrollLayer*;
        using f1233 = r1233(*)(BoomScrollLayer*);
        reinterpret_cast<f1233>(base+0x1e42f0)(this);
    }

    decltype(std::declval<TableView>().create(std::declval<TableViewDelegate*>(), std::declval<TableViewDataSource*>(), std::declval<cocos2d::CCRect>())) TableView::create(TableViewDelegate* p0, TableViewDataSource* p1, cocos2d::CCRect p2) {
        using r1234 = decltype(std::declval<TableView>().create(std::declval<TableViewDelegate*>(), std::declval<TableViewDataSource*>(), std::declval<cocos2d::CCRect>()));
        using f1234 = r1234(*)(TableViewDelegate*, TableViewDataSource*, cocos2d::CCRect);
        return reinterpret_cast<f1234>(base+0x37eb30)(p0, p1, p2);

    }

    decltype(std::declval<TableView>().reloadData()) TableView::reloadData() {
        using r1235 = decltype(std::declval<TableView>().reloadData());
        using f1235 = r1235(*)(TableView*);
        return reinterpret_cast<f1235>(base+0x37f970)(this);
    }

    decltype(std::declval<BoomListView>().create(std::declval<cocos2d::CCArray*>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<BoomListType>())) BoomListView::create(cocos2d::CCArray* p0, float p1, float p2, int p3, BoomListType p4) {
        using r1236 = decltype(std::declval<BoomListView>().create(std::declval<cocos2d::CCArray*>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<BoomListType>()));
        using f1236 = r1236(*)(cocos2d::CCArray*, float, float, int, BoomListType);
        return reinterpret_cast<f1236>(base+0x18ecb0)(p0, p1, p2, p3, p4);

    }

    decltype(std::declval<BoomListView>().init(std::declval<cocos2d::CCArray*>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<BoomListType>())) BoomListView::init(cocos2d::CCArray* p0, float p1, float p2, int p3, BoomListType p4) {
        using r1237 = decltype(std::declval<BoomListView>().init(std::declval<cocos2d::CCArray*>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<BoomListType>()));
        using f1237 = r1237(*)(BoomListView*, cocos2d::CCArray*, float, float, int, BoomListType);
        return reinterpret_cast<f1237>(base+0x18ee00)(this, p0, p1, p2, p3, p4);
    }

    decltype(std::declval<BoomListView>().draw()) BoomListView::draw() {
        using r1238 = decltype(std::declval<BoomListView>().draw());
        using f1238 = r1238(*)(BoomListView*);
        return reinterpret_cast<f1238>(base+0x18f790)(this);
    }

    decltype(std::declval<BoomListView>().setupList()) BoomListView::setupList() {
        using r1239 = decltype(std::declval<BoomListView>().setupList());
        using f1239 = r1239(*)(BoomListView*);
        return reinterpret_cast<f1239>(base+0x18ef90)(this);
    }

    decltype(std::declval<BoomListView>().TableViewWillDisplayCellForRowAtIndexPath(std::declval<CCIndexPath&>(), std::declval<TableViewCell*>(), std::declval<TableView*>())) BoomListView::TableViewWillDisplayCellForRowAtIndexPath(CCIndexPath& p0, TableViewCell* p1, TableView* p2) {
        using r1240 = decltype(std::declval<BoomListView>().TableViewWillDisplayCellForRowAtIndexPath(std::declval<CCIndexPath&>(), std::declval<TableViewCell*>(), std::declval<TableView*>()));
        using f1240 = r1240(*)(BoomListView*, CCIndexPath&, TableViewCell*, TableView*);
        return reinterpret_cast<f1240>(base+0x18f030)(this, p0, p1, p2);
    }

    decltype(std::declval<BoomListView>().cellHeightForRowAtIndexPath(std::declval<CCIndexPath&>(), std::declval<TableView*>())) BoomListView::cellHeightForRowAtIndexPath(CCIndexPath& p0, TableView* p1) {
        using r1241 = decltype(std::declval<BoomListView>().cellHeightForRowAtIndexPath(std::declval<CCIndexPath&>(), std::declval<TableView*>()));
        using f1241 = r1241(*)(BoomListView*, CCIndexPath&, TableView*);
        return reinterpret_cast<f1241>(base+0x18f070)(this, p0, p1);
    }

    decltype(std::declval<BoomListView>().didSelectRowAtIndexPath(std::declval<CCIndexPath&>(), std::declval<TableView*>())) BoomListView::didSelectRowAtIndexPath(CCIndexPath& p0, TableView* p1) {
        using r1242 = decltype(std::declval<BoomListView>().didSelectRowAtIndexPath(std::declval<CCIndexPath&>(), std::declval<TableView*>()));
        using f1242 = r1242(*)(BoomListView*, CCIndexPath&, TableView*);
        return reinterpret_cast<f1242>(base+0x18f090)(this, p0, p1);
    }

    decltype(std::declval<BoomListView>().numberOfRowsInSection(std::declval<unsigned int>(), std::declval<TableView*>())) BoomListView::numberOfRowsInSection(unsigned int p0, TableView* p1) {
        using r1243 = decltype(std::declval<BoomListView>().numberOfRowsInSection(std::declval<unsigned int>(), std::declval<TableView*>()));
        using f1243 = r1243(*)(BoomListView*, unsigned int, TableView*);
        return reinterpret_cast<f1243>(base+0x18f0b0)(this, p0, p1);
    }

    decltype(std::declval<BoomListView>().numberOfSectionsInTableView(std::declval<TableView*>())) BoomListView::numberOfSectionsInTableView(TableView* p0) {
        using r1244 = decltype(std::declval<BoomListView>().numberOfSectionsInTableView(std::declval<TableView*>()));
        using f1244 = r1244(*)(BoomListView*, TableView*);
        return reinterpret_cast<f1244>(base+0x18f0e0)(this, p0);
    }

    decltype(std::declval<BoomListView>().cellForRowAtIndexPath(std::declval<CCIndexPath&>(), std::declval<TableView*>())) BoomListView::cellForRowAtIndexPath(CCIndexPath& p0, TableView* p1) {
        using r1245 = decltype(std::declval<BoomListView>().cellForRowAtIndexPath(std::declval<CCIndexPath&>(), std::declval<TableView*>()));
        using f1245 = r1245(*)(BoomListView*, CCIndexPath&, TableView*);
        return reinterpret_cast<f1245>(base+0x18f100)(this, p0, p1);
    }

    decltype(std::declval<BoomListView>().TableViewCommitCellEditingStyleForRowAtIndexPath(std::declval<TableView*>(), std::declval<TableViewCellEditingStyle>(), std::declval<CCIndexPath&>())) BoomListView::TableViewCommitCellEditingStyleForRowAtIndexPath(TableView* p0, TableViewCellEditingStyle p1, CCIndexPath& p2) {
        using r1246 = decltype(std::declval<BoomListView>().TableViewCommitCellEditingStyleForRowAtIndexPath(std::declval<TableView*>(), std::declval<TableViewCellEditingStyle>(), std::declval<CCIndexPath&>()));
        using f1246 = r1246(*)(BoomListView*, TableView*, TableViewCellEditingStyle, CCIndexPath&);
        return reinterpret_cast<f1246>(base+0x18f770)(this, p0, p1, p2);
    }

    decltype(std::declval<BoomListView>().TableViewWillReloadCellForRowAtIndexPath(std::declval<CCIndexPath&>(), std::declval<TableViewCell*>(), std::declval<TableView*>())) BoomListView::TableViewWillReloadCellForRowAtIndexPath(CCIndexPath& p0, TableViewCell* p1, TableView* p2) {
        using r1247 = decltype(std::declval<BoomListView>().TableViewWillReloadCellForRowAtIndexPath(std::declval<CCIndexPath&>(), std::declval<TableViewCell*>(), std::declval<TableView*>()));
        using f1247 = r1247(*)(BoomListView*, CCIndexPath&, TableViewCell*, TableView*);
        return reinterpret_cast<f1247>(base+0x18f050)(this, p0, p1, p2);
    }

    decltype(std::declval<BoomListView>().getListCell(std::declval<char const*>())) BoomListView::getListCell(char const* p0) {
        using r1248 = decltype(std::declval<BoomListView>().getListCell(std::declval<char const*>()));
        using f1248 = r1248(*)(BoomListView*, char const*);
        return reinterpret_cast<f1248>(base+0x18f200)(this, p0);
    }

    decltype(std::declval<BoomListView>().loadCell(std::declval<TableViewCell*>(), std::declval<int>())) BoomListView::loadCell(TableViewCell* p0, int p1) {
        using r1249 = decltype(std::declval<BoomListView>().loadCell(std::declval<TableViewCell*>(), std::declval<int>()));
        using f1249 = r1249(*)(BoomListView*, TableViewCell*, int);
        return reinterpret_cast<f1249>(base+0x18f4a0)(this, p0, p1);
    }

    decltype(std::declval<CreateMenuItem>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCObject*>(), std::declval<cocos2d::SEL_MenuHandler>())) CreateMenuItem::create(cocos2d::CCNode* p0, cocos2d::CCNode* p1, cocos2d::CCObject* p2, cocos2d::SEL_MenuHandler p3) {
        using r1250 = decltype(std::declval<CreateMenuItem>().create(std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCNode*>(), std::declval<cocos2d::CCObject*>(), std::declval<cocos2d::SEL_MenuHandler>()));
        using f1250 = r1250(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
        return reinterpret_cast<f1250>(base+0x1c580)(p0, p1, p2, p3);

    }

    decltype(std::declval<CustomListView>().create(std::declval<cocos2d::CCArray*>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<BoomListType>())) CustomListView::create(cocos2d::CCArray* p0, float p1, float p2, int p3, BoomListType p4) {
        using r1251 = decltype(std::declval<CustomListView>().create(std::declval<cocos2d::CCArray*>(), std::declval<float>(), std::declval<float>(), std::declval<int>(), std::declval<BoomListType>()));
        using f1251 = r1251(*)(cocos2d::CCArray*, float, float, int, BoomListType);
        return reinterpret_cast<f1251>(base+0x10d410)(p0, p1, p2, p3, p4);

    }

    decltype(std::declval<CustomListView>().getListCell(std::declval<char const*>())) CustomListView::getListCell(char const* p0) {
        using r1252 = decltype(std::declval<CustomListView>().getListCell(std::declval<char const*>()));
        using f1252 = r1252(*)(CustomListView*, char const*);
        return reinterpret_cast<f1252>(base+0x10d560)(this, p0);
    }

    decltype(std::declval<CustomListView>().loadCell(std::declval<TableViewCell*>(), std::declval<int>())) CustomListView::loadCell(TableViewCell* p0, int p1) {
        using r1253 = decltype(std::declval<CustomListView>().loadCell(std::declval<TableViewCell*>(), std::declval<int>()));
        using f1253 = r1253(*)(CustomListView*, TableViewCell*, int);
        return reinterpret_cast<f1253>(base+0x10e610)(this, p0, p1);
    }

    decltype(std::declval<CustomListView>().setupList()) CustomListView::setupList() {
        using r1254 = decltype(std::declval<CustomListView>().setupList());
        using f1254 = r1254(*)(CustomListView*);
        return reinterpret_cast<f1254>(base+0x116e70)(this);
    }

    HardStreak::~HardStreak() {
        jumpDestructor(0x5bf00)
    }

    decltype(std::declval<HardStreak>().init()) HardStreak::init() {
        using r1256 = decltype(std::declval<HardStreak>().init());
        using f1256 = r1256(*)(HardStreak*);
        return reinterpret_cast<f1256>(base+0x5c090)(this);
    }

    decltype(std::declval<HardStreak>().addPoint(std::declval<cocos2d::CCPoint>())) HardStreak::addPoint(cocos2d::CCPoint p0) {
        using r1257 = decltype(std::declval<HardStreak>().addPoint(std::declval<cocos2d::CCPoint>()));
        using f1257 = r1257(*)(HardStreak*, cocos2d::CCPoint);
        return reinterpret_cast<f1257>(base+0x5c950)(this, p0);
    }

    decltype(std::declval<HardStreak>().reset()) HardStreak::reset() {
        using r1258 = decltype(std::declval<HardStreak>().reset());
        using f1258 = r1258(*)(HardStreak*);
        return reinterpret_cast<f1258>(base+0x5c930)(this);
    }

    decltype(std::declval<HardStreak>().resumeStroke()) HardStreak::resumeStroke() {
        using r1259 = decltype(std::declval<HardStreak>().resumeStroke());
        using f1259 = r1259(*)(HardStreak*);
        return reinterpret_cast<f1259>(base+0x5c210)(this);
    }

    decltype(std::declval<HardStreak>().stopStroke()) HardStreak::stopStroke() {
        using r1260 = decltype(std::declval<HardStreak>().stopStroke());
        using f1260 = r1260(*)(HardStreak*);
        return reinterpret_cast<f1260>(base+0x5c8f0)(this);
    }

    GameObject::~GameObject() {
        jumpDestructor(0x2f4ca0)
    }

    decltype(std::declval<GameObject>().update(std::declval<float>())) GameObject::update(float p0) {
        using r1262 = decltype(std::declval<GameObject>().update(std::declval<float>()));
        using f1262 = r1262(*)(GameObject*, float);
        return reinterpret_cast<f1262>(base+0x2fbb90)(this, p0);
    }

    decltype(std::declval<GameObject>().setScaleX(std::declval<float>())) GameObject::setScaleX(float p0) {
        using r1263 = decltype(std::declval<GameObject>().setScaleX(std::declval<float>()));
        using f1263 = r1263(*)(GameObject*, float);
        return reinterpret_cast<f1263>(base+0x335b00)(this, p0);
    }

    decltype(std::declval<GameObject>().setScaleY(std::declval<float>())) GameObject::setScaleY(float p0) {
        using r1264 = decltype(std::declval<GameObject>().setScaleY(std::declval<float>()));
        using f1264 = r1264(*)(GameObject*, float);
        return reinterpret_cast<f1264>(base+0x335b90)(this, p0);
    }

    decltype(std::declval<GameObject>().setScale(std::declval<float>())) GameObject::setScale(float p0) {
        using r1265 = decltype(std::declval<GameObject>().setScale(std::declval<float>()));
        using f1265 = r1265(*)(GameObject*, float);
        return reinterpret_cast<f1265>(base+0x335c20)(this, p0);
    }

    decltype(std::declval<GameObject>().setPosition(std::declval<cocos2d::CCPoint const&>())) GameObject::setPosition(cocos2d::CCPoint const& p0) {
        using r1266 = decltype(std::declval<GameObject>().setPosition(std::declval<cocos2d::CCPoint const&>()));
        using f1266 = r1266(*)(GameObject*, cocos2d::CCPoint const&);
        return reinterpret_cast<f1266>(base+0x335850)(this, p0);
    }

    decltype(std::declval<GameObject>().setVisible(std::declval<bool>())) GameObject::setVisible(bool p0) {
        using r1267 = decltype(std::declval<GameObject>().setVisible(std::declval<bool>()));
        using f1267 = r1267(*)(GameObject*, bool);
        return reinterpret_cast<f1267>(base+0x336280)(this, p0);
    }

    decltype(std::declval<GameObject>().setRotation(std::declval<float>())) GameObject::setRotation(float p0) {
        using r1268 = decltype(std::declval<GameObject>().setRotation(std::declval<float>()));
        using f1268 = r1268(*)(GameObject*, float);
        return reinterpret_cast<f1268>(base+0x335970)(this, p0);
    }

    decltype(std::declval<GameObject>().setOpacity(std::declval<unsigned char>())) GameObject::setOpacity(unsigned char p0) {
        using r1269 = decltype(std::declval<GameObject>().setOpacity(std::declval<unsigned char>()));
        using f1269 = r1269(*)(GameObject*, unsigned char);
        return reinterpret_cast<f1269>(base+0x335f10)(this, p0);
    }

    decltype(std::declval<GameObject>().initWithTexture(std::declval<cocos2d::CCTexture2D*>())) GameObject::initWithTexture(cocos2d::CCTexture2D* p0) {
        using r1270 = decltype(std::declval<GameObject>().initWithTexture(std::declval<cocos2d::CCTexture2D*>()));
        using f1270 = r1270(*)(GameObject*, cocos2d::CCTexture2D*);
        return reinterpret_cast<f1270>(base+0x2f56a0)(this, p0);
    }

    decltype(std::declval<GameObject>().setChildColor(std::declval<cocos2d::_ccColor3B const&>())) GameObject::setChildColor(cocos2d::_ccColor3B const& p0) {
        using r1271 = decltype(std::declval<GameObject>().setChildColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f1271 = r1271(*)(GameObject*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f1271>(base+0x341f20)(this, p0);
    }

    decltype(std::declval<GameObject>().setFlipX(std::declval<bool>())) GameObject::setFlipX(bool p0) {
        using r1272 = decltype(std::declval<GameObject>().setFlipX(std::declval<bool>()));
        using f1272 = r1272(*)(GameObject*, bool);
        return reinterpret_cast<f1272>(base+0x335a60)(this, p0);
    }

    decltype(std::declval<GameObject>().setFlipY(std::declval<bool>())) GameObject::setFlipY(bool p0) {
        using r1273 = decltype(std::declval<GameObject>().setFlipY(std::declval<bool>()));
        using f1273 = r1273(*)(GameObject*, bool);
        return reinterpret_cast<f1273>(base+0x335ab0)(this, p0);
    }

    decltype(std::declval<GameObject>().customSetup()) GameObject::customSetup() {
        using r1274 = decltype(std::declval<GameObject>().customSetup());
        using f1274 = r1274(*)(GameObject*);
        return reinterpret_cast<f1274>(base+0x2fbba0)(this);
    }

    decltype(std::declval<GameObject>().setupCustomSprites()) GameObject::setupCustomSprites() {
        using r1275 = decltype(std::declval<GameObject>().setupCustomSprites());
        using f1275 = r1275(*)(GameObject*);
        return reinterpret_cast<f1275>(base+0x307f60)(this);
    }

    decltype(std::declval<GameObject>().addMainSpriteToParent(std::declval<bool>())) GameObject::addMainSpriteToParent(bool p0) {
        using r1276 = decltype(std::declval<GameObject>().addMainSpriteToParent(std::declval<bool>()));
        using f1276 = r1276(*)(GameObject*, bool);
        return reinterpret_cast<f1276>(base+0x33a5b0)(this, p0);
    }

    decltype(std::declval<GameObject>().resetObject()) GameObject::resetObject() {
        using r1277 = decltype(std::declval<GameObject>().resetObject());
        using f1277 = r1277(*)(GameObject*);
        return reinterpret_cast<f1277>(base+0x2fa620)(this);
    }

    decltype(std::declval<GameObject>().triggerObject(std::declval<GJBaseGameLayer*>())) GameObject::triggerObject(GJBaseGameLayer* p0) {
        using r1278 = decltype(std::declval<GameObject>().triggerObject(std::declval<GJBaseGameLayer*>()));
        using f1278 = r1278(*)(GameObject*, GJBaseGameLayer*);
        return reinterpret_cast<f1278>(base+0x2fa8f0)(this, p0);
    }

    decltype(std::declval<GameObject>().activateObject()) GameObject::activateObject() {
        using r1279 = decltype(std::declval<GameObject>().activateObject());
        using f1279 = r1279(*)(GameObject*);
        return reinterpret_cast<f1279>(base+0x2faf60)(this);
    }

    decltype(std::declval<GameObject>().deactivateObject(std::declval<bool>())) GameObject::deactivateObject(bool p0) {
        using r1280 = decltype(std::declval<GameObject>().deactivateObject(std::declval<bool>()));
        using f1280 = r1280(*)(GameObject*, bool);
        return reinterpret_cast<f1280>(base+0x2fb8f0)(this, p0);
    }

    decltype(std::declval<GameObject>().getObjectRect()) GameObject::getObjectRect() {
        using r1281 = decltype(std::declval<GameObject>().getObjectRect());
        using f1281 = r1281(*)(GameObject*);
        return reinterpret_cast<f1281>(base+0x3352b0)(this);
    }

    decltype(std::declval<GameObject>().getObjectRect(std::declval<float>(), std::declval<float>())) GameObject::getObjectRect(float p0, float p1) {
        using r1282 = decltype(std::declval<GameObject>().getObjectRect(std::declval<float>(), std::declval<float>()));
        using f1282 = r1282(*)(GameObject*, float, float);
        return reinterpret_cast<f1282>(base+0x3352d0)(this, p0, p1);
    }

    decltype(std::declval<GameObject>().getObjectRect2(std::declval<float>(), std::declval<float>())) GameObject::getObjectRect2(float p0, float p1) {
        using r1283 = decltype(std::declval<GameObject>().getObjectRect2(std::declval<float>(), std::declval<float>()));
        using f1283 = r1283(*)(GameObject*, float, float);
        return reinterpret_cast<f1283>(base+0x3354e0)(this, p0, p1);
    }

    decltype(std::declval<GameObject>().getObjectTextureRect()) GameObject::getObjectTextureRect() {
        using r1284 = decltype(std::declval<GameObject>().getObjectTextureRect());
        using f1284 = r1284(*)(GameObject*);
        return reinterpret_cast<f1284>(base+0x3355b0)(this);
    }

    decltype(std::declval<GameObject>().getRealPosition()) GameObject::getRealPosition() {
        using r1285 = decltype(std::declval<GameObject>().getRealPosition());
        using f1285 = r1285(*)(GameObject*);
        return reinterpret_cast<f1285>(base+0x335750)(this);
    }

    decltype(std::declval<GameObject>().setStartPos(std::declval<cocos2d::CCPoint>())) GameObject::setStartPos(cocos2d::CCPoint p0) {
        using r1286 = decltype(std::declval<GameObject>().setStartPos(std::declval<cocos2d::CCPoint>()));
        using f1286 = r1286(*)(GameObject*, cocos2d::CCPoint);
        return reinterpret_cast<f1286>(base+0x2fa520)(this, p0);
    }

    decltype(std::declval<GameObject>().updateStartValues()) GameObject::updateStartValues() {
        using r1287 = decltype(std::declval<GameObject>().updateStartValues());
        using f1287 = r1287(*)(GameObject*);
        return reinterpret_cast<f1287>(base+0x2fa800)(this);
    }

    decltype(std::declval<GameObject>().getSaveString()) GameObject::getSaveString() {
        using r1288 = decltype(std::declval<GameObject>().getSaveString());
        using f1288 = r1288(*)(GameObject*);
        return reinterpret_cast<f1288>(base+0x33d3d0)(this);
    }

    decltype(std::declval<GameObject>().isFlipX()) GameObject::isFlipX() {
        using r1289 = decltype(std::declval<GameObject>().isFlipX());
        using f1289 = r1289(*)(GameObject*);
        return reinterpret_cast<f1289>(base+0x335a40)(this);
    }

    decltype(std::declval<GameObject>().isFlipY()) GameObject::isFlipY() {
        using r1290 = decltype(std::declval<GameObject>().isFlipY());
        using f1290 = r1290(*)(GameObject*);
        return reinterpret_cast<f1290>(base+0x335a50)(this);
    }

    decltype(std::declval<GameObject>().setRScaleX(std::declval<float>())) GameObject::setRScaleX(float p0) {
        using r1291 = decltype(std::declval<GameObject>().setRScaleX(std::declval<float>()));
        using f1291 = r1291(*)(GameObject*, float);
        return reinterpret_cast<f1291>(base+0x335cb0)(this, p0);
    }

    decltype(std::declval<GameObject>().setRScaleY(std::declval<float>())) GameObject::setRScaleY(float p0) {
        using r1292 = decltype(std::declval<GameObject>().setRScaleY(std::declval<float>()));
        using f1292 = r1292(*)(GameObject*, float);
        return reinterpret_cast<f1292>(base+0x335d60)(this, p0);
    }

    decltype(std::declval<GameObject>().setRScale(std::declval<float>())) GameObject::setRScale(float p0) {
        using r1293 = decltype(std::declval<GameObject>().setRScale(std::declval<float>()));
        using f1293 = r1293(*)(GameObject*, float);
        return reinterpret_cast<f1293>(base+0x335e10)(this, p0);
    }

    decltype(std::declval<GameObject>().getRScaleX()) GameObject::getRScaleX() {
        using r1294 = decltype(std::declval<GameObject>().getRScaleX());
        using f1294 = r1294(*)(GameObject*);
        return reinterpret_cast<f1294>(base+0x335e50)(this);
    }

    decltype(std::declval<GameObject>().getRScaleY()) GameObject::getRScaleY() {
        using r1295 = decltype(std::declval<GameObject>().getRScaleY());
        using f1295 = r1295(*)(GameObject*);
        return reinterpret_cast<f1295>(base+0x335e80)(this);
    }

    decltype(std::declval<GameObject>().calculateSpawnXPos()) GameObject::calculateSpawnXPos() {
        using r1296 = decltype(std::declval<GameObject>().calculateSpawnXPos());
        using f1296 = r1296(*)(GameObject*);
        return reinterpret_cast<f1296>(base+0x336970)(this);
    }

    decltype(std::declval<GameObject>().triggerActivated(std::declval<float>())) GameObject::triggerActivated(float p0) {
        using r1297 = decltype(std::declval<GameObject>().triggerActivated(std::declval<float>()));
        using f1297 = r1297(*)(GameObject*, float);
        return reinterpret_cast<f1297>(base+0x336990)(this, p0);
    }

    decltype(std::declval<GameObject>().powerOnObject()) GameObject::powerOnObject() {
        using r1298 = decltype(std::declval<GameObject>().powerOnObject());
        using f1298 = r1298(*)(GameObject*);
        return reinterpret_cast<f1298>(base+0x3369a0)(this);
    }

    decltype(std::declval<GameObject>().powerOffObject()) GameObject::powerOffObject() {
        using r1299 = decltype(std::declval<GameObject>().powerOffObject());
        using f1299 = r1299(*)(GameObject*);
        return reinterpret_cast<f1299>(base+0x3369c0)(this);
    }

    decltype(std::declval<GameObject>().setObjectColor(std::declval<cocos2d::_ccColor3B const&>())) GameObject::setObjectColor(cocos2d::_ccColor3B const& p0) {
        using r1300 = decltype(std::declval<GameObject>().setObjectColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f1300 = r1300(*)(GameObject*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f1300>(base+0x341c90)(this, p0);
    }

    decltype(std::declval<GameObject>().setGlowColor(std::declval<cocos2d::_ccColor3B const&>())) GameObject::setGlowColor(cocos2d::_ccColor3B const& p0) {
        using r1301 = decltype(std::declval<GameObject>().setGlowColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f1301 = r1301(*)(GameObject*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f1301>(base+0x341ed0)(this, p0);
    }

    decltype(std::declval<GameObject>().getOrientedBox()) GameObject::getOrientedBox() {
        using r1302 = decltype(std::declval<GameObject>().getOrientedBox());
        using f1302 = r1302(*)(GameObject*);
        return reinterpret_cast<f1302>(base+0x342ad0)(this);
    }

    decltype(std::declval<GameObject>().addToGroup(std::declval<int>())) GameObject::addToGroup(int p0) {
        using r1303 = decltype(std::declval<GameObject>().addToGroup(std::declval<int>()));
        using f1303 = r1303(*)(GameObject*, int);
        return reinterpret_cast<f1303>(base+0x33ad00)(this, p0);
    }

    decltype(std::declval<GameObject>().removeFromGroup(std::declval<int>())) GameObject::removeFromGroup(int p0) {
        using r1304 = decltype(std::declval<GameObject>().removeFromGroup(std::declval<int>()));
        using f1304 = r1304(*)(GameObject*, int);
        return reinterpret_cast<f1304>(base+0x33ada0)(this, p0);
    }

    decltype(std::declval<GameObject>().spawnXPosition()) GameObject::spawnXPosition() {
        using r1305 = decltype(std::declval<GameObject>().spawnXPosition());
        using f1305 = r1305(*)(GameObject*);
        return reinterpret_cast<f1305>(base+0xdc1b0)(this);
    }

    decltype(std::declval<GameObject>().getObjectRectDirty()) GameObject::getObjectRectDirty() const {
        using r1306 = decltype(std::declval<GameObject>().getObjectRectDirty());
        using f1306 = r1306(*)(const GameObject*);
        return reinterpret_cast<f1306>(base+0xdc1d0)(this);
    }

    decltype(std::declval<GameObject>().setObjectRectDirty(std::declval<bool>())) GameObject::setObjectRectDirty(bool p0) {
        using r1307 = decltype(std::declval<GameObject>().setObjectRectDirty(std::declval<bool>()));
        using f1307 = r1307(*)(GameObject*, bool);
        return reinterpret_cast<f1307>(base+0xdc1e0)(this, p0);
    }

    decltype(std::declval<GameObject>().getOrientedRectDirty()) GameObject::getOrientedRectDirty() const {
        using r1308 = decltype(std::declval<GameObject>().getOrientedRectDirty());
        using f1308 = r1308(*)(const GameObject*);
        return reinterpret_cast<f1308>(base+0xdc1f0)(this);
    }

    decltype(std::declval<GameObject>().setOrientedRectDirty(std::declval<bool>())) GameObject::setOrientedRectDirty(bool p0) {
        using r1309 = decltype(std::declval<GameObject>().setOrientedRectDirty(std::declval<bool>()));
        using f1309 = r1309(*)(GameObject*, bool);
        return reinterpret_cast<f1309>(base+0xdc200)(this, p0);
    }

    decltype(std::declval<GameObject>().getType()) GameObject::getType() const {
        using r1310 = decltype(std::declval<GameObject>().getType());
        using f1310 = r1310(*)(const GameObject*);
        return reinterpret_cast<f1310>(base+0xdc210)(this);
    }

    decltype(std::declval<GameObject>().setType(std::declval<GameObjectType>())) GameObject::setType(GameObjectType p0) {
        using r1311 = decltype(std::declval<GameObject>().setType(std::declval<GameObjectType>()));
        using f1311 = r1311(*)(GameObject*, GameObjectType);
        return reinterpret_cast<f1311>(base+0xdc220)(this, p0);
    }

    decltype(std::declval<GameObject>().getStartPos()) GameObject::getStartPos() const {
        using r1312 = decltype(std::declval<GameObject>().getStartPos());
        using f1312 = r1312(*)(const GameObject*);
        return reinterpret_cast<f1312>(base+0xdc230)(this);
    }

    decltype(std::declval<GameObject>().activatedByPlayer(std::declval<GameObject*>())) GameObject::activatedByPlayer(GameObject* p0) {
        using r1313 = decltype(std::declval<GameObject>().activatedByPlayer(std::declval<GameObject*>()));
        using f1313 = r1313(*)(GameObject*, GameObject*);
        return reinterpret_cast<f1313>(base+0x342a20)(this, p0);
    }

    decltype(std::declval<GameObject>().addColorSprite()) GameObject::addColorSprite() {
        using r1314 = decltype(std::declval<GameObject>().addColorSprite());
        using f1314 = r1314(*)(GameObject*);
        return reinterpret_cast<f1314>(base+0x2f7fe0)(this);
    }

    decltype(std::declval<GameObject>().addColorSpriteToParent(std::declval<bool>())) GameObject::addColorSpriteToParent(bool p0) {
        using r1315 = decltype(std::declval<GameObject>().addColorSpriteToParent(std::declval<bool>()));
        using f1315 = r1315(*)(GameObject*, bool);
        return reinterpret_cast<f1315>(base+0x2fb470)(this, p0);
    }

    decltype(std::declval<GameObject>().addToTempOffset(std::declval<float>(), std::declval<float>())) GameObject::addToTempOffset(float p0, float p1) {
        using r1316 = decltype(std::declval<GameObject>().addToTempOffset(std::declval<float>(), std::declval<float>()));
        using f1316 = r1316(*)(GameObject*, float, float);
        return reinterpret_cast<f1316>(base+0x335700)(this, p0, p1);
    }

    decltype(std::declval<GameObject>().calculateOrientedBox()) GameObject::calculateOrientedBox() {
        using r1317 = decltype(std::declval<GameObject>().calculateOrientedBox());
        using f1317 = r1317(*)(GameObject*);
        return reinterpret_cast<f1317>(base+0x342b20)(this);
    }

    decltype(std::declval<GameObject>().canChangeCustomColor()) GameObject::canChangeCustomColor() {
        using r1318 = decltype(std::declval<GameObject>().canChangeCustomColor());
        using f1318 = r1318(*)(GameObject*);
        return reinterpret_cast<f1318>(base+0x342db0)(this);
    }

    decltype(std::declval<GameObject>().colorForMode(std::declval<int>(), std::declval<bool>())) GameObject::colorForMode(int p0, bool p1) {
        using r1319 = decltype(std::declval<GameObject>().colorForMode(std::declval<int>(), std::declval<bool>()));
        using f1319 = r1319(*)(GameObject*, int, bool);
        return reinterpret_cast<f1319>(base+0x343460)(this, p0, p1);
    }

    decltype(std::declval<GameObject>().commonSetup()) GameObject::commonSetup() {
        using r1320 = decltype(std::declval<GameObject>().commonSetup());
        using f1320 = r1320(*)(GameObject*);
        return reinterpret_cast<f1320>(base+0x2f5570)(this);
    }

    decltype(std::declval<GameObject>().copyGroups(std::declval<GameObject*>())) GameObject::copyGroups(GameObject* p0) {
        using r1321 = decltype(std::declval<GameObject>().copyGroups(std::declval<GameObject*>()));
        using f1321 = r1321(*)(GameObject*, GameObject*);
        return reinterpret_cast<f1321>(base+0x33ae30)(this, p0);
    }

    decltype(std::declval<GameObject>().createWithFrame(std::declval<char const*>())) GameObject::createWithFrame(char const* p0) {
        using r1322 = decltype(std::declval<GameObject>().createWithFrame(std::declval<char const*>()));
        using f1322 = r1322(*)(char const*);
        return reinterpret_cast<f1322>(base+0x2f5490)(p0);

    }

    decltype(std::declval<GameObject>().createWithKey(std::declval<int>())) GameObject::createWithKey(int p0) {
        using r1323 = decltype(std::declval<GameObject>().createWithKey(std::declval<int>()));
        using f1323 = r1323(*)(int);
        return reinterpret_cast<f1323>(base+0x2f4ce0)(p0);

    }

    decltype(std::declval<GameObject>().destroyObject()) GameObject::destroyObject() {
        using r1324 = decltype(std::declval<GameObject>().destroyObject());
        using f1324 = r1324(*)(GameObject*);
        return reinterpret_cast<f1324>(base+0x336a00)(this);
    }

    decltype(std::declval<GameObject>().determineSlopeDirection()) GameObject::determineSlopeDirection() {
        using r1325 = decltype(std::declval<GameObject>().determineSlopeDirection());
        using f1325 = r1325(*)(GameObject*);
        return reinterpret_cast<f1325>(base+0x33a9e0)(this);
    }

    decltype(std::declval<GameObject>().getActiveColorForMode(std::declval<int>(), std::declval<bool>())) GameObject::getActiveColorForMode(int p0, bool p1) {
        using r1326 = decltype(std::declval<GameObject>().getActiveColorForMode(std::declval<int>(), std::declval<bool>()));
        using f1326 = r1326(*)(GameObject*, int, bool);
        return reinterpret_cast<f1326>(base+0x343860)(this, p0, p1);
    }

    decltype(std::declval<GameObject>().getBallFrame(std::declval<int>())) GameObject::getBallFrame(int p0) {
        using r1327 = decltype(std::declval<GameObject>().getBallFrame(std::declval<int>()));
        using f1327 = r1327(*)(GameObject*, int);
        return reinterpret_cast<f1327>(base+0x341bf0)(this, p0);
    }

    decltype(std::declval<GameObject>().getBoxOffset()) GameObject::getBoxOffset() {
        using r1328 = decltype(std::declval<GameObject>().getBoxOffset());
        using f1328 = r1328(*)(GameObject*);
        return reinterpret_cast<f1328>(base+0x3353d0)(this);
    }

    decltype(std::declval<GameObject>().getColorIndex()) GameObject::getColorIndex() {
        using r1329 = decltype(std::declval<GameObject>().getColorIndex());
        using f1329 = r1329(*)(GameObject*);
        return reinterpret_cast<f1329>(base+0x343b90)(this);
    }

    decltype(std::declval<GameObject>().getDidUpdateLastPosition()) GameObject::getDidUpdateLastPosition() {
        using r1330 = decltype(std::declval<GameObject>().getDidUpdateLastPosition());
        using f1330 = r1330(*)(GameObject*);
        return reinterpret_cast<f1330>(base+0x343a20)(this);
    }

    decltype(std::declval<GameObject>().getGroupID(std::declval<int>())) GameObject::getGroupID(int p0) {
        using r1331 = decltype(std::declval<GameObject>().getGroupID(std::declval<int>()));
        using f1331 = r1331(*)(GameObject*, int);
        return reinterpret_cast<f1331>(base+0x33ae10)(this, p0);
    }

    decltype(std::declval<GameObject>().getLastPosition()) GameObject::getLastPosition() {
        using r1332 = decltype(std::declval<GameObject>().getLastPosition());
        using f1332 = r1332(*)(GameObject*);
        return reinterpret_cast<f1332>(base+0x3439d0)(this);
    }

    decltype(std::declval<GameObject>().getMainColorMode()) GameObject::getMainColorMode() {
        using r1333 = decltype(std::declval<GameObject>().getMainColorMode());
        using f1333 = r1333(*)(GameObject*);
        return reinterpret_cast<f1333>(base+0x334c30)(this);
    }

    decltype(std::declval<GameObject>().getObjectZOrder()) GameObject::getObjectZOrder() {
        using r1334 = decltype(std::declval<GameObject>().getObjectZOrder());
        using f1334 = r1334(*)(GameObject*);
        return reinterpret_cast<f1334>(base+0x337d70)(this);
    }

    decltype(std::declval<GameObject>().getSecondaryColorMode()) GameObject::getSecondaryColorMode() {
        using r1335 = decltype(std::declval<GameObject>().getSecondaryColorMode());
        using f1335 = r1335(*)(GameObject*);
        return reinterpret_cast<f1335>(base+0x341c20)(this);
    }

    decltype(std::declval<GameObject>().getSectionIdx()) GameObject::getSectionIdx() {
        using r1336 = decltype(std::declval<GameObject>().getSectionIdx());
        using f1336 = r1336(*)(GameObject*);
        return reinterpret_cast<f1336>(base+0x343a00)(this);
    }

    decltype(std::declval<GameObject>().groupWasDisabled()) GameObject::groupWasDisabled() {
        using r1337 = decltype(std::declval<GameObject>().groupWasDisabled());
        using f1337 = r1337(*)(GameObject*);
        return reinterpret_cast<f1337>(base+0x33b110)(this);
    }

    decltype(std::declval<GameObject>().groupWasEnabled()) GameObject::groupWasEnabled() {
        using r1338 = decltype(std::declval<GameObject>().groupWasEnabled());
        using f1338 = r1338(*)(GameObject*);
        return reinterpret_cast<f1338>(base+0x33b0f0)(this);
    }

    decltype(std::declval<GameObject>().hasBeenActivated()) GameObject::hasBeenActivated() {
        using r1339 = decltype(std::declval<GameObject>().hasBeenActivated());
        using f1339 = r1339(*)(GameObject*);
        return reinterpret_cast<f1339>(base+0x342a80)(this);
    }

    decltype(std::declval<GameObject>().hasBeenActivatedByPlayer(std::declval<GameObject*>())) GameObject::hasBeenActivatedByPlayer(GameObject* p0) {
        using r1340 = decltype(std::declval<GameObject>().hasBeenActivatedByPlayer(std::declval<GameObject*>()));
        using f1340 = r1340(*)(GameObject*, GameObject*);
        return reinterpret_cast<f1340>(base+0x342a50)(this, p0);
    }

    decltype(std::declval<GameObject>().hasSecondaryColor()) GameObject::hasSecondaryColor() {
        using r1341 = decltype(std::declval<GameObject>().hasSecondaryColor());
        using f1341 = r1341(*)(GameObject*);
        return reinterpret_cast<f1341>(base+0x342f80)(this);
    }

    decltype(std::declval<GameObject>().ignoreEnter()) GameObject::ignoreEnter() {
        using r1342 = decltype(std::declval<GameObject>().ignoreEnter());
        using f1342 = r1342(*)(GameObject*);
        return reinterpret_cast<f1342>(base+0x3352a0)(this);
    }

    decltype(std::declval<GameObject>().ignoreFade()) GameObject::ignoreFade() {
        using r1343 = decltype(std::declval<GameObject>().ignoreFade());
        using f1343 = r1343(*)(GameObject*);
        return reinterpret_cast<f1343>(base+0x335290)(this);
    }

    decltype(std::declval<GameObject>().isBasicTrigger()) GameObject::isBasicTrigger() {
        using r1344 = decltype(std::declval<GameObject>().isBasicTrigger());
        using f1344 = r1344(*)(GameObject*);
        return reinterpret_cast<f1344>(base+0x343d10)(this);
    }

    decltype(std::declval<GameObject>().isColorTrigger()) GameObject::isColorTrigger() {
        using r1345 = decltype(std::declval<GameObject>().isColorTrigger());
        using f1345 = r1345(*)(GameObject*);
        return reinterpret_cast<f1345>(base+0x343b40)(this);
    }

    decltype(std::declval<GameObject>().isSpawnableTrigger()) GameObject::isSpawnableTrigger() {
        using r1346 = decltype(std::declval<GameObject>().isSpawnableTrigger());
        using f1346 = r1346(*)(GameObject*);
        return reinterpret_cast<f1346>(base+0x343a60)(this);
    }

    decltype(std::declval<GameObject>().isSpecialObject()) GameObject::isSpecialObject() {
        using r1347 = decltype(std::declval<GameObject>().isSpecialObject());
        using f1347 = r1347(*)(GameObject*);
        return reinterpret_cast<f1347>(base+0x343c40)(this);
    }

    decltype(std::declval<GameObject>().objectFromString(std::declval<gd::string>(), std::declval<bool>())) GameObject::objectFromString(gd::string p0, bool p1) {
        using r1348 = decltype(std::declval<GameObject>().objectFromString(std::declval<gd::string>(), std::declval<bool>()));
        using f1348 = r1348(*)(gd::string, bool);
        return reinterpret_cast<f1348>(base+0x33b720)(p0, p1);

    }

    decltype(std::declval<GameObject>().playShineEffect()) GameObject::playShineEffect() {
        using r1349 = decltype(std::declval<GameObject>().playShineEffect());
        using f1349 = r1349(*)(GameObject*);
        return reinterpret_cast<f1349>(base+0x2fa9d0)(this);
    }

    decltype(std::declval<GameObject>().quickUpdatePosition()) GameObject::quickUpdatePosition() {
        using r1350 = decltype(std::declval<GameObject>().quickUpdatePosition());
        using f1350 = r1350(*)(GameObject*);
        return reinterpret_cast<f1350>(base+0x335790)(this);
    }

    decltype(std::declval<GameObject>().removeGlow()) GameObject::removeGlow() {
        using r1351 = decltype(std::declval<GameObject>().removeGlow());
        using f1351 = r1351(*)(GameObject*);
        return reinterpret_cast<f1351>(base+0x2f7f70)(this);
    }

    decltype(std::declval<GameObject>().resetGroupDisabled()) GameObject::resetGroupDisabled() {
        using r1352 = decltype(std::declval<GameObject>().resetGroupDisabled());
        using f1352 = r1352(*)(GameObject*);
        return reinterpret_cast<f1352>(base+0x2fa7e0)(this);
    }

    decltype(std::declval<GameObject>().saveActiveColors()) GameObject::saveActiveColors() {
        using r1353 = decltype(std::declval<GameObject>().saveActiveColors());
        using f1353 = r1353(*)(GameObject*);
        return reinterpret_cast<f1353>(base+0x33d250)(this);
    }

    decltype(std::declval<GameObject>().selectObject(std::declval<cocos2d::_ccColor3B>())) GameObject::selectObject(cocos2d::_ccColor3B p0) {
        using r1354 = decltype(std::declval<GameObject>().selectObject(std::declval<cocos2d::_ccColor3B>()));
        using f1354 = r1354(*)(GameObject*, cocos2d::_ccColor3B);
        return reinterpret_cast<f1354>(base+0x341f90)(this, p0);
    }

    decltype(std::declval<GameObject>().setDefaultMainColorMode(std::declval<int>())) GameObject::setDefaultMainColorMode(int p0) {
        using r1355 = decltype(std::declval<GameObject>().setDefaultMainColorMode(std::declval<int>()));
        using f1355 = r1355(*)(GameObject*, int);
        return reinterpret_cast<f1355>(base+0x304fc0)(this, p0);
    }

    decltype(std::declval<GameObject>().setDidUpdateLastPosition(std::declval<bool const&>())) GameObject::setDidUpdateLastPosition(bool const& p0) {
        using r1356 = decltype(std::declval<GameObject>().setDidUpdateLastPosition(std::declval<bool const&>()));
        using f1356 = r1356(*)(GameObject*, bool const&);
        return reinterpret_cast<f1356>(base+0x343a30)(this, p0);
    }

    decltype(std::declval<GameObject>().setGlowOpacity(std::declval<unsigned char>())) GameObject::setGlowOpacity(unsigned char p0) {
        using r1357 = decltype(std::declval<GameObject>().setGlowOpacity(std::declval<unsigned char>()));
        using f1357 = r1357(*)(GameObject*, unsigned char);
        return reinterpret_cast<f1357>(base+0x336200)(this, p0);
    }

    decltype(std::declval<GameObject>().setLastPosition(std::declval<cocos2d::CCPoint const&>())) GameObject::setLastPosition(cocos2d::CCPoint const& p0) {
        using r1358 = decltype(std::declval<GameObject>().setLastPosition(std::declval<cocos2d::CCPoint const&>()));
        using f1358 = r1358(*)(GameObject*, cocos2d::CCPoint const&);
        return reinterpret_cast<f1358>(base+0x3439e0)(this, p0);
    }

    decltype(std::declval<GameObject>().setMainColorMode(std::declval<int>())) GameObject::setMainColorMode(int p0) {
        using r1359 = decltype(std::declval<GameObject>().setMainColorMode(std::declval<int>()));
        using f1359 = r1359(*)(GameObject*, int);
        return reinterpret_cast<f1359>(base+0x342e70)(this, p0);
    }

    decltype(std::declval<GameObject>().setSectionIdx(std::declval<int const&>())) GameObject::setSectionIdx(int const& p0) {
        using r1360 = decltype(std::declval<GameObject>().setSectionIdx(std::declval<int const&>()));
        using f1360 = r1360(*)(GameObject*, int const&);
        return reinterpret_cast<f1360>(base+0x343a10)(this, p0);
    }

    decltype(std::declval<GameObject>().setupCoinArt()) GameObject::setupCoinArt() {
        using r1361 = decltype(std::declval<GameObject>().setupCoinArt());
        using f1361 = r1361(*)(GameObject*);
        return reinterpret_cast<f1361>(base+0x337dd0)(this);
    }

    decltype(std::declval<GameObject>().slopeFloorTop()) GameObject::slopeFloorTop() {
        using r1362 = decltype(std::declval<GameObject>().slopeFloorTop());
        using f1362 = r1362(*)(GameObject*);
        return reinterpret_cast<f1362>(base+0x342800)(this);
    }

    decltype(std::declval<GameObject>().slopeWallLeft()) GameObject::slopeWallLeft() {
        using r1363 = decltype(std::declval<GameObject>().slopeWallLeft());
        using f1363 = r1363(*)(GameObject*);
        return reinterpret_cast<f1363>(base+0x3427e0)(this);
    }

    decltype(std::declval<GameObject>().updateCustomScale(std::declval<float>())) GameObject::updateCustomScale(float p0) {
        using r1364 = decltype(std::declval<GameObject>().updateCustomScale(std::declval<float>()));
        using f1364 = r1364(*)(GameObject*, float);
        return reinterpret_cast<f1364>(base+0x335eb0)(this, p0);
    }

    decltype(std::declval<GameObject>().updateMainColor()) GameObject::updateMainColor() {
        using r1365 = decltype(std::declval<GameObject>().updateMainColor());
        using f1365 = r1365(*)(GameObject*);
        return reinterpret_cast<f1365>(base+0x343340)(this);
    }

    decltype(std::declval<GameObject>().updateOrientedBox()) GameObject::updateOrientedBox() {
        using r1366 = decltype(std::declval<GameObject>().updateOrientedBox());
        using f1366 = r1366(*)(GameObject*);
        return reinterpret_cast<f1366>(base+0x342b50)(this);
    }

    decltype(std::declval<GameObject>().updateSecondaryColor()) GameObject::updateSecondaryColor() {
        using r1367 = decltype(std::declval<GameObject>().updateSecondaryColor());
        using f1367 = r1367(*)(GameObject*);
        return reinterpret_cast<f1367>(base+0x343740)(this);
    }

    decltype(std::declval<GameObject>().updateStartPos()) GameObject::updateStartPos() {
        using r1368 = decltype(std::declval<GameObject>().updateStartPos());
        using f1368 = r1368(*)(GameObject*);
        return reinterpret_cast<f1368>(base+0x2fa590)(this);
    }

    decltype(std::declval<GameObject>().updateState()) GameObject::updateState() {
        using r1369 = decltype(std::declval<GameObject>().updateState());
        using f1369 = r1369(*)(GameObject*);
        return reinterpret_cast<f1369>(base+0x3369e0)(this);
    }

    decltype(std::declval<GameObject>().updateSyncedAnimation(std::declval<float>())) GameObject::updateSyncedAnimation(float p0) {
        using r1370 = decltype(std::declval<GameObject>().updateSyncedAnimation(std::declval<float>()));
        using f1370 = r1370(*)(GameObject*, float);
        return reinterpret_cast<f1370>(base+0x337f00)(this, p0);
    }

    GameObjectCopy::~GameObjectCopy() {
        jumpDestructor(0xa3290)
    }

    decltype(std::declval<GameObjectCopy>().create(std::declval<GameObject*>())) GameObjectCopy::create(GameObject* p0) {
        using r1372 = decltype(std::declval<GameObjectCopy>().create(std::declval<GameObject*>()));
        using f1372 = r1372(*)(GameObject*);
        return reinterpret_cast<f1372>(base+0x975a0)(p0);

    }

    decltype(std::declval<GameObjectCopy>().resetObject()) GameObjectCopy::resetObject() {
        using r1373 = decltype(std::declval<GameObjectCopy>().resetObject());
        using f1373 = r1373(*)(GameObjectCopy*);
        return reinterpret_cast<f1373>(base+0x976a0)(this);
    }

    PlayerObject::~PlayerObject() {
        jumpDestructor(0x217220)
    }

    decltype(std::declval<PlayerObject>().update(std::declval<float>())) PlayerObject::update(float p0) {
        using r1375 = decltype(std::declval<PlayerObject>().update(std::declval<float>()));
        using f1375 = r1375(*)(PlayerObject*, float);
        return reinterpret_cast<f1375>(base+0x218bf0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().setScaleX(std::declval<float>())) PlayerObject::setScaleX(float p0) {
        using r1376 = decltype(std::declval<PlayerObject>().setScaleX(std::declval<float>()));
        using f1376 = r1376(*)(PlayerObject*, float);
        return reinterpret_cast<f1376>(base+0x22e7f0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().setScaleY(std::declval<float>())) PlayerObject::setScaleY(float p0) {
        using r1377 = decltype(std::declval<PlayerObject>().setScaleY(std::declval<float>()));
        using f1377 = r1377(*)(PlayerObject*, float);
        return reinterpret_cast<f1377>(base+0x22e830)(this, p0);
    }

    decltype(std::declval<PlayerObject>().setScale(std::declval<float>())) PlayerObject::setScale(float p0) {
        using r1378 = decltype(std::declval<PlayerObject>().setScale(std::declval<float>()));
        using f1378 = r1378(*)(PlayerObject*, float);
        return reinterpret_cast<f1378>(base+0x22e870)(this, p0);
    }

    decltype(std::declval<PlayerObject>().setPosition(std::declval<cocos2d::CCPoint const&>())) PlayerObject::setPosition(cocos2d::CCPoint const& p0) {
        using r1379 = decltype(std::declval<PlayerObject>().setPosition(std::declval<cocos2d::CCPoint const&>()));
        using f1379 = r1379(*)(PlayerObject*, cocos2d::CCPoint const&);
        return reinterpret_cast<f1379>(base+0x22c8b0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().setVisible(std::declval<bool>())) PlayerObject::setVisible(bool p0) {
        using r1380 = decltype(std::declval<PlayerObject>().setVisible(std::declval<bool>()));
        using f1380 = r1380(*)(PlayerObject*, bool);
        return reinterpret_cast<f1380>(base+0x22e8b0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().setRotation(std::declval<float>())) PlayerObject::setRotation(float p0) {
        using r1381 = decltype(std::declval<PlayerObject>().setRotation(std::declval<float>()));
        using f1381 = r1381(*)(PlayerObject*, float);
        return reinterpret_cast<f1381>(base+0x22e6e0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().setOpacity(std::declval<unsigned char>())) PlayerObject::setOpacity(unsigned char p0) {
        using r1382 = decltype(std::declval<PlayerObject>().setOpacity(std::declval<unsigned char>()));
        using f1382 = r1382(*)(PlayerObject*, unsigned char);
        return reinterpret_cast<f1382>(base+0x22d400)(this, p0);
    }

    decltype(std::declval<PlayerObject>().setColor(std::declval<cocos2d::_ccColor3B const&>())) PlayerObject::setColor(cocos2d::_ccColor3B const& p0) {
        using r1383 = decltype(std::declval<PlayerObject>().setColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f1383 = r1383(*)(PlayerObject*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f1383>(base+0x22cdf0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().setFlipX(std::declval<bool>())) PlayerObject::setFlipX(bool p0) {
        using r1384 = decltype(std::declval<PlayerObject>().setFlipX(std::declval<bool>()));
        using f1384 = r1384(*)(PlayerObject*, bool);
        return reinterpret_cast<f1384>(base+0x22e720)(this, p0);
    }

    decltype(std::declval<PlayerObject>().setFlipY(std::declval<bool>())) PlayerObject::setFlipY(bool p0) {
        using r1385 = decltype(std::declval<PlayerObject>().setFlipY(std::declval<bool>()));
        using f1385 = r1385(*)(PlayerObject*, bool);
        return reinterpret_cast<f1385>(base+0x22e7b0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().resetObject()) PlayerObject::resetObject() {
        using r1386 = decltype(std::declval<PlayerObject>().resetObject());
        using f1386 = r1386(*)(PlayerObject*);
        return reinterpret_cast<f1386>(base+0x223170)(this);
    }

    decltype(std::declval<PlayerObject>().getRealPosition()) PlayerObject::getRealPosition() {
        using r1387 = decltype(std::declval<PlayerObject>().getRealPosition());
        using f1387 = r1387(*)(PlayerObject*);
        return reinterpret_cast<f1387>(base+0x22d5f0)(this);
    }

    decltype(std::declval<PlayerObject>().getOrientedBox()) PlayerObject::getOrientedBox() {
        using r1388 = decltype(std::declval<PlayerObject>().getOrientedBox());
        using f1388 = r1388(*)(PlayerObject*);
        return reinterpret_cast<f1388>(base+0x22dee0)(this);
    }

    decltype(std::declval<PlayerObject>().animationFinished(std::declval<char const*>())) PlayerObject::animationFinished(char const* p0) {
        using r1389 = decltype(std::declval<PlayerObject>().animationFinished(std::declval<char const*>()));
        using f1389 = r1389(*)(PlayerObject*, char const*);
        return reinterpret_cast<f1389>(base+0x22e9d0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().activateStreak()) PlayerObject::activateStreak() {
        using r1390 = decltype(std::declval<PlayerObject>().activateStreak());
        using f1390 = r1390(*)(PlayerObject*);
        return reinterpret_cast<f1390>(base+0x21aef0)(this);
    }

    decltype(std::declval<PlayerObject>().addAllParticles()) PlayerObject::addAllParticles() {
        using r1391 = decltype(std::declval<PlayerObject>().addAllParticles());
        using f1391 = r1391(*)(PlayerObject*);
        return reinterpret_cast<f1391>(base+0x2189b0)(this);
    }

    decltype(std::declval<PlayerObject>().addToTouchedRings(std::declval<GameObject*>())) PlayerObject::addToTouchedRings(GameObject* p0) {
        using r1392 = decltype(std::declval<PlayerObject>().addToTouchedRings(std::declval<GameObject*>()));
        using f1392 = r1392(*)(PlayerObject*, GameObject*);
        return reinterpret_cast<f1392>(base+0x22b800)(this, p0);
    }

    decltype(std::declval<PlayerObject>().boostPlayer(std::declval<float>())) PlayerObject::boostPlayer(float p0) {
        using r1393 = decltype(std::declval<PlayerObject>().boostPlayer(std::declval<float>()));
        using f1393 = r1393(*)(PlayerObject*, float);
        return reinterpret_cast<f1393>(base+0x21d6b0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().bumpPlayer(std::declval<float>(), std::declval<int>())) PlayerObject::bumpPlayer(float p0, int p1) {
        using r1394 = decltype(std::declval<PlayerObject>().bumpPlayer(std::declval<float>(), std::declval<int>()));
        using f1394 = r1394(*)(PlayerObject*, float, int);
        return reinterpret_cast<f1394>(base+0x22d890)(this, p0, p1);
    }

    decltype(std::declval<PlayerObject>().buttonDown(std::declval<PlayerButton>())) PlayerObject::buttonDown(PlayerButton p0) {
        using r1395 = decltype(std::declval<PlayerObject>().buttonDown(std::declval<PlayerButton>()));
        using f1395 = r1395(*)(PlayerObject*, PlayerButton);
        return reinterpret_cast<f1395>(base+0x22b7e0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().checkSnapJumpToObject(std::declval<GameObject*>())) PlayerObject::checkSnapJumpToObject(GameObject* p0) {
        using r1396 = decltype(std::declval<PlayerObject>().checkSnapJumpToObject(std::declval<GameObject*>()));
        using f1396 = r1396(*)(PlayerObject*, GameObject*);
        return reinterpret_cast<f1396>(base+0x2217f0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().collidedWithObject(std::declval<float>(), std::declval<GameObject*>())) PlayerObject::collidedWithObject(float p0, GameObject* p1) {
        using r1397 = decltype(std::declval<PlayerObject>().collidedWithObject(std::declval<float>(), std::declval<GameObject*>()));
        using f1397 = r1397(*)(PlayerObject*, float, GameObject*);
        return reinterpret_cast<f1397>(base+0x21d880)(this, p0, p1);
    }

    decltype(std::declval<PlayerObject>().collidedWithObject(std::declval<float>(), std::declval<GameObject*>(), std::declval<cocos2d::CCRect>())) PlayerObject::collidedWithObject(float p0, GameObject* p1, cocos2d::CCRect p2) {
        using r1398 = decltype(std::declval<PlayerObject>().collidedWithObject(std::declval<float>(), std::declval<GameObject*>(), std::declval<cocos2d::CCRect>()));
        using f1398 = r1398(*)(PlayerObject*, float, GameObject*, cocos2d::CCRect);
        return reinterpret_cast<f1398>(base+0x21f0b0)(this, p0, p1, p2);
    }

    decltype(std::declval<PlayerObject>().collidedWithSlope(std::declval<float>(), std::declval<GameObject*>(), std::declval<bool>())) PlayerObject::collidedWithSlope(float p0, GameObject* p1, bool p2) {
        using r1399 = decltype(std::declval<PlayerObject>().collidedWithSlope(std::declval<float>(), std::declval<GameObject*>(), std::declval<bool>()));
        using f1399 = r1399(*)(PlayerObject*, float, GameObject*, bool);
        return reinterpret_cast<f1399>(base+0x21d8d0)(this, p0, p1, p2);
    }

    decltype(std::declval<PlayerObject>().convertToClosestRotation(std::declval<float>())) PlayerObject::convertToClosestRotation(float p0) {
        using r1400 = decltype(std::declval<PlayerObject>().convertToClosestRotation(std::declval<float>()));
        using f1400 = r1400(*)(PlayerObject*, float);
        return reinterpret_cast<f1400>(base+0x21c860)(this, p0);
    }

    decltype(std::declval<PlayerObject>().copyAttributes(std::declval<PlayerObject*>())) PlayerObject::copyAttributes(PlayerObject* p0) {
        using r1401 = decltype(std::declval<PlayerObject>().copyAttributes(std::declval<PlayerObject*>()));
        using f1401 = r1401(*)(PlayerObject*, PlayerObject*);
        return reinterpret_cast<f1401>(base+0x22dc70)(this, p0);
    }

    decltype(std::declval<PlayerObject>().create(std::declval<int>(), std::declval<int>(), std::declval<cocos2d::CCLayer*>())) PlayerObject::create(int p0, int p1, cocos2d::CCLayer* p2) {
        using r1402 = decltype(std::declval<PlayerObject>().create(std::declval<int>(), std::declval<int>(), std::declval<cocos2d::CCLayer*>()));
        using f1402 = r1402(*)(int, int, cocos2d::CCLayer*);
        return reinterpret_cast<f1402>(base+0x217260)(p0, p1, p2);

    }

    decltype(std::declval<PlayerObject>().deactivateParticle()) PlayerObject::deactivateParticle() {
        using r1403 = decltype(std::declval<PlayerObject>().deactivateParticle());
        using f1403 = r1403(*)(PlayerObject*);
        return reinterpret_cast<f1403>(base+0x21a540)(this);
    }

    decltype(std::declval<PlayerObject>().deactivateStreak(std::declval<bool>())) PlayerObject::deactivateStreak(bool p0) {
        using r1404 = decltype(std::declval<PlayerObject>().deactivateStreak(std::declval<bool>()));
        using f1404 = r1404(*)(PlayerObject*, bool);
        return reinterpret_cast<f1404>(base+0x218b30)(this, p0);
    }

    decltype(std::declval<PlayerObject>().fadeOutStreak2(std::declval<float>())) PlayerObject::fadeOutStreak2(float p0) {
        using r1405 = decltype(std::declval<PlayerObject>().fadeOutStreak2(std::declval<float>()));
        using f1405 = r1405(*)(PlayerObject*, float);
        return reinterpret_cast<f1405>(base+0x225890)(this, p0);
    }

    decltype(std::declval<PlayerObject>().flashPlayer(std::declval<float>(), std::declval<float>(), std::declval<cocos2d::_ccColor3B>(), std::declval<cocos2d::_ccColor3B>())) PlayerObject::flashPlayer(float p0, float p1, cocos2d::_ccColor3B p2, cocos2d::_ccColor3B p3) {
        using r1406 = decltype(std::declval<PlayerObject>().flashPlayer(std::declval<float>(), std::declval<float>(), std::declval<cocos2d::_ccColor3B>(), std::declval<cocos2d::_ccColor3B>()));
        using f1406 = r1406(*)(PlayerObject*, float, float, cocos2d::_ccColor3B, cocos2d::_ccColor3B);
        return reinterpret_cast<f1406>(base+0x221c80)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<PlayerObject>().flipGravity(std::declval<bool>(), std::declval<bool>())) PlayerObject::flipGravity(bool p0, bool p1) {
        using r1407 = decltype(std::declval<PlayerObject>().flipGravity(std::declval<bool>(), std::declval<bool>()));
        using f1407 = r1407(*)(PlayerObject*, bool, bool);
        return reinterpret_cast<f1407>(base+0x21c090)(this, p0, p1);
    }

    decltype(std::declval<PlayerObject>().flipMod()) PlayerObject::flipMod() {
        using r1408 = decltype(std::declval<PlayerObject>().flipMod());
        using f1408 = r1408(*)(PlayerObject*);
        return reinterpret_cast<f1408>(base+0x21a4c0)(this);
    }

    decltype(std::declval<PlayerObject>().getActiveMode()) PlayerObject::getActiveMode() {
        using r1409 = decltype(std::declval<PlayerObject>().getActiveMode());
        using f1409 = r1409(*)(PlayerObject*);
        return reinterpret_cast<f1409>(base+0x22b950)(this);
    }

    decltype(std::declval<PlayerObject>().getModifiedSlopeYVel()) PlayerObject::getModifiedSlopeYVel() {
        using r1410 = decltype(std::declval<PlayerObject>().getModifiedSlopeYVel());
        using f1410 = r1410(*)(PlayerObject*);
        return reinterpret_cast<f1410>(base+0x21bff0)(this);
    }

    decltype(std::declval<PlayerObject>().getOldPosition(std::declval<float>())) PlayerObject::getOldPosition(float p0) {
        using r1411 = decltype(std::declval<PlayerObject>().getOldPosition(std::declval<float>()));
        using f1411 = r1411(*)(PlayerObject*, float);
        return reinterpret_cast<f1411>(base+0x21a830)(this, p0);
    }

    decltype(std::declval<PlayerObject>().getSecondColor()) PlayerObject::getSecondColor() {
        using r1412 = decltype(std::declval<PlayerObject>().getSecondColor());
        using f1412 = r1412(*)(PlayerObject*);
        return reinterpret_cast<f1412>(base+0x22cee0)(this);
    }

    decltype(std::declval<PlayerObject>().gravityDown()) PlayerObject::gravityDown() {
        using r1413 = decltype(std::declval<PlayerObject>().gravityDown());
        using f1413 = r1413(*)(PlayerObject*);
        return reinterpret_cast<f1413>(base+0x22e930)(this);
    }

    decltype(std::declval<PlayerObject>().gravityUp()) PlayerObject::gravityUp() {
        using r1414 = decltype(std::declval<PlayerObject>().gravityUp());
        using f1414 = r1414(*)(PlayerObject*);
        return reinterpret_cast<f1414>(base+0x22e900)(this);
    }

    decltype(std::declval<PlayerObject>().hardFlipGravity()) PlayerObject::hardFlipGravity() {
        using r1415 = decltype(std::declval<PlayerObject>().hardFlipGravity());
        using f1415 = r1415(*)(PlayerObject*);
        return reinterpret_cast<f1415>(base+0x22b860)(this);
    }

    decltype(std::declval<PlayerObject>().hitGround(std::declval<bool>())) PlayerObject::hitGround(bool p0) {
        using r1416 = decltype(std::declval<PlayerObject>().hitGround(std::declval<bool>()));
        using f1416 = r1416(*)(PlayerObject*, bool);
        return reinterpret_cast<f1416>(base+0x220a30)(this, p0);
    }

    decltype(std::declval<PlayerObject>().incrementJumps()) PlayerObject::incrementJumps() {
        using r1417 = decltype(std::declval<PlayerObject>().incrementJumps());
        using f1417 = r1417(*)(PlayerObject*);
        return reinterpret_cast<f1417>(base+0x21c050)(this);
    }

    decltype(std::declval<PlayerObject>().init(std::declval<int>(), std::declval<int>(), std::declval<cocos2d::CCLayer*>())) PlayerObject::init(int p0, int p1, cocos2d::CCLayer* p2) {
        using r1418 = decltype(std::declval<PlayerObject>().init(std::declval<int>(), std::declval<int>(), std::declval<cocos2d::CCLayer*>()));
        using f1418 = r1418(*)(PlayerObject*, int, int, cocos2d::CCLayer*);
        return reinterpret_cast<f1418>(base+0x2172e0)(this, p0, p1, p2);
    }

    decltype(std::declval<PlayerObject>().isBoostValid(std::declval<float>())) PlayerObject::isBoostValid(float p0) {
        using r1419 = decltype(std::declval<PlayerObject>().isBoostValid(std::declval<float>()));
        using f1419 = r1419(*)(PlayerObject*, float);
        return reinterpret_cast<f1419>(base+0x21d650)(this, p0);
    }

    decltype(std::declval<PlayerObject>().isFlying()) PlayerObject::isFlying() {
        using r1420 = decltype(std::declval<PlayerObject>().isFlying());
        using f1420 = r1420(*)(PlayerObject*);
        return reinterpret_cast<f1420>(base+0x21a4e0)(this);
    }

    decltype(std::declval<PlayerObject>().isSafeFlip(std::declval<float>())) PlayerObject::isSafeFlip(float p0) {
        using r1421 = decltype(std::declval<PlayerObject>().isSafeFlip(std::declval<float>()));
        using f1421 = r1421(*)(PlayerObject*, float);
        return reinterpret_cast<f1421>(base+0x2209f0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().isSafeMode(std::declval<float>())) PlayerObject::isSafeMode(float p0) {
        using r1422 = decltype(std::declval<PlayerObject>().isSafeMode(std::declval<float>()));
        using f1422 = r1422(*)(PlayerObject*, float);
        return reinterpret_cast<f1422>(base+0x2209b0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().isSafeSpiderFlip(std::declval<float>())) PlayerObject::isSafeSpiderFlip(float p0) {
        using r1423 = decltype(std::declval<PlayerObject>().isSafeSpiderFlip(std::declval<float>()));
        using f1423 = r1423(*)(PlayerObject*, float);
        return reinterpret_cast<f1423>(base+0x221be0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().levelFlipFinished()) PlayerObject::levelFlipFinished() {
        using r1424 = decltype(std::declval<PlayerObject>().levelFlipFinished());
        using f1424 = r1424(*)(PlayerObject*);
        return reinterpret_cast<f1424>(base+0x21b060)(this);
    }

    decltype(std::declval<PlayerObject>().levelFlipping()) PlayerObject::levelFlipping() {
        using r1425 = decltype(std::declval<PlayerObject>().levelFlipping());
        using f1425 = r1425(*)(PlayerObject*);
        return reinterpret_cast<f1425>(base+0x21a510)(this);
    }

    decltype(std::declval<PlayerObject>().levelWillFlip()) PlayerObject::levelWillFlip() {
        using r1426 = decltype(std::declval<PlayerObject>().levelWillFlip());
        using f1426 = r1426(*)(PlayerObject*);
        return reinterpret_cast<f1426>(base+0x21b020)(this);
    }

    decltype(std::declval<PlayerObject>().loadFromCheckpoint(std::declval<PlayerCheckpoint*>())) PlayerObject::loadFromCheckpoint(PlayerCheckpoint* p0) {
        using r1427 = decltype(std::declval<PlayerObject>().loadFromCheckpoint(std::declval<PlayerCheckpoint*>()));
        using f1427 = r1427(*)(PlayerObject*, PlayerCheckpoint*);
        return reinterpret_cast<f1427>(base+0x22e420)(this, p0);
    }

    decltype(std::declval<PlayerObject>().lockPlayer()) PlayerObject::lockPlayer() {
        using r1428 = decltype(std::declval<PlayerObject>().lockPlayer());
        using f1428 = r1428(*)(PlayerObject*);
        return reinterpret_cast<f1428>(base+0x22d680)(this);
    }

    decltype(std::declval<PlayerObject>().logValues()) PlayerObject::logValues() {
        using r1429 = decltype(std::declval<PlayerObject>().logValues());
        using f1429 = r1429(*)(PlayerObject*);
        return reinterpret_cast<f1429>(base+0x221220)(this);
    }

    decltype(std::declval<PlayerObject>().modeDidChange()) PlayerObject::modeDidChange() {
        using r1430 = decltype(std::declval<PlayerObject>().modeDidChange());
        using f1430 = r1430(*)(PlayerObject*);
        return reinterpret_cast<f1430>(base+0x22bfd0)(this);
    }

    decltype(std::declval<PlayerObject>().placeStreakPoint()) PlayerObject::placeStreakPoint() {
        using r1431 = decltype(std::declval<PlayerObject>().placeStreakPoint());
        using f1431 = r1431(*)(PlayerObject*);
        return reinterpret_cast<f1431>(base+0x21af90)(this);
    }

    decltype(std::declval<PlayerObject>().playBurstEffect()) PlayerObject::playBurstEffect() {
        using r1432 = decltype(std::declval<PlayerObject>().playBurstEffect());
        using f1432 = r1432(*)(PlayerObject*);
        return reinterpret_cast<f1432>(base+0x21c780)(this);
    }

    decltype(std::declval<PlayerObject>().playDeathEffect()) PlayerObject::playDeathEffect() {
        using r1433 = decltype(std::declval<PlayerObject>().playDeathEffect());
        using f1433 = r1433(*)(PlayerObject*);
        return reinterpret_cast<f1433>(base+0x225930)(this);
    }

    decltype(std::declval<PlayerObject>().playDynamicSpiderRun()) PlayerObject::playDynamicSpiderRun() {
        using r1434 = decltype(std::declval<PlayerObject>().playDynamicSpiderRun());
        using f1434 = r1434(*)(PlayerObject*);
        return reinterpret_cast<f1434>(base+0x222ec0)(this);
    }

    decltype(std::declval<PlayerObject>().playerDestroyed(std::declval<bool>())) PlayerObject::playerDestroyed(bool p0) {
        using r1435 = decltype(std::declval<PlayerObject>().playerDestroyed(std::declval<bool>()));
        using f1435 = r1435(*)(PlayerObject*, bool);
        return reinterpret_cast<f1435>(base+0x2256d0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().playerIsFalling()) PlayerObject::playerIsFalling() {
        using r1436 = decltype(std::declval<PlayerObject>().playerIsFalling());
        using f1436 = r1436(*)(PlayerObject*);
        return reinterpret_cast<f1436>(base+0x21c730)(this);
    }

    decltype(std::declval<PlayerObject>().playerTeleported()) PlayerObject::playerTeleported() {
        using r1437 = decltype(std::declval<PlayerObject>().playerTeleported());
        using f1437 = r1437(*)(PlayerObject*);
        return reinterpret_cast<f1437>(base+0x22b840)(this);
    }

    decltype(std::declval<PlayerObject>().playingEndEffect()) PlayerObject::playingEndEffect() {
        using r1438 = decltype(std::declval<PlayerObject>().playingEndEffect());
        using f1438 = r1438(*)(PlayerObject*);
        return reinterpret_cast<f1438>(base+0x22d7e0)(this);
    }

    decltype(std::declval<PlayerObject>().postCollision(std::declval<float>())) PlayerObject::postCollision(float p0) {
        using r1439 = decltype(std::declval<PlayerObject>().postCollision(std::declval<float>()));
        using f1439 = r1439(*)(PlayerObject*, float);
        return reinterpret_cast<f1439>(base+0x21cd10)(this, p0);
    }

    decltype(std::declval<PlayerObject>().preCollision()) PlayerObject::preCollision() {
        using r1440 = decltype(std::declval<PlayerObject>().preCollision());
        using f1440 = r1440(*)(PlayerObject*);
        return reinterpret_cast<f1440>(base+0x21ccc0)(this);
    }

    decltype(std::declval<PlayerObject>().preSlopeCollision(std::declval<float>(), std::declval<GameObject*>())) PlayerObject::preSlopeCollision(float p0, GameObject* p1) {
        using r1441 = decltype(std::declval<PlayerObject>().preSlopeCollision(std::declval<float>(), std::declval<GameObject*>()));
        using f1441 = r1441(*)(PlayerObject*, float, GameObject*);
        return reinterpret_cast<f1441>(base+0x21ec80)(this, p0, p1);
    }

    decltype(std::declval<PlayerObject>().propellPlayer(std::declval<float>())) PlayerObject::propellPlayer(float p0) {
        using r1442 = decltype(std::declval<PlayerObject>().propellPlayer(std::declval<float>()));
        using f1442 = r1442(*)(PlayerObject*, float);
        return reinterpret_cast<f1442>(base+0x22d8e0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().pushButton(std::declval<PlayerButton>())) PlayerObject::pushButton(PlayerButton p0) {
        using r1443 = decltype(std::declval<PlayerObject>().pushButton(std::declval<PlayerButton>()));
        using f1443 = r1443(*)(PlayerObject*, PlayerButton);
        return reinterpret_cast<f1443>(base+0x22aa00)(this, p0);
    }

    decltype(std::declval<PlayerObject>().pushDown()) PlayerObject::pushDown() {
        using r1444 = decltype(std::declval<PlayerObject>().pushDown());
        using f1444 = r1444(*)(PlayerObject*);
        return reinterpret_cast<f1444>(base+0x22dbd0)(this);
    }

    decltype(std::declval<PlayerObject>().pushPlayer(std::declval<float>())) PlayerObject::pushPlayer(float p0) {
        using r1445 = decltype(std::declval<PlayerObject>().pushPlayer(std::declval<float>()));
        using f1445 = r1445(*)(PlayerObject*, float);
        return reinterpret_cast<f1445>(base+0x22dbb0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().releaseButton(std::declval<PlayerButton>())) PlayerObject::releaseButton(PlayerButton p0) {
        using r1446 = decltype(std::declval<PlayerObject>().releaseButton(std::declval<PlayerButton>()));
        using f1446 = r1446(*)(PlayerObject*, PlayerButton);
        return reinterpret_cast<f1446>(base+0x22b6f0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().removeAllParticles()) PlayerObject::removeAllParticles() {
        using r1447 = decltype(std::declval<PlayerObject>().removeAllParticles());
        using f1447 = r1447(*)(PlayerObject*);
        return reinterpret_cast<f1447>(base+0x218ac0)(this);
    }

    decltype(std::declval<PlayerObject>().removePendingCheckpoint()) PlayerObject::removePendingCheckpoint() {
        using r1448 = decltype(std::declval<PlayerObject>().removePendingCheckpoint());
        using f1448 = r1448(*)(PlayerObject*);
        return reinterpret_cast<f1448>(base+0x2237b0)(this);
    }

    decltype(std::declval<PlayerObject>().resetAllParticles()) PlayerObject::resetAllParticles() {
        using r1449 = decltype(std::declval<PlayerObject>().resetAllParticles());
        using f1449 = r1449(*)(PlayerObject*);
        return reinterpret_cast<f1449>(base+0x21adb0)(this);
    }

    decltype(std::declval<PlayerObject>().resetCollisionLog()) PlayerObject::resetCollisionLog() {
        using r1450 = decltype(std::declval<PlayerObject>().resetCollisionLog());
        using f1450 = r1450(*)(PlayerObject*);
        return reinterpret_cast<f1450>(base+0x21cc20)(this);
    }

    decltype(std::declval<PlayerObject>().resetPlayerIcon()) PlayerObject::resetPlayerIcon() {
        using r1451 = decltype(std::declval<PlayerObject>().resetPlayerIcon());
        using f1451 = r1451(*)(PlayerObject*);
        return reinterpret_cast<f1451>(base+0x22be00)(this);
    }

    decltype(std::declval<PlayerObject>().resetStateVariables()) PlayerObject::resetStateVariables() {
        using r1452 = decltype(std::declval<PlayerObject>().resetStateVariables());
        using f1452 = r1452(*)(PlayerObject*);
        return reinterpret_cast<f1452>(base+0x223760)(this);
    }

    decltype(std::declval<PlayerObject>().resetStreak()) PlayerObject::resetStreak() {
        using r1453 = decltype(std::declval<PlayerObject>().resetStreak());
        using f1453 = r1453(*)(PlayerObject*);
        return reinterpret_cast<f1453>(base+0x21ae10)(this);
    }

    decltype(std::declval<PlayerObject>().ringJump(std::declval<GameObject*>())) PlayerObject::ringJump(GameObject* p0) {
        using r1454 = decltype(std::declval<PlayerObject>().ringJump(std::declval<GameObject*>()));
        using f1454 = r1454(*)(PlayerObject*, GameObject*);
        return reinterpret_cast<f1454>(base+0x22abf0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().runBallRotation(std::declval<float>())) PlayerObject::runBallRotation(float p0) {
        using r1455 = decltype(std::declval<PlayerObject>().runBallRotation(std::declval<float>()));
        using f1455 = r1455(*)(PlayerObject*, float);
        return reinterpret_cast<f1455>(base+0x21ca10)(this, p0);
    }

    decltype(std::declval<PlayerObject>().runBallRotation2()) PlayerObject::runBallRotation2() {
        using r1456 = decltype(std::declval<PlayerObject>().runBallRotation2());
        using f1456 = r1456(*)(PlayerObject*);
        return reinterpret_cast<f1456>(base+0x21cb10)(this);
    }

    decltype(std::declval<PlayerObject>().runNormalRotation()) PlayerObject::runNormalRotation() {
        using r1457 = decltype(std::declval<PlayerObject>().runNormalRotation());
        using f1457 = r1457(*)(PlayerObject*);
        return reinterpret_cast<f1457>(base+0x21c960)(this);
    }

    decltype(std::declval<PlayerObject>().runRotateAction(std::declval<bool>())) PlayerObject::runRotateAction(bool p0) {
        using r1458 = decltype(std::declval<PlayerObject>().runRotateAction(std::declval<bool>()));
        using f1458 = r1458(*)(PlayerObject*, bool);
        return reinterpret_cast<f1458>(base+0x21c570)(this, p0);
    }

    decltype(std::declval<PlayerObject>().saveToCheckpoint(std::declval<PlayerCheckpoint*>())) PlayerObject::saveToCheckpoint(PlayerCheckpoint* p0) {
        using r1459 = decltype(std::declval<PlayerObject>().saveToCheckpoint(std::declval<PlayerCheckpoint*>()));
        using f1459 = r1459(*)(PlayerObject*, PlayerCheckpoint*);
        return reinterpret_cast<f1459>(base+0x22e2f0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().setSecondColor(std::declval<cocos2d::_ccColor3B const&>())) PlayerObject::setSecondColor(cocos2d::_ccColor3B const& p0) {
        using r1460 = decltype(std::declval<PlayerObject>().setSecondColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f1460 = r1460(*)(PlayerObject*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f1460>(base+0x219610)(this, p0);
    }

    decltype(std::declval<PlayerObject>().setupStreak()) PlayerObject::setupStreak() {
        using r1461 = decltype(std::declval<PlayerObject>().setupStreak());
        using f1461 = r1461(*)(PlayerObject*);
        return reinterpret_cast<f1461>(base+0x218720)(this);
    }

    decltype(std::declval<PlayerObject>().spawnCircle()) PlayerObject::spawnCircle() {
        using r1462 = decltype(std::declval<PlayerObject>().spawnCircle());
        using f1462 = r1462(*)(PlayerObject*);
        return reinterpret_cast<f1462>(base+0x225480)(this);
    }

    decltype(std::declval<PlayerObject>().spawnCircle2()) PlayerObject::spawnCircle2() {
        using r1463 = decltype(std::declval<PlayerObject>().spawnCircle2());
        using f1463 = r1463(*)(PlayerObject*);
        return reinterpret_cast<f1463>(base+0x2252a0)(this);
    }

    decltype(std::declval<PlayerObject>().spawnDualCircle()) PlayerObject::spawnDualCircle() {
        using r1464 = decltype(std::declval<PlayerObject>().spawnDualCircle());
        using f1464 = r1464(*)(PlayerObject*);
        return reinterpret_cast<f1464>(base+0x2255c0)(this);
    }

    decltype(std::declval<PlayerObject>().spawnFromPlayer(std::declval<PlayerObject*>())) PlayerObject::spawnFromPlayer(PlayerObject* p0) {
        using r1465 = decltype(std::declval<PlayerObject>().spawnFromPlayer(std::declval<PlayerObject*>()));
        using f1465 = r1465(*)(PlayerObject*, PlayerObject*);
        return reinterpret_cast<f1465>(base+0x22dde0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().spawnPortalCircle(std::declval<cocos2d::_ccColor3B>(), std::declval<float>())) PlayerObject::spawnPortalCircle(cocos2d::_ccColor3B p0, float p1) {
        using r1466 = decltype(std::declval<PlayerObject>().spawnPortalCircle(std::declval<cocos2d::_ccColor3B>(), std::declval<float>()));
        using f1466 = r1466(*)(PlayerObject*, cocos2d::_ccColor3B, float);
        return reinterpret_cast<f1466>(base+0x225350)(this, p0, p1);
    }

    decltype(std::declval<PlayerObject>().spawnScaleCircle()) PlayerObject::spawnScaleCircle() {
        using r1467 = decltype(std::declval<PlayerObject>().spawnScaleCircle());
        using f1467 = r1467(*)(PlayerObject*);
        return reinterpret_cast<f1467>(base+0x2251b0)(this);
    }

    decltype(std::declval<PlayerObject>().specialGroundHit()) PlayerObject::specialGroundHit() {
        using r1468 = decltype(std::declval<PlayerObject>().specialGroundHit());
        using f1468 = r1468(*)(PlayerObject*);
        return reinterpret_cast<f1468>(base+0x22dbf0)(this);
    }

    decltype(std::declval<PlayerObject>().speedDown()) PlayerObject::speedDown() {
        using r1469 = decltype(std::declval<PlayerObject>().speedDown());
        using f1469 = r1469(*)(PlayerObject*);
        return reinterpret_cast<f1469>(base+0x22e970)(this);
    }

    decltype(std::declval<PlayerObject>().speedUp()) PlayerObject::speedUp() {
        using r1470 = decltype(std::declval<PlayerObject>().speedUp());
        using f1470 = r1470(*)(PlayerObject*);
        return reinterpret_cast<f1470>(base+0x22e950)(this);
    }

    decltype(std::declval<PlayerObject>().spiderTestJump(std::declval<bool>())) PlayerObject::spiderTestJump(bool p0) {
        using r1471 = decltype(std::declval<PlayerObject>().spiderTestJump(std::declval<bool>()));
        using f1471 = r1471(*)(PlayerObject*, bool);
        return reinterpret_cast<f1471>(base+0x21b160)(this, p0);
    }

    decltype(std::declval<PlayerObject>().startDashing(std::declval<GameObject*>())) PlayerObject::startDashing(GameObject* p0) {
        using r1472 = decltype(std::declval<PlayerObject>().startDashing(std::declval<GameObject*>()));
        using f1472 = r1472(*)(PlayerObject*, GameObject*);
        return reinterpret_cast<f1472>(base+0x221d70)(this, p0);
    }

    decltype(std::declval<PlayerObject>().stopBurstEffect()) PlayerObject::stopBurstEffect() {
        using r1473 = decltype(std::declval<PlayerObject>().stopBurstEffect());
        using f1473 = r1473(*)(PlayerObject*);
        return reinterpret_cast<f1473>(base+0x22c680)(this);
    }

    decltype(std::declval<PlayerObject>().stopDashing()) PlayerObject::stopDashing() {
        using r1474 = decltype(std::declval<PlayerObject>().stopDashing());
        using f1474 = r1474(*)(PlayerObject*);
        return reinterpret_cast<f1474>(base+0x222990)(this);
    }

    decltype(std::declval<PlayerObject>().stopRotation(std::declval<bool>())) PlayerObject::stopRotation(bool p0) {
        using r1475 = decltype(std::declval<PlayerObject>().stopRotation(std::declval<bool>()));
        using f1475 = r1475(*)(PlayerObject*, bool);
        return reinterpret_cast<f1475>(base+0x21c830)(this, p0);
    }

    decltype(std::declval<PlayerObject>().storeCollision(std::declval<bool>(), std::declval<int>())) PlayerObject::storeCollision(bool p0, int p1) {
        using r1476 = decltype(std::declval<PlayerObject>().storeCollision(std::declval<bool>(), std::declval<int>()));
        using f1476 = r1476(*)(PlayerObject*, bool, int);
        return reinterpret_cast<f1476>(base+0x21cc60)(this, p0, p1);
    }

    decltype(std::declval<PlayerObject>().switchedToMode(std::declval<GameObjectType>())) PlayerObject::switchedToMode(GameObjectType p0) {
        using r1477 = decltype(std::declval<PlayerObject>().switchedToMode(std::declval<GameObjectType>()));
        using f1477 = r1477(*)(PlayerObject*, GameObjectType);
        return reinterpret_cast<f1477>(base+0x22b9a0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().testForMoving(std::declval<float>(), std::declval<GameObject*>())) PlayerObject::testForMoving(float p0, GameObject* p1) {
        using r1478 = decltype(std::declval<PlayerObject>().testForMoving(std::declval<float>(), std::declval<GameObject*>()));
        using f1478 = r1478(*)(PlayerObject*, float, GameObject*);
        return reinterpret_cast<f1478>(base+0x21eb70)(this, p0, p1);
    }

    decltype(std::declval<PlayerObject>().toggleBirdMode(std::declval<bool>())) PlayerObject::toggleBirdMode(bool p0) {
        using r1479 = decltype(std::declval<PlayerObject>().toggleBirdMode(std::declval<bool>()));
        using f1479 = r1479(*)(PlayerObject*, bool);
        return reinterpret_cast<f1479>(base+0x224070)(this, p0);
    }

    decltype(std::declval<PlayerObject>().toggleDartMode(std::declval<bool>())) PlayerObject::toggleDartMode(bool p0) {
        using r1480 = decltype(std::declval<PlayerObject>().toggleDartMode(std::declval<bool>()));
        using f1480 = r1480(*)(PlayerObject*, bool);
        return reinterpret_cast<f1480>(base+0x2243f0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().toggleFlyMode(std::declval<bool>())) PlayerObject::toggleFlyMode(bool p0) {
        using r1481 = decltype(std::declval<PlayerObject>().toggleFlyMode(std::declval<bool>()));
        using f1481 = r1481(*)(PlayerObject*, bool);
        return reinterpret_cast<f1481>(base+0x223820)(this, p0);
    }

    decltype(std::declval<PlayerObject>().toggleGhostEffect(std::declval<GhostType>())) PlayerObject::toggleGhostEffect(GhostType p0) {
        using r1482 = decltype(std::declval<PlayerObject>().toggleGhostEffect(std::declval<GhostType>()));
        using f1482 = r1482(*)(PlayerObject*, GhostType);
        return reinterpret_cast<f1482>(base+0x225000)(this, p0);
    }

    decltype(std::declval<PlayerObject>().togglePlayerScale(std::declval<bool>())) PlayerObject::togglePlayerScale(bool p0) {
        using r1483 = decltype(std::declval<PlayerObject>().togglePlayerScale(std::declval<bool>()));
        using f1483 = r1483(*)(PlayerObject*, bool);
        return reinterpret_cast<f1483>(base+0x224bd0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().toggleRobotMode(std::declval<bool>())) PlayerObject::toggleRobotMode(bool p0) {
        using r1484 = decltype(std::declval<PlayerObject>().toggleRobotMode(std::declval<bool>()));
        using f1484 = r1484(*)(PlayerObject*, bool);
        return reinterpret_cast<f1484>(base+0x223c70)(this, p0);
    }

    decltype(std::declval<PlayerObject>().toggleRollMode(std::declval<bool>())) PlayerObject::toggleRollMode(bool p0) {
        using r1485 = decltype(std::declval<PlayerObject>().toggleRollMode(std::declval<bool>()));
        using f1485 = r1485(*)(PlayerObject*, bool);
        return reinterpret_cast<f1485>(base+0x223b20)(this, p0);
    }

    decltype(std::declval<PlayerObject>().toggleSpiderMode(std::declval<bool>())) PlayerObject::toggleSpiderMode(bool p0) {
        using r1486 = decltype(std::declval<PlayerObject>().toggleSpiderMode(std::declval<bool>()));
        using f1486 = r1486(*)(PlayerObject*, bool);
        return reinterpret_cast<f1486>(base+0x224830)(this, p0);
    }

    decltype(std::declval<PlayerObject>().toggleVisibility(std::declval<bool>())) PlayerObject::toggleVisibility(bool p0) {
        using r1487 = decltype(std::declval<PlayerObject>().toggleVisibility(std::declval<bool>()));
        using f1487 = r1487(*)(PlayerObject*, bool);
        return reinterpret_cast<f1487>(base+0x21abf0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().touchedObject(std::declval<GameObject*>())) PlayerObject::touchedObject(GameObject* p0) {
        using r1488 = decltype(std::declval<PlayerObject>().touchedObject(std::declval<GameObject*>()));
        using f1488 = r1488(*)(PlayerObject*, GameObject*);
        return reinterpret_cast<f1488>(base+0x22e660)(this, p0);
    }

    decltype(std::declval<PlayerObject>().tryPlaceCheckpoint()) PlayerObject::tryPlaceCheckpoint() {
        using r1489 = decltype(std::declval<PlayerObject>().tryPlaceCheckpoint());
        using f1489 = r1489(*)(PlayerObject*);
        return reinterpret_cast<f1489>(base+0x21a950)(this);
    }

    decltype(std::declval<PlayerObject>().updateCheckpointMode(std::declval<bool>())) PlayerObject::updateCheckpointMode(bool p0) {
        using r1490 = decltype(std::declval<PlayerObject>().updateCheckpointMode(std::declval<bool>()));
        using f1490 = r1490(*)(PlayerObject*, bool);
        return reinterpret_cast<f1490>(base+0x218980)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updateCheckpointTest()) PlayerObject::updateCheckpointTest() {
        using r1491 = decltype(std::declval<PlayerObject>().updateCheckpointTest());
        using f1491 = r1491(*)(PlayerObject*);
        return reinterpret_cast<f1491>(base+0x21a890)(this);
    }

    decltype(std::declval<PlayerObject>().updateCollide(std::declval<bool>(), std::declval<int>())) PlayerObject::updateCollide(bool p0, int p1) {
        using r1492 = decltype(std::declval<PlayerObject>().updateCollide(std::declval<bool>(), std::declval<int>()));
        using f1492 = r1492(*)(PlayerObject*, bool, int);
        return reinterpret_cast<f1492>(base+0x220f10)(this, p0, p1);
    }

    decltype(std::declval<PlayerObject>().updateCollideBottom(std::declval<float>(), std::declval<int>())) PlayerObject::updateCollideBottom(float p0, int p1) {
        using r1493 = decltype(std::declval<PlayerObject>().updateCollideBottom(std::declval<float>(), std::declval<int>()));
        using f1493 = r1493(*)(PlayerObject*, float, int);
        return reinterpret_cast<f1493>(base+0x221790)(this, p0, p1);
    }

    decltype(std::declval<PlayerObject>().updateCollideTop(std::declval<float>(), std::declval<int>())) PlayerObject::updateCollideTop(float p0, int p1) {
        using r1494 = decltype(std::declval<PlayerObject>().updateCollideTop(std::declval<float>(), std::declval<int>()));
        using f1494 = r1494(*)(PlayerObject*, float, int);
        return reinterpret_cast<f1494>(base+0x221c20)(this, p0, p1);
    }

    decltype(std::declval<PlayerObject>().updateDashAnimation()) PlayerObject::updateDashAnimation() {
        using r1495 = decltype(std::declval<PlayerObject>().updateDashAnimation());
        using f1495 = r1495(*)(PlayerObject*);
        return reinterpret_cast<f1495>(base+0x21a570)(this);
    }

    decltype(std::declval<PlayerObject>().updateDashArt()) PlayerObject::updateDashArt() {
        using r1496 = decltype(std::declval<PlayerObject>().updateDashArt());
        using f1496 = r1496(*)(PlayerObject*);
        return reinterpret_cast<f1496>(base+0x222520)(this);
    }

    decltype(std::declval<PlayerObject>().updateGlowColor()) PlayerObject::updateGlowColor() {
        using r1497 = decltype(std::declval<PlayerObject>().updateGlowColor());
        using f1497 = r1497(*)(PlayerObject*);
        return reinterpret_cast<f1497>(base+0x22cf10)(this);
    }

    decltype(std::declval<PlayerObject>().updateJump(std::declval<float>())) PlayerObject::updateJump(float p0) {
        using r1498 = decltype(std::declval<PlayerObject>().updateJump(std::declval<float>()));
        using f1498 = r1498(*)(PlayerObject*, float);
        return reinterpret_cast<f1498>(base+0x219680)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updateJumpVariables()) PlayerObject::updateJumpVariables() {
        using r1499 = decltype(std::declval<PlayerObject>().updateJumpVariables());
        using f1499 = r1499(*)(PlayerObject*);
        return reinterpret_cast<f1499>(base+0x21a740)(this);
    }

    decltype(std::declval<PlayerObject>().updatePlayerBirdFrame(std::declval<int>())) PlayerObject::updatePlayerBirdFrame(int p0) {
        using r1500 = decltype(std::declval<PlayerObject>().updatePlayerBirdFrame(std::declval<int>()));
        using f1500 = r1500(*)(PlayerObject*, int);
        return reinterpret_cast<f1500>(base+0x22bfe0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updatePlayerDartFrame(std::declval<int>())) PlayerObject::updatePlayerDartFrame(int p0) {
        using r1501 = decltype(std::declval<PlayerObject>().updatePlayerDartFrame(std::declval<int>()));
        using f1501 = r1501(*)(PlayerObject*, int);
        return reinterpret_cast<f1501>(base+0x22c260)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updatePlayerFrame(std::declval<int>())) PlayerObject::updatePlayerFrame(int p0) {
        using r1502 = decltype(std::declval<PlayerObject>().updatePlayerFrame(std::declval<int>()));
        using f1502 = r1502(*)(PlayerObject*, int);
        return reinterpret_cast<f1502>(base+0x22c470)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updatePlayerGlow()) PlayerObject::updatePlayerGlow() {
        using r1503 = decltype(std::declval<PlayerObject>().updatePlayerGlow());
        using f1503 = r1503(*)(PlayerObject*);
        return reinterpret_cast<f1503>(base+0x22bc50)(this);
    }

    decltype(std::declval<PlayerObject>().updatePlayerRobotFrame(std::declval<int>())) PlayerObject::updatePlayerRobotFrame(int p0) {
        using r1504 = decltype(std::declval<PlayerObject>().updatePlayerRobotFrame(std::declval<int>()));
        using f1504 = r1504(*)(PlayerObject*, int);
        return reinterpret_cast<f1504>(base+0x22d620)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updatePlayerRollFrame(std::declval<int>())) PlayerObject::updatePlayerRollFrame(int p0) {
        using r1505 = decltype(std::declval<PlayerObject>().updatePlayerRollFrame(std::declval<int>()));
        using f1505 = r1505(*)(PlayerObject*, int);
        return reinterpret_cast<f1505>(base+0x22c6a0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updatePlayerScale()) PlayerObject::updatePlayerScale() {
        using r1506 = decltype(std::declval<PlayerObject>().updatePlayerScale());
        using f1506 = r1506(*)(PlayerObject*);
        return reinterpret_cast<f1506>(base+0x22b8b0)(this);
    }

    decltype(std::declval<PlayerObject>().updatePlayerShipFrame(std::declval<int>())) PlayerObject::updatePlayerShipFrame(int p0) {
        using r1507 = decltype(std::declval<PlayerObject>().updatePlayerShipFrame(std::declval<int>()));
        using f1507 = r1507(*)(PlayerObject*, int);
        return reinterpret_cast<f1507>(base+0x22ba40)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updatePlayerSpiderFrame(std::declval<int>())) PlayerObject::updatePlayerSpiderFrame(int p0) {
        using r1508 = decltype(std::declval<PlayerObject>().updatePlayerSpiderFrame(std::declval<int>()));
        using f1508 = r1508(*)(PlayerObject*, int);
        return reinterpret_cast<f1508>(base+0x22d650)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updatePlayerSpriteExtra(std::declval<gd::string>())) PlayerObject::updatePlayerSpriteExtra(gd::string p0) {
        using r1509 = decltype(std::declval<PlayerObject>().updatePlayerSpriteExtra(std::declval<gd::string>()));
        using f1509 = r1509(*)(PlayerObject*, gd::string);
        return reinterpret_cast<f1509>(base+0x218440)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updateRobotAnimationSpeed()) PlayerObject::updateRobotAnimationSpeed() {
        using r1510 = decltype(std::declval<PlayerObject>().updateRobotAnimationSpeed());
        using f1510 = r1510(*)(PlayerObject*);
        return reinterpret_cast<f1510>(base+0x22df40)(this);
    }

    decltype(std::declval<PlayerObject>().updateRotation(std::declval<float>())) PlayerObject::updateRotation(float p0) {
        using r1511 = decltype(std::declval<PlayerObject>().updateRotation(std::declval<float>()));
        using f1511 = r1511(*)(PlayerObject*, float);
        return reinterpret_cast<f1511>(base+0x2214b0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updateRotation(std::declval<float>(), std::declval<float>())) PlayerObject::updateRotation(float p0, float p1) {
        using r1512 = decltype(std::declval<PlayerObject>().updateRotation(std::declval<float>(), std::declval<float>()));
        using f1512 = r1512(*)(PlayerObject*, float, float);
        return reinterpret_cast<f1512>(base+0x221230)(this, p0, p1);
    }

    decltype(std::declval<PlayerObject>().updateShipRotation(std::declval<float>())) PlayerObject::updateShipRotation(float p0) {
        using r1513 = decltype(std::declval<PlayerObject>().updateShipRotation(std::declval<float>()));
        using f1513 = r1513(*)(PlayerObject*, float);
        return reinterpret_cast<f1513>(base+0x221310)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updateShipSpriteExtra(std::declval<gd::string>())) PlayerObject::updateShipSpriteExtra(gd::string p0) {
        using r1514 = decltype(std::declval<PlayerObject>().updateShipSpriteExtra(std::declval<gd::string>()));
        using f1514 = r1514(*)(PlayerObject*, gd::string);
        return reinterpret_cast<f1514>(base+0x218510)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updateSlopeRotation(std::declval<float>())) PlayerObject::updateSlopeRotation(float p0) {
        using r1515 = decltype(std::declval<PlayerObject>().updateSlopeRotation(std::declval<float>()));
        using f1515 = r1515(*)(PlayerObject*, float);
        return reinterpret_cast<f1515>(base+0x221030)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updateSlopeYVelocity(std::declval<float>())) PlayerObject::updateSlopeYVelocity(float p0) {
        using r1516 = decltype(std::declval<PlayerObject>().updateSlopeYVelocity(std::declval<float>()));
        using f1516 = r1516(*)(PlayerObject*, float);
        return reinterpret_cast<f1516>(base+0x22e920)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updateSpecial(std::declval<float>())) PlayerObject::updateSpecial(float p0) {
        using r1517 = decltype(std::declval<PlayerObject>().updateSpecial(std::declval<float>()));
        using f1517 = r1517(*)(PlayerObject*, float);
        return reinterpret_cast<f1517>(base+0x21a790)(this, p0);
    }

    decltype(std::declval<PlayerObject>().updateStateVariables()) PlayerObject::updateStateVariables() {
        using r1518 = decltype(std::declval<PlayerObject>().updateStateVariables());
        using f1518 = r1518(*)(PlayerObject*);
        return reinterpret_cast<f1518>(base+0x21a770)(this);
    }

    decltype(std::declval<PlayerObject>().updateTimeMod(std::declval<float>())) PlayerObject::updateTimeMod(float p0) {
        using r1519 = decltype(std::declval<PlayerObject>().updateTimeMod(std::declval<float>()));
        using f1519 = r1519(*)(PlayerObject*, float);
        return reinterpret_cast<f1519>(base+0x2185e0)(this, p0);
    }

    decltype(std::declval<PlayerObject>().usingWallLimitedMode()) PlayerObject::usingWallLimitedMode() {
        using r1520 = decltype(std::declval<PlayerObject>().usingWallLimitedMode());
        using f1520 = r1520(*)(PlayerObject*);
        return reinterpret_cast<f1520>(base+0x22df00)(this);
    }

    decltype(std::declval<PlayerObject>().yStartDown()) PlayerObject::yStartDown() {
        using r1521 = decltype(std::declval<PlayerObject>().yStartDown());
        using f1521 = r1521(*)(PlayerObject*);
        return reinterpret_cast<f1521>(base+0x22e9b0)(this);
    }

    decltype(std::declval<PlayerObject>().yStartUp()) PlayerObject::yStartUp() {
        using r1522 = decltype(std::declval<PlayerObject>().yStartUp());
        using f1522 = r1522(*)(PlayerObject*);
        return reinterpret_cast<f1522>(base+0x22e990)(this);
    }

    decltype(std::declval<SimplePlayer>().create(std::declval<int>())) SimplePlayer::create(int p0) {
        using r1523 = decltype(std::declval<SimplePlayer>().create(std::declval<int>()));
        using f1523 = r1523(*)(int);
        return reinterpret_cast<f1523>(base+0x1b6140)(p0);

    }

    decltype(std::declval<SimplePlayer>().setSecondColor(std::declval<cocos2d::_ccColor3B const&>())) SimplePlayer::setSecondColor(cocos2d::_ccColor3B const& p0) {
        using r1524 = decltype(std::declval<SimplePlayer>().setSecondColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f1524 = r1524(*)(SimplePlayer*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f1524>(base+0x1bace0)(this, p0);
    }

    decltype(std::declval<SimplePlayer>().updateColors()) SimplePlayer::updateColors() {
        using r1525 = decltype(std::declval<SimplePlayer>().updateColors());
        using f1525 = r1525(*)(SimplePlayer*);
        return reinterpret_cast<f1525>(base+0x1ba1f0)(this);
    }

    decltype(std::declval<SimplePlayer>().updatePlayerFrame(std::declval<int>(), std::declval<IconType>())) SimplePlayer::updatePlayerFrame(int p0, IconType p1) {
        using r1526 = decltype(std::declval<SimplePlayer>().updatePlayerFrame(std::declval<int>(), std::declval<IconType>()));
        using f1526 = r1526(*)(SimplePlayer*, int, IconType);
        return reinterpret_cast<f1526>(base+0x1b62f0)(this, p0, p1);
    }

    decltype(std::declval<AnimatedGameObject>().playAnimation(std::declval<int>())) AnimatedGameObject::playAnimation(int p0) {
        using r1527 = decltype(std::declval<AnimatedGameObject>().playAnimation(std::declval<int>()));
        using f1527 = r1527(*)(AnimatedGameObject*, int);
        return reinterpret_cast<f1527>(base+0xc93d0)(this, p0);
    }

    decltype(std::declval<AnimatedGameObject>().updateChildSpriteColor(std::declval<cocos2d::_ccColor3B>())) AnimatedGameObject::updateChildSpriteColor(cocos2d::_ccColor3B p0) {
        using r1528 = decltype(std::declval<AnimatedGameObject>().updateChildSpriteColor(std::declval<cocos2d::_ccColor3B>()));
        using f1528 = r1528(*)(AnimatedGameObject*, cocos2d::_ccColor3B);
        return reinterpret_cast<f1528>(base+0xc8450)(this, p0);
    }

    decltype(std::declval<CheckpointObject>().create()) CheckpointObject::create() {
        using r1529 = decltype(std::declval<CheckpointObject>().create());
        using f1529 = r1529(*)();
        return reinterpret_cast<f1529>(base+0x7e7d0)();

    }

    decltype(std::declval<CheckpointObject>().getObject()) CheckpointObject::getObject() {
        using r1530 = decltype(std::declval<CheckpointObject>().getObject());
        using f1530 = r1530(*)(CheckpointObject*);
        return reinterpret_cast<f1530>(base+0x7ef50)(this);
    }

    decltype(std::declval<EffectGameObject>().create(std::declval<char const*>())) EffectGameObject::create(char const* p0) {
        using r1531 = decltype(std::declval<EffectGameObject>().create(std::declval<char const*>()));
        using f1531 = r1531(*)(char const*);
        return reinterpret_cast<f1531>(base+0xc9790)(p0);

    }

    decltype(std::declval<EffectGameObject>().getTargetColorIndex()) EffectGameObject::getTargetColorIndex() {
        using r1532 = decltype(std::declval<EffectGameObject>().getTargetColorIndex());
        using f1532 = r1532(*)(EffectGameObject*);
        return reinterpret_cast<f1532>(base+0xca1f0)(this);
    }

    decltype(std::declval<EffectGameObject>().triggerObject(std::declval<GJBaseGameLayer*>())) EffectGameObject::triggerObject(GJBaseGameLayer* p0) {
        using r1533 = decltype(std::declval<EffectGameObject>().triggerObject(std::declval<GJBaseGameLayer*>()));
        using f1533 = r1533(*)(EffectGameObject*, GJBaseGameLayer*);
        return reinterpret_cast<f1533>(base+0xc9870)(this, p0);
    }

    decltype(std::declval<EndPortalObject>().create()) EndPortalObject::create() {
        using r1534 = decltype(std::declval<EndPortalObject>().create());
        using f1534 = r1534(*)();
        return reinterpret_cast<f1534>(base+0x1da8f0)();

    }

    decltype(std::declval<EndPortalObject>().updateColors(std::declval<cocos2d::_ccColor3B>())) EndPortalObject::updateColors(cocos2d::_ccColor3B p0) {
        using r1535 = decltype(std::declval<EndPortalObject>().updateColors(std::declval<cocos2d::_ccColor3B>()));
        using f1535 = r1535(*)(EndPortalObject*, cocos2d::_ccColor3B);
        return reinterpret_cast<f1535>(base+0x1dacb0)(this, p0);
    }

    decltype(std::declval<LabelGameObject>().init()) LabelGameObject::init() {
        using r1536 = decltype(std::declval<LabelGameObject>().init());
        using f1536 = r1536(*)(LabelGameObject*);
        return reinterpret_cast<f1536>(base+0x2f5520)(this);
    }

    decltype(std::declval<LabelGameObject>().setObjectColor(std::declval<cocos2d::_ccColor3B const&>())) LabelGameObject::setObjectColor(cocos2d::_ccColor3B const& p0) {
        using r1537 = decltype(std::declval<LabelGameObject>().setObjectColor(std::declval<cocos2d::_ccColor3B const&>()));
        using f1537 = r1537(*)(LabelGameObject*, cocos2d::_ccColor3B const&);
        return reinterpret_cast<f1537>(base+0xdbca0)(this, p0);
    }

    UndoObject::~UndoObject() {
        jumpDestructor(0xa2fd0)
    }

    decltype(std::declval<UndoObject>().create(std::declval<GameObject*>(), std::declval<UndoCommand>())) UndoObject::create(GameObject* p0, UndoCommand p1) {
        using r1539 = decltype(std::declval<UndoObject>().create(std::declval<GameObject*>(), std::declval<UndoCommand>()));
        using f1539 = r1539(*)(GameObject*, UndoCommand);
        return reinterpret_cast<f1539>(base+0x94ea0)(p0, p1);

    }

    decltype(std::declval<UndoObject>().createWithArray(std::declval<cocos2d::CCArray*>(), std::declval<UndoCommand>())) UndoObject::createWithArray(cocos2d::CCArray* p0, UndoCommand p1) {
        using r1540 = decltype(std::declval<UndoObject>().createWithArray(std::declval<cocos2d::CCArray*>(), std::declval<UndoCommand>()));
        using f1540 = r1540(*)(cocos2d::CCArray*, UndoCommand);
        return reinterpret_cast<f1540>(base+0x96ee0)(p0, p1);

    }

    PlayerCheckpoint::~PlayerCheckpoint() {
        jumpDestructor(0x80760)
    }

    decltype(std::declval<PlayerCheckpoint>().init()) PlayerCheckpoint::init() {
        using r1542 = decltype(std::declval<PlayerCheckpoint>().init());
        using f1542 = r1542(*)(PlayerCheckpoint*);
        return reinterpret_cast<f1542>(base+0x807a0)(this);
    }

    decltype(std::declval<PlayerCheckpoint>().create()) PlayerCheckpoint::create() {
        using r1543 = decltype(std::declval<PlayerCheckpoint>().create());
        using f1543 = r1543(*)();
        return reinterpret_cast<f1543>(base+0x7e8c0)();

    }

    SongInfoObject::~SongInfoObject() {
        jumpDestructor(0x2f2040)
    }

    decltype(std::declval<SongInfoObject>().encodeWithCoder(std::declval<DS_Dictionary*>())) SongInfoObject::encodeWithCoder(DS_Dictionary* p0) {
        using r1545 = decltype(std::declval<SongInfoObject>().encodeWithCoder(std::declval<DS_Dictionary*>()));
        using f1545 = r1545(*)(SongInfoObject*, DS_Dictionary*);
        return reinterpret_cast<f1545>(base+0x2f2c70)(this, p0);
    }

    decltype(std::declval<SongInfoObject>().canEncode()) SongInfoObject::canEncode() {
        using r1546 = decltype(std::declval<SongInfoObject>().canEncode());
        using f1546 = r1546(*)(SongInfoObject*);
        return reinterpret_cast<f1546>(base+0x2f2da0)(this);
    }

    GJGameLevel::~GJGameLevel() {
        jumpDestructor(0x2db2d0)
    }

    decltype(std::declval<GJGameLevel>().encodeWithCoder(std::declval<DS_Dictionary*>())) GJGameLevel::encodeWithCoder(DS_Dictionary* p0) {
        using r1548 = decltype(std::declval<GJGameLevel>().encodeWithCoder(std::declval<DS_Dictionary*>()));
        using f1548 = r1548(*)(GJGameLevel*, DS_Dictionary*);
        return reinterpret_cast<f1548>(base+0x2dd1c0)(this, p0);
    }

    decltype(std::declval<GJGameLevel>().canEncode()) GJGameLevel::canEncode() {
        using r1549 = decltype(std::declval<GJGameLevel>().canEncode());
        using f1549 = r1549(*)(GJGameLevel*);
        return reinterpret_cast<f1549>(base+0x2ddae0)(this);
    }

    decltype(std::declval<GJGameLevel>().init()) GJGameLevel::init() {
        using r1550 = decltype(std::declval<GJGameLevel>().init());
        using f1550 = r1550(*)(GJGameLevel*);
        return reinterpret_cast<f1550>(base+0x2db310)(this);
    }

    decltype(std::declval<GJGameLevel>().create()) GJGameLevel::create() {
        using r1551 = decltype(std::declval<GJGameLevel>().create());
        using f1551 = r1551(*)();
        return reinterpret_cast<f1551>(base+0x2b83e0)();

    }

    decltype(std::declval<GJGameLevel>().getAudioFileName()) GJGameLevel::getAudioFileName() {
        using r1552 = decltype(std::declval<GJGameLevel>().getAudioFileName());
        using f1552 = r1552(*)(GJGameLevel*);
        return reinterpret_cast<f1552>(base+0x2dbe70)(this);
    }

    decltype(std::declval<GJGameLevel>().getCoinKey(std::declval<int>())) GJGameLevel::getCoinKey(int p0) {
        using r1553 = decltype(std::declval<GJGameLevel>().getCoinKey(std::declval<int>()));
        using f1553 = r1553(*)(GJGameLevel*, int);
        return reinterpret_cast<f1553>(base+0x2ce360)(this, p0);
    }

    decltype(std::declval<GJGameLevel>().getLengthKey(std::declval<int>())) GJGameLevel::getLengthKey(int p0) {
        using r1554 = decltype(std::declval<GJGameLevel>().getLengthKey(std::declval<int>()));
        using f1554 = r1554(*)(GJGameLevel*, int);
        return reinterpret_cast<f1554>(base+0x2dbba0)(this, p0);
    }

    decltype(std::declval<GJGameLevel>().getNormalPercent()) GJGameLevel::getNormalPercent() {
        using r1555 = decltype(std::declval<GJGameLevel>().getNormalPercent());
        using f1555 = r1555(*)(GJGameLevel*);
        return reinterpret_cast<f1555>(base+0x2b8b20)(this);
    }

    decltype(std::declval<GJGameLevel>().levelWasAltered()) GJGameLevel::levelWasAltered() {
        using r1556 = decltype(std::declval<GJGameLevel>().levelWasAltered());
        using f1556 = r1556(*)(GJGameLevel*);
        return reinterpret_cast<f1556>(base+0x2db530)(this);
    }

    decltype(std::declval<GJGameLevel>().savePercentage(std::declval<int>(), std::declval<bool>(), std::declval<int>(), std::declval<int>(), std::declval<bool>())) GJGameLevel::savePercentage(int p0, bool p1, int p2, int p3, bool p4) {
        using r1557 = decltype(std::declval<GJGameLevel>().savePercentage(std::declval<int>(), std::declval<bool>(), std::declval<int>(), std::declval<int>(), std::declval<bool>()));
        using f1557 = r1557(*)(GJGameLevel*, int, bool, int, int, bool);
        return reinterpret_cast<f1557>(base+0x2db700)(this, p0, p1, p2, p3, p4);
    }

    LevelSettingsObject::~LevelSettingsObject() {
        jumpDestructor(0xa5650)
    }

    decltype(std::declval<LevelSettingsObject>().init()) LevelSettingsObject::init() {
        using r1559 = decltype(std::declval<LevelSettingsObject>().init());
        using f1559 = r1559(*)(LevelSettingsObject*);
        return reinterpret_cast<f1559>(base+0xa5690)(this);
    }

    decltype(std::declval<LevelSettingsObject>().create()) LevelSettingsObject::create() {
        using r1560 = decltype(std::declval<LevelSettingsObject>().create());
        using f1560 = r1560(*)();
        return reinterpret_cast<f1560>(base+0x92760)();

    }

    decltype(std::declval<LevelSettingsObject>().objectFromDict(std::declval<cocos2d::CCDictionary*>())) LevelSettingsObject::objectFromDict(cocos2d::CCDictionary* p0) {
        using r1561 = decltype(std::declval<LevelSettingsObject>().objectFromDict(std::declval<cocos2d::CCDictionary*>()));
        using f1561 = r1561(*)(LevelSettingsObject*, cocos2d::CCDictionary*);
        return reinterpret_cast<f1561>(base+0xa5810)(this, p0);
    }

    decltype(std::declval<LevelSettingsObject>().objectFromString(std::declval<gd::string>())) LevelSettingsObject::objectFromString(gd::string p0) {
        using r1562 = decltype(std::declval<LevelSettingsObject>().objectFromString(std::declval<gd::string>()));
        using f1562 = r1562(*)(gd::string);
        return reinterpret_cast<f1562>(base+0x945a0)(p0);

    }

    decltype(std::declval<LevelSettingsObject>().setupColorsFromLegacyMode(std::declval<cocos2d::CCDictionary*>())) LevelSettingsObject::setupColorsFromLegacyMode(cocos2d::CCDictionary* p0) {
        using r1563 = decltype(std::declval<LevelSettingsObject>().setupColorsFromLegacyMode(std::declval<cocos2d::CCDictionary*>()));
        using f1563 = r1563(*)(LevelSettingsObject*, cocos2d::CCDictionary*);
        return reinterpret_cast<f1563>(base+0xa6a30)(this, p0);
    }

    decltype(std::declval<OBB2D>().calculateWithCenter(std::declval<cocos2d::CCPoint>(), std::declval<float>(), std::declval<float>(), std::declval<float>())) OBB2D::calculateWithCenter(cocos2d::CCPoint p0, float p1, float p2, float p3) {
        using r1564 = decltype(std::declval<OBB2D>().calculateWithCenter(std::declval<cocos2d::CCPoint>(), std::declval<float>(), std::declval<float>(), std::declval<float>()));
        using f1564 = r1564(*)(OBB2D*, cocos2d::CCPoint, float, float, float);
        return reinterpret_cast<f1564>(base+0x35a9c0)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<OBB2D>().create(std::declval<cocos2d::CCPoint>(), std::declval<float>(), std::declval<float>(), std::declval<float>())) OBB2D::create(cocos2d::CCPoint p0, float p1, float p2, float p3) {
        using r1565 = decltype(std::declval<OBB2D>().create(std::declval<cocos2d::CCPoint>(), std::declval<float>(), std::declval<float>(), std::declval<float>()));
        using f1565 = r1565(*)(cocos2d::CCPoint, float, float, float);
        return reinterpret_cast<f1565>(base+0x35a890)(p0, p1, p2, p3);

    }

    decltype(std::declval<OBB2D>().getBoundingRect()) OBB2D::getBoundingRect() {
        using r1566 = decltype(std::declval<OBB2D>().getBoundingRect());
        using f1566 = r1566(*)(OBB2D*);
        return reinterpret_cast<f1566>(base+0x35b2b0)(this);
    }

    decltype(std::declval<OBB2D>().overlaps(std::declval<OBB2D*>())) OBB2D::overlaps(OBB2D* p0) {
        using r1567 = decltype(std::declval<OBB2D>().overlaps(std::declval<OBB2D*>()));
        using f1567 = r1567(*)(OBB2D*, OBB2D*);
        return reinterpret_cast<f1567>(base+0x35b0a0)(this, p0);
    }

    decltype(std::declval<OBB2D>().overlaps1Way(std::declval<OBB2D*>())) OBB2D::overlaps1Way(OBB2D* p0) {
        using r1568 = decltype(std::declval<OBB2D>().overlaps1Way(std::declval<OBB2D*>()));
        using f1568 = r1568(*)(OBB2D*, OBB2D*);
        return reinterpret_cast<f1568>(base+0x35b0d0)(this, p0);
    }

    GJComment::~GJComment() {
        jumpDestructor(0x2dfd70)
    }

    decltype(std::declval<GJComment>().init()) GJComment::init() {
        using r1570 = decltype(std::declval<GJComment>().init());
        using f1570 = r1570(*)(GJComment*);
        return reinterpret_cast<f1570>(base+0x2dfec0)(this);
    }

    TableViewCell::TableViewCell(char const* p0, float p1, float p2) {
        using r1571 = TableViewCell*;
        using f1571 = r1571(*)(TableViewCell*, char const*, float, float);
        reinterpret_cast<f1571>(base+0x383de0)(this, p0, p1, p2);
    }

    ArtistCell::ArtistCell(char const* p0, float p1, float p2) {
        using r1572 = ArtistCell*;
        using f1572 = r1572(*)(ArtistCell*, char const*, float, float);
        reinterpret_cast<f1572>(base+0x11c740)(this, p0, p1, p2);
    }

    decltype(std::declval<ArtistCell>().draw()) ArtistCell::draw() {
        using r1573 = decltype(std::declval<ArtistCell>().draw());
        using f1573 = r1573(*)(ArtistCell*);
        return reinterpret_cast<f1573>(base+0x11c980)(this);
    }

    decltype(std::declval<ArtistCell>().init()) ArtistCell::init() {
        using r1574 = decltype(std::declval<ArtistCell>().init());
        using f1574 = r1574(*)(ArtistCell*);
        return reinterpret_cast<f1574>(base+0x11c7c0)(this);
    }

    decltype(std::declval<ArtistCell>().loadFromObject(std::declval<SongInfoObject*>())) ArtistCell::loadFromObject(SongInfoObject* p0) {
        using r1575 = decltype(std::declval<ArtistCell>().loadFromObject(std::declval<SongInfoObject*>()));
        using f1575 = r1575(*)(ArtistCell*, SongInfoObject*);
        return reinterpret_cast<f1575>(base+0x1118b0)(this, p0);
    }

    decltype(std::declval<ArtistCell>().onNewgrounds(std::declval<cocos2d::CCObject*>())) ArtistCell::onNewgrounds(cocos2d::CCObject* p0) {
        using r1576 = decltype(std::declval<ArtistCell>().onNewgrounds(std::declval<cocos2d::CCObject*>()));
        using f1576 = r1576(*)(ArtistCell*, cocos2d::CCObject*);
        return reinterpret_cast<f1576>(base+0x11c7e0)(this, p0);
    }

    decltype(std::declval<ArtistCell>().updateBGColor(std::declval<int>())) ArtistCell::updateBGColor(int p0) {
        using r1577 = decltype(std::declval<ArtistCell>().updateBGColor(std::declval<int>()));
        using f1577 = r1577(*)(ArtistCell*, int);
        return reinterpret_cast<f1577>(base+0x110460)(this, p0);
    }

    decltype(std::declval<CommentCell>().loadFromComment(std::declval<GJComment*>())) CommentCell::loadFromComment(GJComment* p0) {
        using r1578 = decltype(std::declval<CommentCell>().loadFromComment(std::declval<GJComment*>()));
        using f1578 = r1578(*)(CommentCell*, GJComment*);
        return reinterpret_cast<f1578>(base+0x111c70)(this, p0);
    }

    decltype(std::declval<CustomSongCell>().loadFromObject(std::declval<SongInfoObject*>())) CustomSongCell::loadFromObject(SongInfoObject* p0) {
        using r1579 = decltype(std::declval<CustomSongCell>().loadFromObject(std::declval<SongInfoObject*>()));
        using f1579 = r1579(*)(CustomSongCell*, SongInfoObject*);
        return reinterpret_cast<f1579>(base+0x110220)(this, p0);
    }

    decltype(std::declval<SpawnTriggerAction>().createFromString(std::declval<gd::string>())) SpawnTriggerAction::createFromString(gd::string p0) {
        using r1580 = decltype(std::declval<SpawnTriggerAction>().createFromString(std::declval<gd::string>()));
        using f1580 = r1580(*)(gd::string);
        return reinterpret_cast<f1580>(base+0x17bf50)(p0);

    }

    decltype(std::declval<PulseEffectAction>().createFromString(std::declval<gd::string>())) PulseEffectAction::createFromString(gd::string p0) {
        using r1581 = decltype(std::declval<PulseEffectAction>().createFromString(std::declval<gd::string>()));
        using f1581 = r1581(*)(gd::string);
        return reinterpret_cast<f1581>(base+0x179e90)(p0);

    }

    decltype(std::declval<PulseEffectAction>().getSaveString()) PulseEffectAction::getSaveString() {
        using r1582 = decltype(std::declval<PulseEffectAction>().getSaveString());
        using f1582 = r1582(*)(PulseEffectAction*);
        return reinterpret_cast<f1582>(base+0x17a850)(this);
    }

    decltype(std::declval<ToggleTriggerAction>().createFromString(std::declval<gd::string>())) ToggleTriggerAction::createFromString(gd::string p0) {
        using r1583 = decltype(std::declval<ToggleTriggerAction>().createFromString(std::declval<gd::string>()));
        using f1583 = r1583(*)(gd::string);
        return reinterpret_cast<f1583>(base+0x1765e0)(p0);

    }

    decltype(std::declval<OpacityEffectAction>().create(std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<int>())) OpacityEffectAction::create(float p0, float p1, float p2, int p3) {
        using r1584 = decltype(std::declval<OpacityEffectAction>().create(std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<int>()));
        using f1584 = r1584(*)(float, float, float, int);
        return reinterpret_cast<f1584>(base+0x1789f0)(p0, p1, p2, p3);

    }

    decltype(std::declval<OpacityEffectAction>().createFromString(std::declval<gd::string>())) OpacityEffectAction::createFromString(gd::string p0) {
        using r1585 = decltype(std::declval<OpacityEffectAction>().createFromString(std::declval<gd::string>()));
        using f1585 = r1585(*)(gd::string);
        return reinterpret_cast<f1585>(base+0x178c10)(p0);

    }

    decltype(std::declval<OpacityEffectAction>().init(std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<int>())) OpacityEffectAction::init(float p0, float p1, float p2, int p3) {
        using r1586 = decltype(std::declval<OpacityEffectAction>().init(std::declval<float>(), std::declval<float>(), std::declval<float>(), std::declval<int>()));
        using f1586 = r1586(*)(OpacityEffectAction*, float, float, float, int);
        return reinterpret_cast<f1586>(base+0x178b00)(this, p0, p1, p2, p3);
    }

    decltype(std::declval<OpacityEffectAction>().step(std::declval<float>())) OpacityEffectAction::step(float p0) {
        using r1587 = decltype(std::declval<OpacityEffectAction>().step(std::declval<float>()));
        using f1587 = r1587(*)(OpacityEffectAction*, float);
        return reinterpret_cast<f1587>(base+0x178b90)(this, p0);
    }

    decltype(std::declval<TouchToggleAction>().createFromString(std::declval<gd::string>())) TouchToggleAction::createFromString(gd::string p0) {
        using r1588 = decltype(std::declval<TouchToggleAction>().createFromString(std::declval<gd::string>()));
        using f1588 = r1588(*)(gd::string);
        return reinterpret_cast<f1588>(base+0x177e10)(p0);

    }

    decltype(std::declval<CollisionTriggerAction>().createFromString(std::declval<gd::string>())) CollisionTriggerAction::createFromString(gd::string p0) {
        using r1589 = decltype(std::declval<CollisionTriggerAction>().createFromString(std::declval<gd::string>()));
        using f1589 = r1589(*)(gd::string);
        return reinterpret_cast<f1589>(base+0x176ee0)(p0);

    }

    decltype(std::declval<ColorAction>().getSaveString()) ColorAction::getSaveString() {
        using r1590 = decltype(std::declval<ColorAction>().getSaveString());
        using f1590 = r1590(*)(ColorAction*);
        return reinterpret_cast<f1590>(base+0x17d080)(this);
    }

    decltype(std::declval<ColorAction>().setupFromDict(std::declval<cocos2d::CCDictionary*>())) ColorAction::setupFromDict(cocos2d::CCDictionary* p0) {
        using r1591 = decltype(std::declval<ColorAction>().setupFromDict(std::declval<cocos2d::CCDictionary*>()));
        using f1591 = r1591(*)(ColorAction*, cocos2d::CCDictionary*);
        return reinterpret_cast<f1591>(base+0x17f310)(this, p0);
    }

    decltype(std::declval<ColorAction>().setupFromString(std::declval<gd::string>())) ColorAction::setupFromString(gd::string p0) {
        using r1592 = decltype(std::declval<ColorAction>().setupFromString(std::declval<gd::string>()));
        using f1592 = r1592(*)(ColorAction*, gd::string);
        return reinterpret_cast<f1592>(base+0x17f270)(this, p0);
    }

    decltype(std::declval<ColorChannelSprite>().updateBlending(std::declval<bool>())) ColorChannelSprite::updateBlending(bool p0) {
        using r1593 = decltype(std::declval<ColorChannelSprite>().updateBlending(std::declval<bool>()));
        using f1593 = r1593(*)(ColorChannelSprite*, bool);
        return reinterpret_cast<f1593>(base+0x16e1d0)(this, p0);
    }

    decltype(std::declval<ColorChannelSprite>().updateCopyLabel(std::declval<int>(), std::declval<bool>())) ColorChannelSprite::updateCopyLabel(int p0, bool p1) {
        using r1594 = decltype(std::declval<ColorChannelSprite>().updateCopyLabel(std::declval<int>(), std::declval<bool>()));
        using f1594 = r1594(*)(ColorChannelSprite*, int, bool);
        return reinterpret_cast<f1594>(base+0x16ded0)(this, p0, p1);
    }

    decltype(std::declval<ColorChannelSprite>().updateOpacity(std::declval<float>())) ColorChannelSprite::updateOpacity(float p0) {
        using r1595 = decltype(std::declval<ColorChannelSprite>().updateOpacity(std::declval<float>()));
        using f1595 = r1595(*)(ColorChannelSprite*, float);
        return reinterpret_cast<f1595>(base+0x16e080)(this, p0);
    }

    decltype(std::declval<ColorChannelSprite>().updateValues(std::declval<ColorAction*>())) ColorChannelSprite::updateValues(ColorAction* p0) {
        using r1596 = decltype(std::declval<ColorChannelSprite>().updateValues(std::declval<ColorAction*>()));
        using f1596 = r1596(*)(ColorChannelSprite*, ColorAction*);
        return reinterpret_cast<f1596>(base+0x16e2e0)(this, p0);
    }

    decltype(std::declval<CountTriggerAction>().createFromString(std::declval<gd::string>())) CountTriggerAction::createFromString(gd::string p0) {
        using r1597 = decltype(std::declval<CountTriggerAction>().createFromString(std::declval<gd::string>()));
        using f1597 = r1597(*)(gd::string);
        return reinterpret_cast<f1597>(base+0x1754f0)(p0);

    }

    GJRobotSprite::~GJRobotSprite() {
        jumpDestructor(0x34aaf0)
    }

    decltype(std::declval<GJRobotSprite>().init()) GJRobotSprite::init() {
        using r1599 = decltype(std::declval<GJRobotSprite>().init());
        using f1599 = r1599(*)(GJRobotSprite*);
        return reinterpret_cast<f1599>(base+0x34ad50)(this);
    }

    decltype(std::declval<GJRobotSprite>().setOpacity(std::declval<unsigned char>())) GJRobotSprite::setOpacity(unsigned char p0) {
        using r1600 = decltype(std::declval<GJRobotSprite>().setOpacity(std::declval<unsigned char>()));
        using f1600 = r1600(*)(GJRobotSprite*, unsigned char);
        return reinterpret_cast<f1600>(base+0x34bcc0)(this, p0);
    }

    decltype(std::declval<GJRobotSprite>().hideSecondary()) GJRobotSprite::hideSecondary() {
        using r1601 = decltype(std::declval<GJRobotSprite>().hideSecondary());
        using f1601 = r1601(*)(GJRobotSprite*);
        return reinterpret_cast<f1601>(base+0x34c3b0)(this);
    }

    decltype(std::declval<GJRobotSprite>().create()) GJRobotSprite::create() {
        using r1602 = decltype(std::declval<GJRobotSprite>().create());
        using f1602 = r1602(*)();
        return reinterpret_cast<f1602>(base+0x34ac00)();

    }

    decltype(std::declval<GJRobotSprite>().updateColor02(std::declval<cocos2d::_ccColor3B>())) GJRobotSprite::updateColor02(cocos2d::_ccColor3B p0) {
        using r1603 = decltype(std::declval<GJRobotSprite>().updateColor02(std::declval<cocos2d::_ccColor3B>()));
        using f1603 = r1603(*)(GJRobotSprite*, cocos2d::_ccColor3B);
        return reinterpret_cast<f1603>(base+0x34bbd0)(this, p0);
    }

    decltype(std::declval<GJRobotSprite>().updateFrame(std::declval<int>())) GJRobotSprite::updateFrame(int p0) {
        using r1604 = decltype(std::declval<GJRobotSprite>().updateFrame(std::declval<int>()));
        using f1604 = r1604(*)(GJRobotSprite*, int);
        return reinterpret_cast<f1604>(base+0x34bdd0)(this, p0);
    }

    GJSpiderSprite::~GJSpiderSprite() {
        jumpDestructor(0x34c4a0)
    }

    decltype(std::declval<GJSpiderSprite>().init()) GJSpiderSprite::init() {
        using r1606 = decltype(std::declval<GJSpiderSprite>().init());
        using f1606 = r1606(*)(GJSpiderSprite*);
        return reinterpret_cast<f1606>(base+0x34c700)(this);
    }

    decltype(std::declval<GJSpiderSprite>().create()) GJSpiderSprite::create() {
        using r1607 = decltype(std::declval<GJSpiderSprite>().create());
        using f1607 = r1607(*)();
        return reinterpret_cast<f1607>(base+0x34c5b0)();

    }

    decltype(std::declval<AchievementCell>().loadFromDict(std::declval<cocos2d::CCDictionary*>())) AchievementCell::loadFromDict(cocos2d::CCDictionary* p0) {
        using r1608 = decltype(std::declval<AchievementCell>().loadFromDict(std::declval<cocos2d::CCDictionary*>()));
        using f1608 = r1608(*)(AchievementCell*, cocos2d::CCDictionary*);
        return reinterpret_cast<f1608>(base+0x10eaa0)(this, p0);
    }

    decltype(std::declval<AchievementsLayer>().customSetup()) AchievementsLayer::customSetup() {
        using r1609 = decltype(std::declval<AchievementsLayer>().customSetup());
        using f1609 = r1609(*)(AchievementsLayer*);
        return reinterpret_cast<f1609>(base+0x1bdea0)(this);
    }

    decltype(std::declval<AchievementsLayer>().loadPage(std::declval<int>())) AchievementsLayer::loadPage(int p0) {
        using r1610 = decltype(std::declval<AchievementsLayer>().loadPage(std::declval<int>()));
        using f1610 = r1610(*)(AchievementsLayer*, int);
        return reinterpret_cast<f1610>(base+0x1be190)(this, p0);
    }

    decltype(std::declval<AchievementManager>().getAllAchievements()) AchievementManager::getAllAchievements() {
        using r1611 = decltype(std::declval<AchievementManager>().getAllAchievements());
        using f1611 = r1611(*)(AchievementManager*);
        return reinterpret_cast<f1611>(base+0x434d60)(this);
    }

    decltype(std::declval<AchievementManager>().sharedState()) AchievementManager::sharedState() {
        using r1612 = decltype(std::declval<AchievementManager>().sharedState());
        using f1612 = r1612(*)(AchievementManager*);
        return reinterpret_cast<f1612>(base+0x424420)(this);
    }

    decltype(std::declval<AchievementNotifier>().sharedState()) AchievementNotifier::sharedState() {
        using r1613 = decltype(std::declval<AchievementNotifier>().sharedState());
        using f1613 = r1613(*)(AchievementNotifier*);
        return reinterpret_cast<f1613>(base+0x464e00)(this);
    }

    decltype(std::declval<AchievementNotifier>().willSwitchToScene(std::declval<cocos2d::CCScene*>())) AchievementNotifier::willSwitchToScene(cocos2d::CCScene* p0) {
        using r1614 = decltype(std::declval<AchievementNotifier>().willSwitchToScene(std::declval<cocos2d::CCScene*>()));
        using f1614 = r1614(*)(AchievementNotifier*, cocos2d::CCScene*);
        return reinterpret_cast<f1614>(base+0x4650b0)(this, p0);
    }
