#!/bin/bash

srcpath="$( cd "$( dirname "$0" )" && pwd )"
relink=''
update=''
ios=''

print_usage() {
	printf "
	Usage: projectName [-d destinationPath] [-l] [-u]

	projectName               Name of the project
	-d destinationPath        The destination path of the project, Projects/projectName if omitted
	-l                        To relink the Cacao directory if it is broken
	-u                        To update the old Cacao project to new

	For Example: 
	./create
	./create MyProject
	./create -l -d ./cloned_path/cloned_project

	-h                        Show the help text
	"
}

fix_link() {
	if [ -L "$copypath/Cacao" ]; then
		rm "$copypath/Cacao"
	fi
	relpath=`python -c "import os.path; print(os.path.relpath('$srcpath/Source/Cacao', '$copypath'))"`
	cd "$copypath"
	ln -s $relpath Cacao
}

copy_files() {
	cp "$srcpath/Template/.gitignore" "$copypath"
	cp "$srcpath/Template/CMakeLists.txt" "$copypath"
	cp "$srcpath/Template/README.md" "$copypath"
	cp "$srcpath/Template/CacTemplate.sublime-project" "$copypath/$projname.sublime-project"
	sed -i '' "s/CacTemplate/$projname/g" "$copypath/CMakeLists.txt"
	sed -i '' "s/CacTemplate/$projname/g" "$copypath/README.md"
	sed -i '' "s/CacTemplate/$projname/g" "$copypath/$projname.sublime-project"
}

copy_not_ios() {
	sed -i '' "s/# substrate//g" "$copypath/CMakeLists.txt"
	sed -i '' "s/# sdk//g" "$copypath/CMakeLists.txt"
	sed -i '' "s/# bundle//g" "$copypath/CMakeLists.txt"
	sed -i '' "s/# author//g" "$copypath/CMakeLists.txt"
}

copy_ios() {
	if [ -z ${CACAO_SUBSTRATE+x} ]; then
		echo "Note: set the \$CACAO_SUBSTRATE environment variable to remove this prompt"
		read -p "MobileSubstrate Location (required) " CACAO_SUBSTRATE
	fi

	if [ -z ${CACAO_IOS_SDK+x} ]; then
		echo "Note: set the \$CACAO_IOS_SDK environment variable to remove this prompt"
		read -p "iPhoneOS SDK Location (required) " CACAO_IOS_SDK
	fi

	bundleid=""
	read -p "Bundle Identifier [com.example.gdmod] " bundleid
	bundleid=${bundleid:-"com.example.gdmod"}

	author=""
	read -p "Author [Someone] " author
	author=${author:-Someone}

	sed -i '' "s/# substrate/set(CACAO_IOS_SUBSTRATE $CACAO_SUBSTRATE)/g" "$copypath/CMakeLists.txt"
	sed -i '' "s/# sdk/set(CACAO_IOS_SDK $CACAO_IOS_SDK)/g" "$copypath/CMakeLists.txt"
	sed -i '' "s/# bundle/set(CACAO_IOS_BUNDLE $bundleid)/g" "$copypath/CMakeLists.txt"
	sed -i '' "s/# author/set(CACAO_IOS_AUTHOR $author)/g" "$copypath/CMakeLists.txt"
}

while getopts 'd:lhui' flag; do
	case "${flag}" in
		d) copypath="${OPTARG}" ;;
		l) relink='true' ;;
		u) update='true' ;;
		i) ios='true'    ;;
		h) print_usage
			exit 0 ;;
		*) print_usage
			exit 1 ;;
	esac
done

shift $((OPTIND-1))

projname="${1:-Default Project}"
if [ -z "$copypath" ]; then
	if [[ -z "${CACAO_PROJECT_FOLDER}" ]]; then
		copypath="$projname"
	else
		copypath="${CACAO_PROJECT_FOLDER}/$projname"
	fi
fi

if (( $# + $OPTIND > 1 )); then
	echo $projname
	if [ "$relink" = 'true' ]; then
		echo "Fixing link"
		fix_link
	elif [ "$update" = 'true' ]; then
		echo "Updating project"

		copy_files
		fix_link

	else
		if [ ! -d "$copypath" ]; then
			echo "Creating folder"
			mkdir -p "$copypath"
		fi
		echo "Copying files"

		touch "$copypath/main.cpp"
		echo "#define PROJECT_NAME \"$projname\"" >> "$copypath/main.cpp"
		cat "$srcpath/Template/main.cpp" >> "$copypath/main.cpp"

		copy_files

        if [ "$ios" = 'true' ]; then
        	echo 'ios mode'
        	copy_ios
        else
        	copy_not_ios
        fi

        fix_link
		
	fi
	echo "Done."
else 
	print_usage
	exit 1
fi
